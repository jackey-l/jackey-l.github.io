<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用github图床+CDN优化github资源加载慢</title>
    <link href="/2021/11/04/blog-imgbed/"/>
    <url>/2021/11/04/blog-imgbed/</url>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>博客搬迁至GitHub使用了一段时间了，图片加载速度很慢，体验很差，今天心血来潮，搞搞CDN优化。当然这只能解决资源的加载问题，如果github抽风，那么还是没办法的。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用github仓库来作为图床，使用jsdelivr CDN来进行加速，解决资源加载慢的问题。</p><blockquote><p>jsdelivr是一个国外的免费CDN加速站点，官方的建议是用来做JS等文件的加速，试了一下速度还可以。</p><p>2020年8月月官方出了声明，官方不建议使用git+jsdelivr图床的组合。 </p><p> <a href="https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net">https://www.jsdelivr.com/terms/acceptable-use-policy-jsdelivr-net</a></p><p>同学们可以自行替换为其他的CDN。这里我头铁，暂时用这个。</p><p>使用起来也非常简单，就在原来的资源URL上稍作改动即可。</p><p>示例：</p><p><a href="https://cdn.jsdelivr.net/gh/github%E7%94%A8%E6%88%B7%E5%90%8D/github%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF%E5%90%8D/pic1.png">https://cdn.jsdelivr.net/gh/github用户名/github仓库名@分支名/pic1.png</a></p></blockquote><h3 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104093923995.png"></p><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104095941315.png"></p><h4 id="note填写一下"><a href="#note填写一下" class="headerlink" title="note填写一下"></a>note填写一下</h4><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104100032924.png"></p><h4 id="点击生成按钮"><a href="#点击生成按钮" class="headerlink" title="点击生成按钮"></a>点击生成按钮</h4><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104100152930.png"></p><h4 id="复制保存token"><a href="#复制保存token" class="headerlink" title="复制保存token"></a>复制保存token</h4><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104100841763.png"></p><h3 id="设置picgo"><a href="#设置picgo" class="headerlink" title="设置picgo"></a>设置picgo</h3><ol><li>填写git用户名与仓库名</li><li>将上面的token复制至picgo配置中</li><li>分支名填写创建仓库的名称。</li><li>img/为仓库自路径，如图片存放在根路径下可以不填。</li><li>自定义域名填写CDN加速域名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104095646756.png"></p><p>笔者用的是typora编辑器，附上typro配置</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104095820291.png"></p><p>配置完成。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDN</tag>
      
      <tag>图床</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(转载)简单理解OAuth2.0</title>
    <link href="/2021/10/18/oauth/"/>
    <url>/2021/10/18/oauth/</url>
    
    <content type="html"><![CDATA[<p>原文<a href="https://www.ruanyifeng.com/blog/2019/04/oauth_design.html">https://www.ruanyifeng.com/blog/2019/04/oauth_design.html</a></p><h1 id="OAuth-2-0-的一个简单解释"><a href="#OAuth-2-0-的一个简单解释" class="headerlink" title="OAuth 2.0 的一个简单解释"></a>OAuth 2.0 的一个简单解释</h1><p><a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">OAuth 2.0</a> 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p><p>这个标准比较抽象，使用了很多术语，初学者不容易理解。其实说起来并不复杂，下面我就通过一个简单的类比，帮助大家轻松理解，OAuth 2.0 到底是什么。</p><h2 id="一、快递员问题"><a href="#一、快递员问题" class="headerlink" title="一、快递员问题"></a>一、快递员问题</h2><p>我住在一个大型的居民小区。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040401.jpg"></p><p>小区有门禁系统。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040402.jpg"></p><p>进入的时候需要输入密码。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040403.jpg"></p><p>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040404.jpg"></p><p>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p><p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p><h2 id="二、授权机制的设计"><a href="#二、授权机制的设计" class="headerlink" title="二、授权机制的设计"></a>二、授权机制的设计</h2><p>于是，我设计了一套授权机制。</p><p>第一步，门禁系统的密码输入器下面，增加一个按钮，叫做”获取授权”。快递员需要首先按这个按钮，去申请授权。</p><p>第二步，他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司。</p><p>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权。</p><p>第三步，门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效。</p><p>第四步，快递员向门禁系统输入令牌，进入小区。</p><p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们。</p><h2 id="三、互联网场景"><a href="#三、互联网场景" class="headerlink" title="三、互联网场景"></a>三、互联网场景</h2><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p><p>首先，居民小区就是储存用户数据的网络服务。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的”门禁系统”。</p><p>其次，快递员（或者说快递公司）就是第三方应用，想要穿过门禁系统，进入小区。</p><p>最后，我就是用户本人，同意授权第三方应用进入小区，获取我的数据。</p><p><strong>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</strong></p><h2 id="四、令牌与密码"><a href="#四、令牌与密码" class="headerlink" title="四、令牌与密码"></a>四、令牌与密码</h2><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p><p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p><p>（2）令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</p><p>（3）令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p><p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以<strong>令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。</strong> 这也是为什么令牌的有效期，一般都设置得很短的原因。</p><p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。下一章就来介绍这四种类型，并给出代码实例。</p><h1 id="OAuth-2-0-的四种方式"><a href="#OAuth-2-0-的四种方式" class="headerlink" title="OAuth 2.0 的四种方式"></a>OAuth 2.0 的四种方式</h1><p>上一章介绍了 OAuth 2.0 是一种授权机制，主要用来颁发令牌（token）。本章接着介绍颁发令牌的实务操作。</p><p>下面我假定，你已经理解了 OAuth 2.0 的含义和设计思想。</p><h2 id="RFC-6749"><a href="#RFC-6749" class="headerlink" title="RFC 6749"></a>RFC 6749</h2><p>OAuth 2.0 的标准是 <a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a> 文件。该文件先解释了 OAuth 是什么。</p><blockquote><p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。……资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。</p></blockquote><p>这段话的意思就是，<strong>OAuth 的核心就是向第三方应用颁发令牌。</strong>然后，RFC 6749 接着写道：</p><blockquote><p>（由于互联网有多种场景，）本标准定义了获得令牌的四种授权方式（authorization grant ）。</p></blockquote><p>也就是说，<strong>OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。</strong>下面就是这四种授权方式。</p><blockquote><ul><li>授权码（authorization-code）</li><li>隐藏式（implicit）</li><li>密码式（password）：</li><li>客户端凭证（client credentials）</li></ul></blockquote><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h2 id="第一种授权方式：授权码"><a href="#第一种授权方式：授权码" class="headerlink" title="第一种授权方式：授权码"></a>第一种授权方式：授权码</h2><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//b.com/oauth/authorize?</span><br>  response_type=code&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read<br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>response_type</code>参数表示要求返回授权码（<code>code</code>），<code>client_id</code>参数让 B 知道是谁在请求，<code>redirect_uri</code>参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code>参数表示要求的授权范围（这里是只读）。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040902.jpg"></p><p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//a.com/callback?code=AUTHORIZATION_CODE</span><br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>code</code>参数就是授权码。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040907.jpg"></p><p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//b.com/oauth/token?</span><br> client_id=CLIENT_ID&amp;<br> client_secret=CLIENT_SECRET&amp;<br> grant_type=authorization_code&amp;<br> code=AUTHORIZATION_CODE&amp;<br> redirect_uri=CALLBACK_URL<br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求），<code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code>参数是上一步拿到的授权码，<code>redirect_uri</code>参数是令牌颁发后的回调网址。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040904.jpg"></p><p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;    <br>  <span class="hljs-string">&quot;access_token&quot;</span>:<span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>,<br>  <span class="hljs-string">&quot;token_type&quot;</span>:<span class="hljs-string">&quot;bearer&quot;</span>,<br>  <span class="hljs-string">&quot;expires_in&quot;</span>:<span class="hljs-number">2592000</span>,<br>  <span class="hljs-string">&quot;refresh_token&quot;</span>:<span class="hljs-string">&quot;REFRESH_TOKEN&quot;</span>,<br>  <span class="hljs-string">&quot;scope&quot;</span>:<span class="hljs-string">&quot;read&quot;</span>,<br>  <span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-number">100101</span>,<br>  <span class="hljs-string">&quot;info&quot;</span>:&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040905.jpg"></p><h2 id="第二种方式：隐藏式"><a href="#第二种方式：隐藏式" class="headerlink" title="第二种方式：隐藏式"></a>第二种方式：隐藏式</h2><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）。</strong></p><p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//b.com/oauth/authorize?</span><br>  response_type=token&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read<br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌。</p><p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//a.com/callback#token=ACCESS_TOKEN</span><br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌。</p><p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在”中间人攻击”的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019040906.jpg"></p><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><h2 id="第三种方式：密码式"><a href="#第三种方式：密码式" class="headerlink" title="第三种方式：密码式"></a>第三种方式：密码式</h2><p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</strong></p><p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//oauth.b.com/token?</span><br>  grant_type=password&amp;<br>  username=USERNAME&amp;<br>  password=PASSWORD&amp;<br>  client_id=CLIENT_ID<br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示”密码式”，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p><p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p><p>这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p><h2 id="第四种方式：凭证式"><a href="#第四种方式：凭证式" class="headerlink" title="第四种方式：凭证式"></a>第四种方式：凭证式</h2><p><strong>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</strong></p><p>第一步，A 应用在命令行向 B 发出请求。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//oauth.b.com/token?</span><br>  grant_type=client_credentials&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET<br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份。</p><p>第二步，B 网站验证通过以后，直接返回令牌。</p><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p><h2 id="令牌的使用"><a href="#令牌的使用" class="headerlink" title="令牌的使用"></a>令牌的使用</h2><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -H <span class="hljs-string">&quot;Authorization: Bearer ACCESS_TOKEN&quot;</span> \<br><span class="hljs-string">&quot;https://api.b.com&quot;</span><br></code></pre></td></tr></table></figure></blockquote><p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p><h2 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h2><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">https:<span class="hljs-comment">//b.com/oauth/token?</span><br>  grant_type=refresh_token&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET&amp;<br>  refresh_token=REFRESH_TOKEN<br></code></pre></td></tr></table></figure></blockquote><p>上面 URL 中，<code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，<code>client_id</code>参数和<code>client_secret</code>参数用于确认身份，<code>refresh_token</code>参数就是用于更新令牌的令牌。</p><p>B 网站验证通过以后，就会颁发新的令牌。</p><p>写到这里，颁发令牌的四种方式就介绍完了。</p><h1 id="GitHub-OAuth-第三方登录示例教程"><a href="#GitHub-OAuth-第三方登录示例教程" class="headerlink" title="GitHub OAuth 第三方登录示例教程"></a>GitHub OAuth 第三方登录示例教程</h1><p>下面演示一个实例，演示如何通过 OAuth 2.0 向 GitHub 的 API 申请令牌，然后再用令牌获取数据。</p><p>很多网站登录时，允许使用第三方网站的身份，这称为”第三方登录”。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019042101.jpg" alt="img"></p><p>下面就以 GitHub 为例，写一个最简单的应用，演示第三方登录。</p><h2 id="一、第三方登录的原理"><a href="#一、第三方登录的原理" class="headerlink" title="一、第三方登录的原理"></a>一、第三方登录的原理</h2><p>所谓第三方登录，实质就是 OAuth 授权。用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。</p><p>举例来说，A 网站允许 GitHub 登录，背后就是下面的流程。</p><blockquote><ol><li>A 网站让用户跳转到 GitHub。</li><li>GitHub 要求用户登录，然后询问”A 网站要求获得 xx 权限，你是否同意？”</li><li>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</li><li>A 网站使用授权码，向 GitHub 请求令牌。</li><li>GitHub 返回令牌.</li><li>A 网站使用令牌，向 GitHub 请求用户数据。</li></ol></blockquote><p>下面就是这个流程的代码实现。</p><h2 id="二、应用登记"><a href="#二、应用登记" class="headerlink" title="二、应用登记"></a>二、应用登记</h2><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求。</p><p>所以，你要先去 GitHub 登记一下。当然，我已经登记过了，你使用我的登记信息也可以，但为了完整走一遍流程，还是建议大家自己登记。这是免费的。</p><p>访问这个<a href="https://github.com/settings/applications/new">网址</a>，填写登记表。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019042102.jpg" alt="img"></p><p>应用的名称随便填，主页 URL 填写<code>http://localhost:8080</code>，跳转网址填写 <code>http://localhost:8080/oauth/redirect</code>。</p><p>提交表单以后，GitHub 应该会返回客户端 ID（client ID）和客户端密钥（client secret），这就是应用的身份识别码。</p><h2 id="三、示例仓库"><a href="#三、示例仓库" class="headerlink" title="三、示例仓库"></a>三、示例仓库</h2><p>我写了一个<a href="https://github.com/ruanyf/node-oauth-demo">代码仓库</a>，请将它克隆到本地。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:ruanyf/node-oauth-demo.git<br>$ <span class="hljs-built_in">cd</span> node-oauth-demo<br></code></pre></td></tr></table></figure></blockquote><p>两个配置项要改一下，写入上一步的身份识别码。</p><blockquote><ul><li><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L3"><code>index.js</code></a>：改掉变量<code>clientID</code> and <code>clientSecret</code></li><li><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/public/index.html#L16"><code>public/index.html</code></a>：改掉变量<code>client_id</code></li></ul></blockquote><p>然后，安装依赖。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install<br></code></pre></td></tr></table></figure></blockquote><p>启动服务。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ node index.js<br></code></pre></td></tr></table></figure></blockquote><p>浏览器访问<code>http://localhost:8080</code>，就可以看到这个示例了。</p><h2 id="四、浏览器跳转-GitHub"><a href="#四、浏览器跳转-GitHub" class="headerlink" title="四、浏览器跳转 GitHub"></a>四、浏览器跳转 GitHub</h2><p>示例的首页很简单，就是一个链接，让用户跳转到 GitHub。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019042103.jpg" alt="img"></p><p>跳转的 URL 如下。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markup">https://github.com/login/oauth/authorize?<br>  client_id=7e015d8ce32370079895&amp;<br>  redirect_uri=http://localhost:8080/oauth/redirect<br></code></pre></td></tr></table></figure></blockquote><p>这个 URL 指向 GitHub 的 OAuth 授权网址，带有两个参数：<code>client_id</code>告诉 GitHub 谁在请求，<code>redirect_uri</code>是稍后跳转回来的网址。</p><p>用户点击到了 GitHub，GitHub 会要求用户登录，确保是本人在操作。</p><h2 id="五、授权码"><a href="#五、授权码" class="headerlink" title="五、授权码"></a>五、授权码</h2><p>登录后，GitHub 询问用户，该应用正在请求数据，你是否同意授权。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/bg2019042104.png" alt="img"></p><p>用户同意授权， GitHub 就会跳转到<code>redirect_uri</code>指定的跳转网址，并且带上授权码，跳转回来的 URL 就是下面的样子。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markup">http://localhost:8080/oauth/redirect?<br>  code=859310e7cecc9196f4af<br></code></pre></td></tr></table></figure></blockquote><p>后端收到这个请求以后，就拿到了授权码（<code>code</code>参数）。</p><h2 id="六、后端实现"><a href="#六、后端实现" class="headerlink" title="六、后端实现"></a>六、后端实现</h2><p>示例的<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js">后端</a>采用 Koa 框架编写，具体语法请看<a href="https://www.ruanyifeng.com/blog/2017/08/koa.html">教程</a>。</p><p>这里的关键是针对<code>/oauth/redirect</code>的请求，编写一个<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L16">路由</a>，完成 OAuth 认证。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> oauth = <span class="hljs-keyword">async</span> ctx =&gt; &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br><br>app.use(route.get(<span class="hljs-string">&#x27;/oauth/redirect&#x27;</span>, oauth));<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>oauth</code>函数就是路由的处理函数。下面的代码都写在这个函数里面。</p><p>路由函数的第一件事，是从 URL 取出授权码。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> requestToken = ctx.request.query.code;<br></code></pre></td></tr></table></figure></blockquote><h2 id="七、令牌"><a href="#七、令牌" class="headerlink" title="七、令牌"></a>七、令牌</h2><p>后端使用这个授权码，向 GitHub 请求令牌。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> tokenResponse = <span class="hljs-keyword">await</span> axios(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://github.com/login/oauth/access_token?&#x27;</span> +<br>    <span class="hljs-string">`client_id=<span class="hljs-subst">$&#123;clientID&#125;</span>&amp;`</span> +<br>    <span class="hljs-string">`client_secret=<span class="hljs-subst">$&#123;clientSecret&#125;</span>&amp;`</span> +<br>    <span class="hljs-string">`code=<span class="hljs-subst">$&#123;requestToken&#125;</span>`</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-attr">accept</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，GitHub 的令牌接口<code>https://github.com/login/oauth/access_token</code>需要提供三个参数。</p><blockquote><ul><li><code>client_id</code>：客户端的 ID</li><li><code>client_secret</code>：客户端的密钥</li><li><code>code</code>：授权码</li></ul></blockquote><p>作为回应，GitHub 会返回一段 JSON 数据，里面包含了令牌<code>accessToken</code>。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> accessToken = tokenResponse.data.access_token;<br></code></pre></td></tr></table></figure></blockquote><h2 id="八、API-数据"><a href="#八、API-数据" class="headerlink" title="八、API 数据"></a>八、API 数据</h2><p>有了令牌以后，就可以向 API 请求数据了。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> axios(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">`https://api.github.com/user`</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-attr">accept</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`token <span class="hljs-subst">$&#123;accessToken&#125;</span>`</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，GitHub API 的地址是<code>https://api.github.com/user</code>，请求的时候必须在 HTTP 头信息里面带上令牌<code>Authorization: token 361507da</code>。</p><p>然后，就可以拿到用户数据，得到用户的身份。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = result.data.name;<br>ctx.response.redirect(<span class="hljs-string">`/welcome.html?name=<span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OAuth</tag>
      
      <tag>认证</tag>
      
      <tag>鉴权</tag>
      
      <tag>分布式认证系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Servlet聊聊JAVA</title>
    <link href="/2021/09/29/servlet-java/"/>
    <url>/2021/09/29/servlet-java/</url>
    
    <content type="html"><![CDATA[<h3 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h3><p>“一流企业做标准、二流企业做品牌、三流企业做产品！”                </p><hr><p>近日，许多小伙伴对于JAVA的基础知识不太了解，比较迷茫，这里分享一下。</p><p>在学习JAVA之初，老师曾赠与我2条slogan，受益良多。</p><ol><li>JAVA程序员终其一生只做两件事，一是在写Servlet，二是与互联网通讯打交道。</li><li>学习JAVA就是学习13规范，Servlet是其中之一。</li></ol><p>那么什么是Servlet呢？</p><hr><p>先让我们从J2EE说起。</p><blockquote><p>1991年，James Gosling博士的孵化了JAVA语言的前身：Oak。Oak最初的定位是开发一种能够在各种消费性电子产品（机顶盒、冰箱、收音机等设备）上运行的程序架构。</p><p>1995年，随着互联网潮流的兴起，Oak迅速找到了最适合自己发展的市场定位并迅速蜕变成为JAVA语言。</p><p>1998年，JDK迎来了一个里程碑式的重要版本：工程代号为Playground的JDK1.2，在这个版本中，JAVA的技术体系拆分为3个方向。</p><ul><li>面向桌面应用开发的J2SE</li><li>面向手机等移动设备的J2ME</li><li>面向企业级应用开发的J2EE</li></ul><p>J2EE的全称是Java 2 Platform Enterprise Edition，它是由SUN公司领导、各厂家共同制定并得到广泛认可的工业标准，或者说，它是在SUN公司领导下，多家公司参与共同制定的企业级<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/9854429">分布式应用程序</a>开发规范。J2EE是市场上主流的企业级分布式应用平台的解决方案 。</p><p>J2EE平台由一整套服务（services）、<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3/10418844">应用程序接口</a>（APIs）和协议构成，它对开发基于Web的多层应用提供了功能支持，下面对J2EE中的主要技术规范进行简单的描述。</p></blockquote><p>在了解J2EE 13规范之前，我们思考一下。</p><p>什么是规范？J2EE为何要制定13个规范？</p><hr><p>这里举一个很简单的例子，你购买了一个U盘，回到家里，可以插到你电脑的USB接口上面使用。</p><p>在这个例子里面，有3个角色：</p><ul><li>USB协议制定机构</li><li>U盘生产商</li><li>电脑生产商</li></ul><p>USB就是一种协议，也是一种规范。USB协议的制定机构并不生产U盘或者电脑。而U盘与电脑的生产商只需遵循该协议，分别生产拥有USB插头和接口的设备，这些设备就可以基于USB协议进行通信。</p><p>回到JAVA中，拿我们经常用的JDBC（Java Database Connectivity）协议来映射便是：</p><ul><li>JDBC规范制定机构：Sun公司，现在已被Oracle收购。</li><li>程序的开发商：如果自己实现JDBC功能，别左右看了，就是你。如果引用封装了JDBC代码的第三方框架，那么就是如Mybatis等厂商。</li><li>数据库开发商：Mysql、Oracle等开发数据库的公司。</li></ul><blockquote><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的，提供了诸如查询和更新数据库中数据的方法。</p></blockquote><p>可以看出，程序员基于JDBC开发程序，数据库厂商基于JDBC开发数据库。程序跑起来之后就能实现访问数据库的功能。而无需关心程序是谁写的，也不用关心数据库厂家是谁。</p><p>JDBC是JAVA程序与数据库服务器之间通讯的规范，同样地，如果我们需要与Web服务器如Tomcat进行交互呢？如果我们需要与邮件服务器进行交互呢？</p><p>这些问题Sun公司早就想到了，因此我们有了13个各式各样J2EE规范，足以解决我们日常开发的大部分问题。</p><p>Servlet：JAVA程序与Web服务器通讯的规范</p><p>JavaMail：与邮件服务器间通讯的规范</p><p>….</p><p>现在再让我们来仔细看下这13个规范</p><h3 id="1-JDBC-JavaDatabase-Connectivity"><a href="#1-JDBC-JavaDatabase-Connectivity" class="headerlink" title="1 , JDBC ( JavaDatabase Connectivity )"></a>1 , JDBC ( JavaDatabase Connectivity )</h3><p>JDBC 是以统一方式访问数据库的 API .<br>它提供了独立于平台的数据库访问,也就是说,当我有了 JDBC API 的时候,就不必再为访问 Oracle 数据库专门写一个程序,为访问 Sybase 数据库又专门写一个程序等等,只需要用 JDBC API 写一个程序就够了,它可以向相应数据库发送 SQL 调用. JDBC 是 Java 应用程序与各种不同数据库之间进行对话的方法的机制.简单地说,它做了三件事:与数据库建立连接–发送操作数据库的语句–处理结果.</p><h3 id="2-JNDI-JavaName-and-Directory-Interface"><a href="#2-JNDI-JavaName-and-Directory-Interface" class="headerlink" title="2 , JNDI ( JavaName and Directory Interface )"></a>2 , JNDI ( JavaName and Directory Interface )</h3><p>JNDI 是一组在 Java 应用中访问命名和目录服务的 API .<br>JNDI 为开发人员提供了查找和访问各种命名和目录服务的通用,统一的接口,利用 JNDI 的命名与服务功能可满足企业级 API 对命名与服务的访问,诸如 EJB , JMS , JDBC 2.0 以及 IIOP 上的 RMI 通过 JNDI 来使用 CORBA 的命名服务.<br>在这儿,想多说一点: JNDI 和 JDBC 类似,都是构建在抽象层上.因为它提供了标准的独立于命名系统的 API ,这些 API 构建在命名系统之上.这一层有助于将应用与实际数据源分离,因此不管是访问的 LDAP , RMI 还是 DNS .也就是说, JNDI 独立于目录服务的具体实现,只要有目录的服务提供接口或驱动,就可以使用目录.</p><h3 id="3-EJB-Enterprise-JavaBean"><a href="#3-EJB-Enterprise-JavaBean" class="headerlink" title="3 , EJB ( Enterprise JavaBean )"></a>3 , EJB ( Enterprise JavaBean )</h3><p>J2EE 将业务逻辑从客户端软件中抽取出来,封装在一个组件中.这个组件运行在一个独立的服务器上,客户端软件通过网络调用组件提供的服务以实现业务逻辑,而客户端软件的功能只是负责发送调用请求和显示处理结果.<br>在 J2EE 中,这个运行在一个独立的服务器上,并封装了业务逻辑的组件就是 EJB 组件.其实就是把原来放到客户端实现的代码放到服务器端,并依靠 RMI 进行通信.</p><h3 id="4-RMI-Remote-MethodInvoke"><a href="#4-RMI-Remote-MethodInvoke" class="headerlink" title="4 , RMI ( Remote MethodInvoke )"></a>4 , RMI ( Remote MethodInvoke )</h3><p>是一组用户开发分布式应用程序的 API .<br>这一协议调用远程对象上的方法使用了序列化的方式在客户端和服务器之间传递数据,使得原先的程序在同一操作系统的方法调用,变成了不同操作系统之间程序的方法调用,即 RMI 机制实现了程序组件在不同操作系统之间的通信.它是一种被 EJB 使用的更底层的协议.<br>RMI/JNI : RMI 可利用标准 Java 本机方法接口与现有的和原有的系统相连接<br>RMI/JDBC : RMI 利用标准 JDBC 包与现有的关系数据库连接<br>就实现了与非 Java 语言的现有服务器进行通信.</p><h3 id="5-JavaIDL-CORBA-Common-Object-Request-BrokerArchitecture"><a href="#5-JavaIDL-CORBA-Common-Object-Request-BrokerArchitecture" class="headerlink" title="5 , JavaIDL/CORBA ( Common Object Request BrokerArchitecture )"></a>5 , JavaIDL/CORBA ( Common Object Request BrokerArchitecture )</h3><p>Java 接口定义语言/公用对象请求代理程序体系结构<br>在 JavaIDL 的支持下,开发人员可以将 Java 和 CORBA 集成在一起.他们可以创建 Java 对象并使之可以在 CORBA ORB 中展开,或者他们还可以创建 Java 类并作为和其它 ORB 一起展开的 CORBA 对象的客户.后一种方法提供了另外一种途径,通过 Java 可以被用于将新的应用和旧的系统相集成.<br>CORBA 是面向对象标准的第一步,有了这个标准,软件的实现与工作环境对用户和开发者不再重要,可以把精力更多地放在本地系统的实现与优化上.</p><h3 id="6-JSP-Java-Server-Pages"><a href="#6-JSP-Java-Server-Pages" class="headerlink" title="6 , JSP ( Java Server Pages )"></a>6 , JSP ( Java Server Pages )</h3><p>JSP 页面 = HTML + Java ,其根本是一个简化的 Servlet 设计.<br>服务器在页面被客户端请求后,对这些 Java 代码进行处理,然后将执行结果连同原 HTML 代码生成的新 HTML 页面返回给客户端浏览器.</p><h3 id="7-Java-Servlet"><a href="#7-Java-Servlet" class="headerlink" title="7 , Java Servlet"></a>7 , Java Servlet</h3><p>Servlet 是一种小型的 Java 程序,扩展了 Web 服务器的功能,作为一种服务器的应用,当被请求时开始执行. Servlet 提供的功能大多和 JSP 类似,不过, JSP 通常是大多数的 HTML 代码中嵌入少量的 Java 代码,而 Servlet 全部由 Java 写成并生成 HTML .</p><h3 id="8-XML"><a href="#8-XML" class="headerlink" title="8 , XML"></a>8 , XML</h3><p>XML 是一个用来定义其它标记语言的语言,可用作数据共享. XML 的发展和 Java 是相互独立的.不过,它和 Java 具有的相同目标就是跨平台.通过将 Java 与 XML 结合,我们可以得到一个完全与平台无关的解决方案.</p><h3 id="9-JMS-JavaMessage-Service"><a href="#9-JMS-JavaMessage-Service" class="headerlink" title="9 , JMS ( JavaMessage Service )"></a>9 , JMS ( JavaMessage Service )</h3><p>它是一种与厂商无关的 API ,用来访问消息收发系统消息.它类似于 JDBC . JDBC 是可以用来访问不同关系数据库的 API ,而 JMS 则提供同样与厂商无关的访问消息收发服务的方法,这样就可以通过消息收发服务实现从一个 JMS 客户机向另一个 JMS 客户机发送消息,所需要的是厂商支持 JMS .<br>换句话说, JMS 是 Java 平台上有关面向消息中间件的技术规范.</p><h3 id="10-JTA-JavaTransaction-API"><a href="#10-JTA-JavaTransaction-API" class="headerlink" title="10 , JTA ( JavaTransaction API )"></a>10 , JTA ( JavaTransaction API )</h3><p>定义了一种标准 API ,应用程序由此可以访问各种事务监控.它允许应用程序执行分布式事务处理–在两个或多个网络计算机资源上访问并且更新数据. JTA 和 JTS 为 J2EE 平台提供了分布式事务服务.<br>JTA 事务比 JDBC 事务更强大,一个 JTA 事务可以有多个参与者,而一个 JDBC 事务则被限定在一个单一的数据库连接.</p><h3 id="11-JTS-JavaTransaction-Service"><a href="#11-JTS-JavaTransaction-Service" class="headerlink" title="11 , JTS ( JavaTransaction Service )"></a>11 , JTS ( JavaTransaction Service )</h3><p>JTS 是 CORBA OTS 事务监控器的一个基本实现. JTS 指定了一个事务管理器的实现（ Transaction Manager ）,这个管理器在一个高级别上支持 JTA 规范,并且在一个低级别上实现了 OMGOTS 规范的 Java 映射.一个 JTS 事务管理器为应用服务器,资源管理器, standalone 应用和通信资源管理器提供事务服务.</p><h3 id="12-JavaMail"><a href="#12-JavaMail" class="headerlink" title="12 , JavaMail"></a>12 , JavaMail</h3><p>用于访问邮件服务器的 API ,提供了一套邮件服务器的抽象类.</p><h3 id="13-JAF-JavaBeansActivation-Framework"><a href="#13-JAF-JavaBeansActivation-Framework" class="headerlink" title="13 , JAF ( JavaBeansActivation Framework )"></a>13 , JAF ( JavaBeansActivation Framework )</h3><p>JAF 是一个专用的数据处理框架,它用于封装数据,并为应用程序提供访问和操作数据的接口.也就是说, JAF 让 Java 程序知道怎么对一个数据源进行查看,编辑,打印等.<br>JavaMail 利用 JAF 来处理 MIME 编码的邮件附件.</p><hr><p>​    熟悉了这些规范，JAVA程序员便可以更加专注程序的业务实现，而不用把精力放在如明天新出了一款性能好的数据库，要如何适配这种问题上。</p><p>​    因此，每一个J2EE程序员有必要一开始就熟悉这13个规范，至少了解有这么一个东西，防止重复造轮子。</p><p>​    最后，让我们回到开头的导言，JAVA是因为这些标准才流行起来的吗？JAVA的生命力与此有关吗？JAVA到底何时才会被取代呢（JAVA程序员何时会失业呢）:D？这个可能见仁见智，欢迎大家留言发表自己的看法。</p><blockquote><p>《深入理解JAVA虚拟机》 周志明 著</p><p>[<a href="https://www.cnblogs.com/zll-0405/p/12534127.html">J2EE 之 13 个规范总结</a>] <a href="https://www.cnblogs.com/zll-0405/p/12534127.html">https://www.cnblogs.com/zll-0405/p/12534127.html</a></p><p>j2ee词条 百度百科 <a href="https://baike.baidu.com/item/j2ee/110838?fr=aladdin">https://baike.baidu.com/item/j2ee/110838?fr=aladdin</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Servlet</tag>
      
      <tag>J2EE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux NTP时钟同步</title>
    <link href="/2021/09/28/ntp/"/>
    <url>/2021/09/28/ntp/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是NTP-why-we-need-it"><a href="#1-什么是NTP-why-we-need-it" class="headerlink" title="1. 什么是NTP,why we need it?"></a>1. 什么是NTP,why we need it?</h2><p>​        如今我们的软件系统通常部署在计算设备集群中，而非单一的物理设备上。统一、同步的标准时间用于记录各种事件发生时序，如日志的打印时间戳、微服务调用链监控、文件创建和访问时间、E-MAIL时间戳、数据库处理时间等。系统内不同计算设备之间控制、计算、处理、应用等数据或操作都具有时序性，若计算机时间不同步，这些应用或操作或将无法正常进行。</p><p>​        大数据系统是对时间敏感的计算处理系统，时间同步是大数据能够得到正确处理的基础保障，是大数据得以发挥作用的技术支撑。大数据时代，整个处理计算系统内的大数据通信都是通过网络进行。时间同步也是如此，利用大数据的互联网络传送标准时间信息，实现大数据系统内时间同步。</p><p>​        网络时间同步协议(NTP)是时间同步的技术基础。</p><p>​        首先看下官网<a href="http://www.ntp.org/%E5%AF%B9%E5%AE%83%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%82">http://www.ntp.org/对它的定义。</a></p><blockquote><p><strong>NTP is a protocol designed to synchronize the clocks of computers over a network.</strong></p><p><strong>NTP 是一种通过网络同步计算机时钟的协议。</strong></p></blockquote><p>​        网站的描述十分简洁。在实际的应用中，NTP分为服务端和客户端，客户端向服务端发起请求索要时间，来校准自己的时间。而一个节点，既可以作为服务端，也可以作为客户端。</p><p>​        然后我们来看下<a href="http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf">《鸟哥的Linux》</a>中对于NTP的介绍。</p><blockquote><p>​         Linux 操作系统的计时方式主要是由1970/01/01 开始计算总秒数，因此，如果你还记得date 这个指令的话， 会发现它有个+%s 的参数，可以取得总秒数，这个就是软件时钟。但，如同前面说的，电脑硬件主要是以BIOS芯片内部的时间为主要的时间依据(硬件时钟)，而偏偏这个时间可能因为BIOS 内部晶片本身的问题，而导致BIOS 时间与标准时间(UTC) 有一点点的差异存在！所以为了避免主机长时间运行下所导致的时间误差，进行时间同步 (synchronize) 的工作就显的很重要了！</p><ul><li>软件时钟：由Linux 系统根据1970/01/01 开始计算的总秒数。</li><li>硬件时钟：主机硬件芯片里面的时钟，例如BIOS 记录的时间。</li></ul><p>那么怎么让时间同步化呢？想一想，如果我们选择几部主要主机(Primary server) 调校时间，让这些 Primary Servers 的时间同步之后，再开放网络服务来让Client 端连线，并且提供给Client 端调整自己的时间，不就可以达到全部的电脑时间同步化的目的了吗！那么什么协议可以达到这样的功能呢？那就是NTP，到底NTP 这个daemon 是如何让Server 与Client 同步他们的时间呢？</p><ol><li>首先，主机当然需要启动这个daemon ，之后，</li><li>Client 会向NTP Server 发送出调校时间的message ，</li><li>然后NTP Server 会送出目前的标准时间给Client ，</li><li>Client 接收了来自Server 的时间后，会据以调整自己的时间，就达成了网络时间校准了！</li></ol><p>在上面的步骤中你有没有想到一件事啊，那就是如果Client到Server的消息传送时间过长了怎么办？ 举例来说，我在台湾以ADSL 的PC 主机，连线到美国的NTP Server 主机进行时间同步化要求，而美国NTP Server 收到我的要求之后，就发送当时的正确时间给我，不过， 由美国将资料传送回我的PC 时，时间可能已经延迟了10 秒钟去了！这样一来，我的PC 校正的时间是10 秒钟前的标准时间喔！此外，如果美国那么NTP 主机有太多的人喜欢上去进行网路校时了，所以 loading (负荷) 太重啦！导致讯息的回传又延迟的更为严重！那怎么办？</p><p>为了这些延迟的问题，有一些program 已经开发了自动计算时间传送过程的误差，以更准确的校准自己的时间！当然啦，在 daemon 的部分，也同时以server/client 及master/slave 的架构来提供使用者进行网路校时的动作！所谓的 master/slave 就有点类似DNS 的系统咯！举例来说，台湾的标准时间主机去国际标准时间的主机校时， 然后各大专院校再到台湾的标准时间校时，然后我们再到各大专院校的标准时间校时！这样一来，那几部国际标准时间主机 (Time server) 的loading 就不至于太大，而我们也可以很快速的达到正确的网路校时的目的呢！</p></blockquote><p>​        NTP服务器阶层的概念</p><blockquote><p>​    如前所述，由于NTP 时间服务器采用类似阶层架构(stratum) 来处理时间的同步化， 所以他使用的是类似一般server/client 的主从架构。网络社会上面有提供一些主要与次要的时间服务器， 这些均属于第一阶及第二阶的时间服务器(stratum-1, stratum-2) ，如下所示：</p><ul><li>主要时间服务器： <a href="http://support.ntp.org/bin/view/Servers/StratumOneTimeServers">http://support.ntp.org/bin/view/Servers/StratumOneTimeServers</a></li><li>次要时间服务器： <a href="http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers">http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers</a></li></ul><p>由于这些时间服务器大多在国外，所以我们是否要使用这些服务器来同步化自己的时间呢？其实如果台湾地区已经有标准时间服务器的话，用那部即可，不需要连线到国外啦！浪费带宽与时间啊！而如前面提到的，台湾地区已经有标准的时间服务器了，所以当然我们可以直接选择台湾地区的NTP 主机即可。</p><p>如果你评估一下，确定有架设NTP 的需求时，我们可以直接选择台湾地区的上层NTP 来同步化时间即可。举例来说tock.stdtime.gov.tw 这个国家单位的主机应该是比较适合的。一般来说，我们在进行NTP 主机的设定时，都会先选择多部上层的Time Server 来做为我们这一部NTP Server 的校正之用，选择多部的原因是因为 然后我们的NTP Server 才提供给自己的Client 端更新时间 如此一来，国家单位的tock.stdtime.gov.tw 负载才不会太大，而我们的Client 也可以很快速的达到校时的动作！</p><p><strong>Tips: 举例来说，如果我们的NTP 是向台湾的tock.stdtime.gov.tw 这部stratum-2 的主机要求时间同步化，那我们的主机即为stratum-3 ，如果还有其他的NTP 主机向我们要求时间同步， 那么该部主机则会是stratum-4 啦！就这样啊～ 那最多可以有几个阶层？最多可达15 个阶层喔！</strong>   </p></blockquote><p>​        ntp核心配置与命令文件</p><blockquote><ul><li><strong>/etc/ntp.conf</strong>： NTP 服务器的主要配置文件，也是唯一的一个。</li></ul><p>命令主要有如下几个：</p><ul><li><p><strong>/bin/date</strong>： 用于 Linux 时间 (软件时钟) 的修改与显示的指令。</p></li><li><p><strong>/sbin/hwclock</strong>： 用于 BIOS 时钟 (硬件时钟) 的修改与显示的指令。 这是一个 root 才能执行的指令，因为 Linux 系統上面 BIOS 时间与 Linux 系統时间是分开的，所以使用 date 这个指令调整了时间之后，还需要使用 hwclock 才能將修改过后的时间写入 BIOS 当中！</p></li><li><p><strong>/usr/sbin/ntpd</strong>： 主要提供 NTP 服务的命令！配置文件为 /etc/ntp.conf</p></li><li><p><strong>/usr/sbin/ntpdate</strong>： 用于client端的时间校正，如果你沒有要启用 NTP服务 而仅想要使用 NTP Client 功能的话，那么只用这个指令就可以了！</p></li></ul></blockquote><h2 id="2-设置时区"><a href="#2-设置时区" class="headerlink" title="2 . 设置时区"></a>2 . 设置时区</h2><p>   计算机中的OS时区应与计算设备所处地理时区一致，否则将出现时差。</p><p>   CentOS和Ubuntu的时区文件是/etc/localtime，但是在CentOS7以后localtime以及变成了一个链接文件,如果采用直接cp的方法修改系统时区，那么就会把它所链接的文件修改掉，例如把美国的时区文件内容修改成了上海的时区内容，有可能会导致有些编程语言或程序在读取系统时区的时候发生错误，因此正确的修改方法是：</p><h3 id="CentOS6、Ubuntu16"><a href="#CentOS6、Ubuntu16" class="headerlink" title="CentOS6、Ubuntu16"></a><strong>CentOS6、Ubuntu16</strong></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure><h3 id="CentOS7、RHEL7、Scientific-Linux-7、Oracle-Linux-7"><a href="#CentOS7、RHEL7、Scientific-Linux-7、Oracle-Linux-7" class="headerlink" title="CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7"></a><strong>CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7</strong></h3><p>最好的方法是使用timedatectl命令</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@test</span><span class="hljs-number">-127</span> ~]<span class="hljs-meta"># timedatectl list-timezones |grep Shanghai    #查找中国时区的完整名称</span><br>Asia/Shanghai<br>[root<span class="hljs-symbol">@test</span><span class="hljs-number">-127</span> ~]<span class="hljs-meta"># timedatectl set-timezone Asia/Shanghai    #其他时区以此类推</span><br></code></pre></td></tr></table></figure><p>或者直接手动创建软链接</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@test-<span class="hljs-number">127</span> ~]# ln -sf <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure><h2 id="3-NTP服务器的安装与设定"><a href="#3-NTP服务器的安装与设定" class="headerlink" title="3. NTP服务器的安装与设定"></a>3. NTP服务器的安装与设定</h2><p>​    <strong>在这里，我们采用二级同步机制，master 作为主节点，负责与外部系统同步时间，并把自己的时间同步给集群内其他client节点，所有client节点均向master 同步时间</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/test1.png"></p><p><strong>以下操作假设我们有4台Linux虚拟机需要做时间同步，192.168.100.100为外部的时钟源。</strong></p><blockquote><p>192.168.60.101 master1 </p><p>192.168.60.102 client1 </p><p>192.168.60.103 client2</p><p>192.168.60.104 client3</p><p>192.168.1000.100 外部时钟源</p></blockquote><h3 id="2-1-安装NTP"><a href="#2-1-安装NTP" class="headerlink" title="2.1  安装NTP"></a>2.1  安装NTP</h3><h4 id="2-1-1-卸载旧ntp服务"><a href="#2-1-1-卸载旧ntp服务" class="headerlink" title="2.1.1 卸载旧ntp服务"></a>2.1.1 卸载旧ntp服务</h4><p>确认是否已安装ntp、ntpupdate</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# rpm –qa | grep ntp<br></code></pre></td></tr></table></figure><p>若只有ntpdate而未见ntp，则需删除原有ntpdate。如：</p><p>ntpdate-4.2.6p5-22.el7_0.x86_64</p><p>fontpackages-filesystem-1.44-8.el7.noarch</p><p>python-ntplib-0.3.2-1.el7.noarch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# yum –y remove ntpdate-4.2.6p5-22.el7.x86_64<br></code></pre></td></tr></table></figure><h4 id="2-1-2-安装ntp"><a href="#2-1-2-安装ntp" class="headerlink" title="2.1.2    安装ntp"></a>2.1.2    安装ntp</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# yum –y install ntp<br></code></pre></td></tr></table></figure><h3 id="2-2-配置ntp-conf文件"><a href="#2-2-配置ntp-conf文件" class="headerlink" title="2.2    配置ntp.conf文件"></a>2.2    配置ntp.conf文件</h3><h4 id="2-2-1-ntp-conf文件解析"><a href="#2-2-1-ntp-conf文件解析" class="headerlink" title="2.2.1 ntp.conf文件解析"></a>2.2.1 ntp.conf文件解析</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> For more information about this file, see the man pages</span><br><span class="hljs-meta">#</span><span class="bash"> ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class="hljs-meta">#</span><span class="bash"> 时间偏移量 格式：driftfile [可以被ntpd 写入的目录与档案] 详细概念在附录进行介绍，下同</span><br>driftfile /var/lib/ntp/drift<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Permit time synchronization with our time <span class="hljs-built_in">source</span>, but <span class="hljs-keyword">do</span> not</span><br><span class="hljs-meta">#</span><span class="bash"> permit the <span class="hljs-built_in">source</span> to query or modify the service on this system.</span><br>restrict default nomodify notrap nopeer noquery<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Permit all access over the loopback interface.  This could</span><br><span class="hljs-meta">#</span><span class="bash"> be tightened as well, but to <span class="hljs-keyword">do</span> so would effect some of</span><br><span class="hljs-meta">#</span><span class="bash"> the administrative <span class="hljs-built_in">functions</span>.</span><br>restrict 192.168.60.101 nomodify notrap nopeer noquery<br>restrict 127.0.0.1<br>restrict ::1<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Hosts on <span class="hljs-built_in">local</span> network are less restricted.</span><br><span class="hljs-meta">#</span><span class="bash"> 权限管理 格式：restrict [IP] mask [netmask_IP] [parameter]</span> <br><span class="hljs-meta">#</span><span class="bash"> 这里192.168.60.0为集群所在网段的网关（Gateway），意思代表的192.168.60.0~255网段的机器都允许与本机的ntp时间同步。255.255.255.0为子网掩码（Genmask）。</span><br>reastrict 192.168.60.0 mask 255.255.255.0 nomodify notrap<br><span class="hljs-meta">#</span><span class="bash"> Use public servers from the pool.ntp.org project.</span><br><span class="hljs-meta">#</span><span class="bash"> Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设定上层NTP服务器，请先将其余的server如 [0|1|2].centos.pool.ntp.org 注释掉</span><br><span class="hljs-meta">#</span><span class="bash"> 格式：server [IP or hostname] [prefer] prefer表示优先使用，iburst表示请求频率加强：</span><br>server 220.130.158.71 prefer  &lt;==以这部主机为最优先的server<br>server 59.124.196.83<br>server 59.124.196.84<br><span class="hljs-meta">#</span><span class="bash"> 最大阶层数，局域网项目一般设置为10</span><br>fudge 192.168.60.128 stratum 10<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">broadcast 192.168.1.255 autokey        <span class="hljs-comment"># broadcast server</span></span><br><span class="hljs-meta">#</span><span class="bash">broadcastclient                        <span class="hljs-comment"># broadcast client</span></span><br><span class="hljs-meta">#</span><span class="bash">broadcast 224.0.1.1 autokey            <span class="hljs-comment"># multicast server</span></span><br><span class="hljs-meta">#</span><span class="bash">multicastclient 224.0.1.1              <span class="hljs-comment"># multicast client</span></span><br><span class="hljs-meta">#</span><span class="bash">manycastserver 239.255.254.254         <span class="hljs-comment"># manycast server</span></span><br><span class="hljs-meta">#</span><span class="bash">manycastclient 239.255.254.254 autokey <span class="hljs-comment"># manycast client</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Enable public key cryptography.</span><br><span class="hljs-meta">#</span><span class="bash">crypto</span><br><br>includefile /etc/ntp/crypto/pw<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Key file containing the keys and key identifiers used when operating</span><br><span class="hljs-meta">#</span><span class="bash"> with symmetric key cryptography.</span><br>keys /etc/ntp/keys<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Specify the key identifiers <span class="hljs-built_in">which</span> are trusted.</span><br><span class="hljs-meta">#</span><span class="bash">trustedkey 4 8 42</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Specify the key identifier to use with the ntpdc utility.</span><br><span class="hljs-meta">#</span><span class="bash">requestkey 8</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Specify the key identifier to use with the ntpq utility.</span><br><span class="hljs-meta">#</span><span class="bash">controlkey 8</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Enable writing of statistics records.</span><br><span class="hljs-meta">#</span><span class="bash">statistics clockstats cryptostats loopstats peerstats</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Disable the monitoring facility to prevent amplification attacks using ntpdc</span><br><span class="hljs-meta">#</span><span class="bash"> monlist <span class="hljs-built_in">command</span> when default restrict does not include the noquery flag. See</span><br><span class="hljs-meta">#</span><span class="bash"> CVE-2013-5211 <span class="hljs-keyword">for</span> more details.</span><br><span class="hljs-meta">#</span><span class="bash"> Note: Monitoring will not be disabled with the limited restriction flag.</span><br>disable monitor<br></code></pre></td></tr></table></figure><h4 id="2-2-2-修改所有节点的-etc-ntp-conf"><a href="#2-2-2-修改所有节点的-etc-ntp-conf" class="headerlink" title="2.2.2    修改所有节点的/etc/ntp.conf"></a>2.2.2    修改所有节点的/etc/ntp.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">restrict 192.168.60.101 nomodify notrap nopeer noquery          //当前节点IP地址<br>...<br>restrict 192.168.60.0 mask 255.255.255.0 nomodify notrap  //集群所在网段的网关（Gateway），子网掩码（Genmask）<br></code></pre></td></tr></table></figure><h4 id="2-2-3-选择一个主节点，修改其-etc-ntp-conf"><a href="#2-2-3-选择一个主节点，修改其-etc-ntp-conf" class="headerlink" title="2.2.3    选择一个主节点，修改其/etc/ntp.conf"></a>2.2.3    选择一个主节点，修改其/etc/ntp.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 外部时钟源</span><br>server 192.168.100.100 iburst prefer<br><span class="hljs-meta">#</span><span class="bash">兜底时间服务器，当外部时钟源不可用时，就是以本机时间作为集群机器的统一时间。</span><br>server 127.0.0.1 iburst<br>fudge 127.0.0.1 stratum 10<br></code></pre></td></tr></table></figure><h4 id="2-2-4-选择从节点，修改-etc-ntp-conf"><a href="#2-2-4-选择从节点，修改-etc-ntp-conf" class="headerlink" title="2.2.4    选择从节点，修改/etc/ntp.conf"></a>2.2.4    选择从节点，修改/etc/ntp.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在server部分添加如下语句，注释其余server，将server指向主节点。</span><br>server 192.168.60.101<br>fudge 192.168.60.101 stratum 10<br><span class="hljs-meta">#</span><span class="bash"> 192.168.60.102 同上</span><br></code></pre></td></tr></table></figure><h3 id="2-3-同步硬件时钟"><a href="#2-3-同步硬件时钟" class="headerlink" title="2.3 同步硬件时钟"></a>2.3 同步硬件时钟</h3><p>ntp服务，默认只会同步系统时间，如果系统软硬件时间不一致，那么系统重启过后时间又会恢复成硬件时间。</p><p>如果想要让ntp同时同步硬件时间，可以设置/etc/sysconfig/ntpd文件，</p><p>在/etc/sysconfig/ntpd文件中，添加<code>SYNC_HWCLOCK=yes</code>，就可以让硬件时间与系统时间一起同步。</p><p>允许BIOS与系统时间同步，也可以通过hwclock -w 命令。</p><h3 id="2-4-启动ntp服务、查看状态"><a href="#2-4-启动ntp服务、查看状态" class="headerlink" title="2.4  启动ntp服务、查看状态"></a>2.4  启动ntp服务、查看状态</h3><h4 id="2-3-1-启动ntp服务"><a href="#2-3-1-启动ntp服务" class="headerlink" title="2.3.1    启动ntp服务"></a>2.3.1    启动ntp服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# service ntpd start<br></code></pre></td></tr></table></figure><h4 id="2-3-2-添加开机自启动"><a href="#2-3-2-添加开机自启动" class="headerlink" title="2.3.2    添加开机自启动"></a>2.3.2    添加开机自启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# chkconfig ntpd on<br></code></pre></td></tr></table></figure><h4 id="2-3-3-查看ntp服务器与上层ntp的状态"><a href="#2-3-3-查看ntp服务器与上层ntp的状态" class="headerlink" title="2.3.3    查看ntp服务器与上层ntp的状态"></a>2.3.3    查看ntp服务器与上层ntp的状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# ntpstat<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/915691-20171013002936340-1631273268.png"></p><p>查看ntp状态时，可能会出现如下所示情况</p><p>① unsynchronised time server re-starting polling server every 8 s</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/915691-20171013131031496-1095710777.png"></p><p>② unsynchronised polling server every 8 s</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/915691-20171013131052840-421840461.png"></p><p>这种情况属于正常，ntp服务器配置完毕后，需要等待5-10分钟才能与/etc/ntp.conf中配置的标准时间进行同步。</p><p>等一段时间之后，再次使用ntpstat命令查看状态，就会变成如下正常结果：</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/915691-20171013131330184-1857767541.png"></p><p>查<strong>看ntp服务器有无和上层ntp连通</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# ntpq -p<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/915691-20171013010729637-1391262052.png"></p><p>remote：本机和上层ntp的ip或主机名</p><ul><li>​    “*”表示已同步    </li><li>​    “+”表示优先同步</li></ul><p>refid：参考上一层ntp主机地址</p><p>st：stratum阶层</p><p>when：多少秒前曾经同步过时间</p><p>poll：下次更新在多少秒后</p><p>reach：已经向上层ntp服务器要求更新的次数</p><p>delay：网络延迟</p><p>offset：时间补偿</p><p>jitter：系统时间与bios时间差  </p><h2 id="4-附录"><a href="#4-附录" class="headerlink" title="4. 附录"></a>4. 附录</h2><h3 id="etc-ntp-conf-其他配置内容详解"><a href="#etc-ntp-conf-其他配置内容详解" class="headerlink" title="===/etc/ntp.conf  其他配置内容详解==="></a><strong>===/etc/ntp.conf  其他配置内容详解===</strong></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 1. 先处理权限方面的问题，包括放行上层服务器以及开放局域网用户来源：</span><br><span class="hljs-attribute">restrict</span> default kod nomodify notrap nopeer noquery     &lt;==拒绝 IPv<span class="hljs-number">4</span> 的用户<br><span class="hljs-attribute">restrict</span> -<span class="hljs-number">6</span> default kod nomodify notrap nopeer noquery  &lt;==拒绝 IPv<span class="hljs-number">6</span> 的用户<br><span class="hljs-attribute">restrict</span> <span class="hljs-number">220.130.158.71</span>   &lt;==放行 tock.stdtime.gov.tw 进入本 NTP 的服务器<br><span class="hljs-attribute">restrict</span> <span class="hljs-number">59.124.196.83</span>    &lt;==放行 tick.stdtime.gov.tw 进入本 NTP 的服务器<br><span class="hljs-attribute">restrict</span> <span class="hljs-number">59.124.196.84</span>    &lt;==放行 time.stdtime.gov.tw 进入本 NTP 的服务器<br><span class="hljs-attribute">restrict</span> <span class="hljs-number">127.0.0.1</span>        &lt;==底下两个是默认值，放行本机来源<br><span class="hljs-attribute">restrict</span> -<span class="hljs-number">6</span> ::<span class="hljs-number">1</span><br><span class="hljs-attribute">restrict</span> <span class="hljs-number">192.168.100.0</span> mask <span class="hljs-number">255.255.255.0</span> nomodify &lt;==放行局域网用户来源，或者列出单独IP<br><br><span class="hljs-comment"># 2.预设时间差异分析档案与暂不用到的 keys 等，不需要更动它：</span><br><span class="hljs-attribute">driftfile</span> /var/lib/ntp/drift<br><span class="hljs-attribute">keys</span>      /etc/ntp/keys<br></code></pre></td></tr></table></figure><h3 id="restrict选项格式"><a href="#restrict选项格式" class="headerlink" title="===restrict选项格式==="></a>===restrict选项格式===</h3><p><strong>restrict [ 客户端IP ]  mask  [ IP掩码 ]  [参数</strong>]</p><p>“客户端IP” 和 “IP掩码” 指定了对网络中哪些范围的计算机进行控制，如果使用default关键字，则表示对所有的计算机进行控制，参数指定了具体的限制内容，常见的参数如下：</p><p>◆ ignore：拒绝连接到NTP服务器</p><p>◆ nomodiy： 客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。</p><p>◆ noquery： 不提供客户端的时间查询</p><p>◆ notrap： 不提供trap远程登录功能，trap服务是一种远程时间日志服务。</p><p>◆ notrust： 客户端除非通过认证，否则该客户端来源将被视为不信任子网 。</p><p>◆ nopeer： 提供时间服务，但不作为对等体。</p><p>◆ kod： 向不安全的访问者发送Kiss-Of-Death报文。</p><h3 id="server选项格式"><a href="#server选项格式" class="headerlink" title="===server选项格式==="></a>===server选项格式===</h3><p><strong>server host  [ key n ] [ version n ] [ prefer ] [ mode n ] [ minpoll n ] [ maxpoll n ] [ iburst ]</strong></p><p>其中host是上层NTP服务器的IP地址或域名，随后所跟的参数解释如下所示：</p><p>◆ key： 表示所有发往服务器的报文包含有秘钥加密的认证信息，n是32位的整数，表示秘钥号。</p><p>◆ version： 表示发往上层服务器的报文使用的版本号，n默认是3，可以是1或者2。</p><p>◆ prefer： 如果有多个server选项，具有该参数的服务器有限使用。</p><p>◆ mode： 指定数据报文mode字段的值。</p><p>◆ minpoll： 指定与查询该服务器的最小时间间隔为2的n次方秒，n默认为6，范围为4-14。</p><p>◆ maxpoll： 指定与查询该服务器的最大时间间隔为2的n次方秒，n默认为10，范围为4-14。</p><p>◆ iburst： 当初始同步请求时，采用突发方式接连发送8个报文，时间间隔为2秒。</p><h3 id="查看网关方法"><a href="#查看网关方法" class="headerlink" title="===查看网关方法==="></a>===查看网关方法===</h3><p>【命令1】route -n </p><p>【命令2】ip route show </p><p>【命令3】netstat -r</p><h3 id="层次（stratum）"><a href="#层次（stratum）" class="headerlink" title="===层次（stratum）==="></a>===层次（stratum）===</h3><p>stratum根据上层server的层次而设定（+1）。</p><p>对于提供network time service provider的主机来说，stratum的设定要尽可能准确。</p><p>而作为局域网的time service provider，通常将stratum设置为10</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/915691-20171013005125324-1966406641.png"></p><p>0层的服务器采用的是原子钟、GPS钟等物理设备，stratum 1与stratum 0 是直接相连的，</p><p>往后的stratum与上一层stratum通过网络相连，同一层的server也可以交互。</p><p>ntpd对下层client来说是service server，对于上层server来说它是client。</p><p>ntpd根据配置文件的参数决定是要为其他服务器提供时钟服务或者是从其他服务器同步时钟。所有的配置都在/etc/ntp.conf文件中。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/20160917151428497.PNG"></p><h3 id="注意防火墙屏蔽ntp端口"><a href="#注意防火墙屏蔽ntp端口" class="headerlink" title="===注意防火墙屏蔽ntp端口==="></a>===注意防火墙屏蔽ntp端口===</h3><p>ntp服务器默认端口是123，如果防火墙是开启状态，在一些操作可能会出现错误，所以要记住关闭防火墙。</p><h3 id="ntpd、ntpdate的区别"><a href="#ntpd、ntpdate的区别" class="headerlink" title="===ntpd、ntpdate的区别==="></a>===ntpd、ntpdate的区别===</h3><p>使用之前得弄清楚一个问题，ntpd与ntpdate在更新时间时有什么区别。</p><p>ntpd不仅仅是时间同步服务器，它还可以做客户端与标准时间服务器进行同步时间，而且是平滑同步，</p><p>并非ntpdate立即同步，在生产环境中慎用ntpdate，也正如此两者不可同时运行。</p><p>时钟的跃变，对于某些程序会导致很严重的问题。</p><p>许多应用程序依赖连续的时钟——毕竟，这是一项常见的假定，即，取得的时间是线性的，</p><p>一些操作，例如数据库事务，通常会地依赖这样的事实：时间不会往回跳跃。</p><p>不幸的是，ntpdate调整时间的方式就是我们所说的”跃变“：在获得一个时间之后，ntpdate使用settimeofday(2)设置系统时间，</p><p>这有几个非常明显的问题：</p><p>【一】这样做不安全。</p><p>ntpdate的设置依赖于ntp服务器的安全性，攻击者可以利用一些软件设计上的缺陷，拿下ntp服务器并令与其同步的服务器执行某些消耗性的任务。</p><p>由于ntpdate采用的方式是跳变，跟随它的服务器无法知道是否发生了异常（时间不一样的时候，唯一的办法是以服务器为准）。</p><p>【二】这样做不精确。</p><p>一旦ntp服务器宕机，跟随它的服务器也就会无法同步时间。</p><p>与此不同，ntpd不仅能够校准计算机的时间，而且能够校准计算机的时钟。</p><p>【三】这样做不够优雅。</p><p>由于是跳变，而不是使时间变快或变慢，依赖时序的程序会出错</p><p>（例如，如果ntpdate发现你的时间快了，则可能会经历两个相同的时刻，对某些应用而言，这是致命的）。</p><p>因而，唯一一个可以令时间发生跳变的点，是计算机刚刚启动，但还没有启动很多服务的那个时候。</p><p>其余的时候，理想的做法是使用ntpd来校准时钟，而不是调整计算机时钟上的时间。</p><p>NTPD在和时间服务器的同步过程中，会把BIOS计时器的振荡频率偏差——或者说Local Clock的自然漂移(drift)——记录下来。</p><p>这样即使网络有问题，本机仍然能维持一个相当精确的走时。</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="==其他问题=="></a>==其他问题==</h3><p>配置了ntp服务之后，发现时间仍然无法同步</p><p>通过命令timedatectl查看，之后，发现ntp服务没有生效（NTP enabled: no），如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/915691-20200929232515753-1829091402.png"></p><p>执行命令timedatectl set-ntp yes之后，问题得以解决。</p><blockquote><p>参考资料</p><p><a href="https://www.cnblogs.com/quchunhui/p/7658853.html">https://www.cnblogs.com/quchunhui/p/7658853.html</a></p><p>鸟哥的Linux私房菜 <a href="http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf">http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf</a></p><p><a href="https://www.cnblogs.com/yjt1993/p/11177554.html">https://www.cnblogs.com/yjt1993/p/11177554.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NTP</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM调优（一）</title>
    <link href="/2021/09/24/JVM%E8%B0%83%E4%BC%98-%E4%B8%80/"/>
    <url>/2021/09/24/JVM%E8%B0%83%E4%BC%98-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>​      近日，随着项目的演进，微服务越来越多，在前后分离、后端双节点的部署架构下，每个微服务都运行在一个tomcat当中，单节点的负载能力竟已达到瓶颈。在计算能力如此强大的今天，没有节制地使用虚拟机资源果然还是不行，呵呵。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923135927456.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><blockquote><p>虚拟机规格为4U16G x86   linux操作系统</p><p>内网项目，微服务大概10个左右，包括注册中心、网关等，并发量不大。</p><p>web容器为tomcat</p><p>jdk1.8</p></blockquote><p><strong>首先说说什么是RES和VIRT？</strong></p><blockquote><p>RES：resident memory usage 常驻内存</p><p>（1）进程当前使用的内存大小，但不包括swap out</p><p>（2）包含其他进程的共享</p><p>（3）如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反</p><p>（4）关于库占用内存的情况，它只统计加载的库文件所占内存大小</p><p>RES = CODE + DATA</p><p>VIRT：virtual memory usage</p><p>（1）进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等</p><p>（2）假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量</p><p>VIRT = SWAP + RES</p></blockquote><p>安装部署项目之后使用free -h和top命令查看CPU和内存的使用情况</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923140858686.png"></p><p>1、可以看出，虚拟机16G的内存只剩下可怜197M内存，真是在翻车边缘疯狂试探，这与测试反映的系统偶尔瘫痪的表象也是吻合的。</p><p>2、单个微服务的RES常驻内存在1.2G~1.6G之间，而在ARM服务器上甚至达到了3G左右，10个微服务基本把16G的内存用差不多了。以当前项目的负载需求来看，并没有大并发的场景，也不存在大数据量的接口，这个负载是偏高的，比如一个10个左右服务的注册中心Eureka，不包含任何业务代码也占用了如上的内存，是不合理的。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们以注册中心Eureka来入手，它没有业务代码，减少变量利于我们快速地定位问题。</p><p>这里我们先排除内存溢出或内存泄露的问题，当然也不是绝对排除。为什么这么说呢，如果某个微服务有代码存在内存溢出或泄露隐患，不会导致所有微服务内存占用都高，而且类似注册中心这种微服务几乎是零业务代码的。其次，这类问题会在程序运行一段时间过后突然down掉，从项目运行的情况来看，暂时没有发现这种情况。因此，内存溢出或泄露的问题可以放在后面再进一步定位。</p><p>通过本人的给服务器把脉问诊，初步分析原因是服务器君过于娇纵后宫，导致后宫争宠，时间被各妃子日程占满，从而导致身体吃不消了。</p><p>简单来说就是没有为各Tomcat设置JVM内存参数，各个微服务无节制地使用服务器内存导致的。</p><p>我们通过几个简单的参数<code>Xms</code>、<code>Xmx</code>、<code>Xss</code>来验证一下。</p><blockquote><p>-Xms 是指程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂变慢，程序在内存不够时会进行扩展，而扩展也是会影响效率的，可能会导致程序突然卡顿一下，因此许多的项目中这个值一步到位设置和最大值Xmx一样。</p><p>-Xmx 是指程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常。</p><p>-Xss 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程大约需要占用多少内存，可能会有多少线程同时运行等。默认JDK1.4中是256K，JDK1.5+中是1M。</p></blockquote><p>由于项目当初是使用的是一个未知的定制版的Tomcat，已经改的面目全非，没有文档支持，花费了很大功夫才找到加JAVA启动参数的地方。不具备参考意义，我们以开源版的Tomcat为例。</p><p>这次 ，我们使用java自带的jvm监控工具jvisualvm来监控jvm的启动参数、内存占用等信息，使用前我们需要给JVM加上启动参数来打开调试接口。</p><p>我们在Tomcat的bin目录下的catalina.sh启动文件中添加如下内容（windows下请修改catalina.bat）。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923161704099.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_OPTS=&quot;-Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;<br></code></pre></td></tr></table></figure><blockquote><p>-Djava.rmi.server.hostname：服务器IP，修改为自己的虚拟机的IP即可</p><p>-Dcom.sun.management.jmxremote.port ：开放端口，这里自定义即可，笔者用的是8899，只要端口没有冲突即可。</p><p>-Dcom.sun.management.jmxremote.ssl=false、-Dcom.sun.management.jmxremote.authenticate=false：是否启用SSL安全协议、安全认证，主要是为了安全，这里一般设置为false即可，生产环境中我们一般也不会打开调试端口。</p></blockquote><p>打开jvisualvm工具</p><p>1、添加远程服务器，Remote右键 Add Remote Host…，填入上面配置的服务器IP</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923163132389.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923163347853.png"></p><p>2、添加JXM连接</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923163549140.png"></p><p>按照下图配置</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923163638670.png"></p><p>双击建立好的连接可以实时查看当前程序的运行状况和堆栈信息等</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923164143750.png"></p><p>可以看到，我们jvm虚拟机的参数列表并没有内存限制相关参数。</p><p>我们为它加上参数再连接试试，将刚才的刚才的JAVA_OPTS参数修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_OPTS=&quot;-Xms512m -Xmx512m -Xss256m -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923165424944.png"></p><p>可以看到我们jvm已经有内存参数了，这时我们再看下这个eureka注册中心进程的内存占用。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210923165520445.png"></p><p>已经稳定在518M左右了，为什么是这个数呢，而不是我们设置的512M呢？因为我们的JVM进程除了heap内存，还有一些堆外内存。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们定位到了tomcat内存高的原因，也找到了解决的方法，但是这个问题我们目前只解决了一半。</p><p>我们仍然需要回答Xms或其他内存参数到底该设置多少才合理，这个数字不能拍脑袋，需要结合具体的业务需求，还需要与我们的测试小哥哥一起压测才能得出结论。</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Tomcat</tag>
      
      <tag>调优</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>但愿人长久，千里共婵娟</title>
    <link href="/2021/09/21/%E9%9A%8F%E7%AC%9401/"/>
    <url>/2021/09/21/%E9%9A%8F%E7%AC%9401/</url>
    
    <content type="html"><![CDATA[<p>折腾了大半天，在macos上经历各种nodej、npm、nvm的坑，总算是把个人hexo搭建起来了：P</p><p>Whatever，万事开头难，好的开始是成功的一半。</p><p>下面工作</p><ol><li>配置Fluid主题（帅永远是第一位的）</li><li>整理、搬迁博文</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码环境搭建</title>
    <link href="/2021/06/28/spring-source/"/>
    <url>/2021/06/28/spring-source/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><blockquote><p><strong>Spring版本：5.0.21.BUILD-SNAPSHOT</strong></p><p><strong>IDEA版本：2019.3 U</strong></p><p><strong>Gradle版本：4.4.1</strong></p><p><strong>AspectJ版本：1.9.0</strong></p></blockquote><h2 id="1-Fork自己的Spring源码仓，便于注释与调试"><a href="#1-Fork自己的Spring源码仓，便于注释与调试" class="headerlink" title="1. Fork自己的Spring源码仓，便于注释与调试"></a>1. Fork自己的Spring源码仓，便于注释与调试</h2><h2 id="2-安装Gradle"><a href="#2-安装Gradle" class="headerlink" title="2. 安装Gradle"></a>2. 安装Gradle</h2><h3 id="2-1-从Gradle官网下载gradle安装包-网址https-gradle-org-releases"><a href="#2-1-从Gradle官网下载gradle安装包-网址https-gradle-org-releases" class="headerlink" title="2.1 从Gradle官网下载gradle安装包 网址https://gradle.org/releases/"></a>2.1 从Gradle官网下载gradle安装包 网址<a href="https://gradle.org/releases/">https://gradle.org/releases/</a></h3><p><img src="70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png"></p><h3 id="2-2-解压"><a href="#2-2-解压" class="headerlink" title="2.2 解压"></a>2.2 解压</h3><p><img src="5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png"></p><h3 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3 配置环境变量"></a>2.3 配置环境变量</h3><h4 id="2-3-1-Windows环境"><a href="#2-3-1-Windows环境" class="headerlink" title="2.3.1 Windows环境"></a>2.3.1 Windows环境</h4><p><img src="b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png"></p><p><img src="43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png"></p><h4 id="2-3-2-MacOs环境"><a href="#2-3-2-MacOs环境" class="headerlink" title="2.3.2 MacOs环境"></a>2.3.2 MacOs环境</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">~ % vim .bash_profile<br><span class="hljs-comment"># 如果使用zsh则是</span><br>~ % vim .zprofile<br><span class="hljs-comment"># 改成自己的Gradle路径</span><br><span class="hljs-built_in">export</span> GRADLE_HOME=/Users/administer/WorkSpace/tools/gradle-4.4.1<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GRADLE_HOME</span>/bin<br> <br>//修改后, 按[Esc], 命令<span class="hljs-string">&quot;:wq&quot;</span>保存退出, 并在终端使用如下命令使配置生效:<br><span class="hljs-built_in">source</span> ~/.bash_profile<br><br></code></pre></td></tr></table></figure><h3 id="2-4-打开目录行工具，输入gradle-v，能看到gradle的版本信息表示安装已经成功"><a href="#2-4-打开目录行工具，输入gradle-v，能看到gradle的版本信息表示安装已经成功" class="headerlink" title="2.4 打开目录行工具，输入gradle -v，能看到gradle的版本信息表示安装已经成功"></a>2.4 打开目录行工具，输入<code>gradle -v</code>，能看到gradle的版本信息表示安装已经成功</h3><p><img src="31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png"></p><h2 id="3-导入Spring源码"><a href="#3-导入Spring源码" class="headerlink" title="3. 导入Spring源码"></a>3. 导入Spring源码</h2><h3 id="3-1-从github拉取代码到本地"><a href="#3-1-从github拉取代码到本地" class="headerlink" title="3.1 从github拉取代码到本地"></a>3.1 从github拉取代码到本地</h3><h3 id="3-2-导入项目"><a href="#3-2-导入项目" class="headerlink" title="3.2 导入项目"></a>3.2 导入项目</h3><p><img src="58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png"></p><h4 id="3-2-1-解决导包问题"><a href="#3-2-1-解决导包问题" class="headerlink" title="3.2.1 解决导包问题"></a>3.2.1 解决导包问题</h4><p><strong>spring为了避免与cglib和objenesis冲突，将cglib和objenesis相关的包重新repack到<code>org.springframework.cglib</code>和<code>org.springframework.objenesis</code>包中，这部分的代码没有包含到源码当中。构建之前，需要先build这两个包。可以通过添加Gradle任务来解决：</strong></p><p>在右侧的Gradle面板Spring -&gt; Tasks -&gt; other -&gt; cglibRepackJar</p><p><img src="9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png"></p><p><img src="ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png"></p><p>激活任务</p><p><img src="737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png"></p><p>默认仓库网速下载较慢，添加阿里镜像仓库。</p><p><img src="e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">repositories &#123;<br><span class="hljs-comment">//新增以下2个阿里云镜像</span><br>maven &#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;<br>maven &#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span> &#125;<br>mavenCentral()<br>maven &#123; url <span class="hljs-string">&quot;https://repo.spring.io/libs-spring-framework-build&quot;</span> &#125;<br><span class="hljs-comment">//新增spring插件库</span><br>maven &#123; url <span class="hljs-string">&quot;https://repo.spring.io/plugins-release&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新构建项目（构建时间较长）</p><p><img src="038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png"></p><h2 id="4-创建测试模块"><a href="#4-创建测试模块" class="headerlink" title="4. 创建测试模块"></a>4. 创建测试模块</h2><ul><li><p>为了方便编写测试spring的代码，在spring-framework单独新建一个模块my-test</p><p>右键spring-framework项目-&gt;New-&gt;Module…</p><p><img src="c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png"></p></li><li><p>输入ArtifactId: my-test</p><p><img src="8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png"></p></li><li><p>添加依赖：<code>api(project(&quot;:spring-context&quot;))</code></p><p><img src="9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png"></p></li><li><p>为了能让my-test自动导入相关的依赖，在Gradle面板中右键spring节点 </p></li></ul><p><img src="938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png"></p><ul><li><p>在my-test模块中编写程序测试</p><ul><li><p>创建<code>MyApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.geekjk;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApplication</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ApplicationContext ac = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:applicationContext.xml&quot;</span>);<br>Hello hello = (Hello)ac.getBean(<span class="hljs-string">&quot;hello&quot;</span>);<br>hello.sayHello();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在resources目录下新建<code>applicationContext.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>&lt;bean id=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.geekjk.Hello&quot;</span>&gt;&lt;/bean&gt;<br><br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure></li><li><p>新建<code>Hello</code>类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.geekjk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello, Spring!&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行<code>MyApplication</code>，可以看到控制台输出：<code>Hello, Spring</code>!</li></ul></li><li><p>至此整个环境算是搭建好了,可以开始简单愉快的源码阅读之旅了。</p></li></ul><blockquote><p>书籍《Spring源码深度解析（第2版）》 作者郝佳</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>application.yml配置文件优先级</title>
    <link href="/2021/06/20/application-yml/"/>
    <url>/2021/06/20/application-yml/</url>
    
    <content type="html"><![CDATA[<p>在我们的微服务资源文件夹下，用于解耦配置信息的有多个<code>application.yml</code>文件，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">application.yml<br>application-common.yml<br>application-broker.yml<br>application-dev.yml<br>application-sit.yml<br>application-uat.yml<br>application-prod.yml<br></code></pre></td></tr></table></figure><p>那么他们之间有什么区别？各文件的生效优先级又是怎么样的呢？</p><p>首先我们来了解一下各环境的定义</p><blockquote><p>dev：本地开发环境，主要供开发人员使用</p><p>sit：测试环境，主要供测试人员使用</p><p>uat：用户测试环境，一般使用部分生产数据，模拟生产环境，测试人员为真实用户</p><p>prod：生产环境，商用环境，用户正在使用的环境。</p></blockquote><p>环境分层以后，我们软件的交付流程、研发人员的职责也更加清晰。</p><p>如果有多个环境，那么可以通过让程序读取不同的配置文件来做到环境、资源隔离，如开发环境数小二连接的是开发本地的数据库、调用的开发环境ABM，不会影响测试环境及测试人员的工作。</p><p>从设计模式上来看，也可以用其他自定义后缀如<code>application-common.yml</code>文件来抽象公共的配置，如</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#feign 与ribbon 超时等设置</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">OkToRetryOnAllOperations:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">2000</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">8000</span><br>  <span class="hljs-attr">MaxAutoRetriesNextServer:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">MaxAutoRetries:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启饥饿加载</span><br>    <span class="hljs-attr">clients:</span> <span class="hljs-string">asset,as,sm,core</span><br><span class="hljs-comment">#其他需要生效的application-XXX.yml文件</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">common,broker</span><br></code></pre></td></tr></table></figure><p>那么怎么怎么使这些文件协调地工作，key相同时value不冲突并且达到我们想要的效果呢。</p><p>我们需要指定生效的规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#其他需要生效的application-XXX.yml文件</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">common,broker</span><br></code></pre></td></tr></table></figure><p>我们使用一个简单的SpringBoot Demo来验证一下</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210803145617104.png"></p><p>3个配置文件</p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">env:</span> <span class="hljs-string">origin</span><br></code></pre></td></tr></table></figure><p><code>application-sit.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">env:</span> <span class="hljs-string">sit</span><br><span class="hljs-attr">attr1:</span> <span class="hljs-string">sit</span><br></code></pre></td></tr></table></figure><p><code>application-prod.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">env:</span> <span class="hljs-string">prod</span><br><span class="hljs-attr">attr1:</span> <span class="hljs-string">prod</span><br><span class="hljs-attr">attr2:</span> <span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//controller类</span><br>...<br><span class="hljs-meta">@RestController</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">controller</span> </span>&#123;<br><span class="hljs-comment">//这种方式可以读取到配置文件中key为env的value</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;env&#125;&quot;)</span><br>    String env;<br><span class="hljs-comment">//&quot;:&quot;后跟的是缺省值</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;attr1:none1&#125;&quot;)</span><br>    String attr1;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;attr2:none2&#125;&quot;)</span><br>    String attr2;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;env:&quot;</span>+env);<br>        System.out.println(<span class="hljs-string">&quot;attr1:&quot;</span>+attr1);<br>        System.out.println(<span class="hljs-string">&quot;attr2:&quot;</span>+attr2);<br>        <span class="hljs-keyword">return</span> env;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行后控制台打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">env:origin<br>attr1:none1<br>attr2:none2<br></code></pre></td></tr></table></figure><p>可以看出，<code>application-sit.yml</code>与<code>application-prod.yml</code>中定义的值并没有生效。</p><p>因为我们设置spring读取其他后缀的文件，因此只有<code>application,yml</code>文件生效了。</p><p>我们在<code>application,yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>   <span class="hljs-attr">active:</span> <span class="hljs-string">sit</span><br></code></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">env:sit<br>attr1:sit<br>attr2:none2<br></code></pre></td></tr></table></figure><p><code>application.yml</code>的env值被sit中覆盖了,attr1也由缺省值变为了sit。</p><p>修改为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>   <span class="hljs-attr">active:</span> <span class="hljs-string">sit,prod</span><br></code></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">env:prod<br>attr1:prod<br>attr2:prod<br></code></pre></td></tr></table></figure><p>prod文件覆盖了其他所有的文件的值</p><p>调整下active value的顺序</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>   <span class="hljs-attr">active:</span> <span class="hljs-string">prod,sit</span><br></code></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">env:sit<br>attr1:sit<br>attr2:prod<br></code></pre></td></tr></table></figure><p>可以看出，active中写的顺序越靠后，覆盖的优先级越高。</p><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a><strong>结论</strong>：</h4><p>在值没有冲突的情况下，需要在spring.profiles.active中指定文件后缀来使对应配置生效。</p><p>在值有冲突的情况下，active中书写顺序越靠后的优先级越高。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>配置</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(六)容器化实战--前端Nginx改造</title>
    <link href="/2021/06/04/containerization6-frontend/"/>
    <url>/2021/06/04/containerization6-frontend/</url>
    
    <content type="html"><![CDATA[<h3 id="本章，我们来进行前端服务的容器化改造"><a href="#本章，我们来进行前端服务的容器化改造" class="headerlink" title="本章，我们来进行前端服务的容器化改造"></a>本章，我们来进行前端服务的容器化改造</h3><p>首先来看一下我们原来的组网拓扑：</p><hr><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104171031523.png"></p><hr><p>可以发现，我们的Nginx目前承担的职责主要有：</p><ul><li><p>动静分离，响应静态资源请求，动态资源请求反向代理至CORE进一步路由。（何为动静分离请浏览文末）</p></li><li><p>https拦截层</p></li><li><p>后端网关服务的负载均衡器</p></li><li><p>网关熔断器</p></li></ul><p>我们这里镜像采用centos+Nginx基础层、frontend应用层的分层设计，目的是一方面是可以解耦、一方面也可以大大提升镜像的构建速度、应用的发布速度。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/32fcbc3ed3d559bdf392e2a2152ce451_392x245.png@900-0-90-f.png"></p><p><strong>由于原Nginx在部署时配置了大量的配置，在改造过程中，我们需要把我们原来的运行时环境变量，完整、准确地通过shell脚本写入到我们的镜像当中。这个过程需要十分耐心，任何一个步骤的遗漏或者出错，都会导致镜像运行失败。</strong></p><p>但即便如此，我们还是遇到了不少问题</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li><p>在之前的基础镜像中没有创建安全用户<code>maint</code>与引入安全秘钥文件，而我们Nginx启用了Https，启动需要对应的安全证书，无法找到安装证书导致Nginx启动失败</p></li><li><p>Nginx启动脚本中有sudo命令，执行sudo命令默认需要输入密码，会导致启动脚本执行失败。</p></li><li><p>安全送检反馈要求我们的Nginx宿主机只暴露必要Nginx端口，例如80与443，未用到端口不开放，防止绕过Nginx直接访问后端以及其他的。</p><p>目前采用iptables配置来解决此问题，需要适配镜像OS层环境。</p></li><li><p>原Nginx服务启动的方式为执行<code>operat_nginx.sh</code>，这个线程是后台运行的，下一步我们将开发前端镜像的Kubernates资源文件，而POD需要线程以前台运行的方式才能对容器的健康状态进行监控。</p></li><li><p>Nginx的负载均衡设置中，原先的后端IP是写死的，现在我们的后端容器的IP是不固定的，如何路由。</p></li></ol><p>那么让我们来逐个攻破把，已经走到这里了，没有什么可以难倒我们的，不是吗。</p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>构建镜像当中，nginx的配置文件nginx.conf采用了先拷贝模板文件，再使用sed命令对变量进行修改的方式。</p><p>仔细观察后发现，在https的相关配置当中，有一个名为security的目录，在这个目录下，存放着安全相关的正式与key,而在data01目录下，我们并没有这个文件夹与证书文件，所以会导致nginx启动失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ....<br><span class="hljs-meta"> #</span><span class="bash"> https server  443</span><br>    server &#123;<br>        access_log  /var/log/nginx/log/host.access.log  main;<br>        listen 127.0.0.0:443 ssl backlog=10000;<br>        server_name localhost;<br><br>        # https server<br>        ssl_certificate_key_password    &quot;0000000100000001CF63A8E8E06D0FE814A7F33FD704F8478B5495FFDE40F4CD408842732CADCC9164D65A77CE2B967A4EE3D01404A8951D&quot; /data01/security/root.key /data01/security/common_shared.key;<br>        ssl_certificate           /etc/nginx/conf/nginx.crt;<br>        ssl_certificate_key       /etc/nginx/conf/nginx.key;<br>        ssl_protocols TLSv1.2 TLSv1.3;<br>        ssl_session_cache shared:SSL:10m;<br>...<br></code></pre></td></tr></table></figure><p>我们需要准备这些文件。</p><hr><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/5447b32117321407a7b64d18ce62a028_402x388.png@900-0-90-f.png"></p><p>经过查找，我们发现原部署脚本目录当有现有一个名为<code>install_projectName_maint.sh</code>的脚本，它创建了maint这个用户，并且将原码仓当中的一个security的目录拷贝到了虚拟机上，这个步骤应该就是我们想要的了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#####################部署脚本用到的配置#########################################</span></span><br>SCRIPT_NAME=&quot;install_shuxiaoer_maint.sh&quot;<br>CUR_DIR=$(pwd)<br>FILE_LOG=&quot;$&#123;CUR_DIR&#125;/install_`date +%Y-%m-%d`.log&quot; # 日志文件<br>CONF_PATH=$&#123;CUR_DIR&#125;/../config<br><br>cdir=$(cd `dirname $0`; pwd)<br>. $&#123;cdir&#125;/comm_lib<br><br>install_shuxiaoer_maint()<br>&#123;<br>    LOG &quot;INFO&quot; &quot;begin install maint service ...&quot;<br><br>    maint_path=$&#123;CUR_DIR&#125;/../security<br>    if [[ ! -d $&#123;maint_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ the $&#123;maint_path&#125; is not exit,pls check~]&quot;<br>        return 1<br>    fi<br><br>    sudo cp -r $&#123;maint_path&#125;/*  $&#123;MAINT_USER_HOME&#125;<br>    if [[ $? -ne 0 ]];then<br>        LOG &quot;ERROR&quot; &quot;[ copy $&#123;maint_path&#125; to $&#123;MAINT_USER_HOME&#125; ] failed&quot;<br>        return 1<br>    fi<br><br>    sudo chmod -R 750 $&#123;MAINT_USER_HOME&#125;<br>    sudo chown -R $&#123;MAINT_USER&#125;:$&#123;MAINT_USER_GROUP_NAME&#125; $&#123;MAINT_USER_HOME&#125;<br>&#125;<br><br>main()<br>&#123;<br>    echo &quot;=======================================================================&quot;<br>    LOG &quot;INFO&quot; &quot;------ begin install shuxiaoer maint root -----&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">判断用户是否存在</span><br>    id $&#123;MAINT_USER&#125; &gt; /dev/null 2&gt;&amp;1<br>    if [[ $? -ne 0 ]];then<br>    #用户不存在，需要创建用户<br>      create_user &quot;maint&quot; $&#123;MAINT_USER&#125; $&#123;MAINT_USER_GROUP_NAME&#125; $&#123;MAINT_USER_HOME&#125; || return 1<br>    fi<br><br><br>    install_shuxiaoer_maint  || return 1<br><br>    LOG &quot;INFO&quot; &quot;------ end install shuxiaoer maint root -----&quot;<br>    echo &quot;=======================================================================&quot;<br>&#125;<br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><p>由于其他微服务可能也使用到了这个安全框架相关的内容，我们将这部分代码写入我们的centos基础镜像的构建脚本当中，并重新构建所有应用的基础OS层。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/9c0c0e4f6c1d1b886842e91b50463867_1187x570.png@900-0-90-f.png"></p><p>新的centos基础镜像我们命名为<code>centos_base:1.0.0</code>,用来替代我们原来的基础镜像层<code>centos:7</code>记得修改其他的微服务Dockfile中的FROM 值再进行构建。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>构建之后，进入centos_base镜像内部，发现我们需要的目录、用户、安全文件都已经准备好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@723d1d9b48db /]# cd data01/<br>[root@723d1d9b48db data01]# ll<br>total 0<br>drwxr-x---. 6 maint    shuxiaoer 148 Aug 14 02:15 security<br>drwxr-x---. 1 frontend shuxiaoer  90 Aug 14 06:52 shuxiaoer-frontend<br>[root@723d1d9b48db data01]# cd security/<br>[root@723d1d9b48db security]# ll<br>total 8<br>-rwxr-x---. 1 maint shuxiaoer 1024 Aug 14 02:15 common_shared.key<br>drwxr-x---. 3 maint shuxiaoer   20 Aug 14 02:15 etc<br>drwxr-x---. 2 maint shuxiaoer   36 Aug 14 02:15 logs<br>-rwxr-x---. 1 maint shuxiaoer 1024 Aug 14 02:15 root.key<br>drwxr-x---. 3 maint shuxiaoer   54 Aug 14 02:15 scc<br>drwxr-x---. 6 maint shuxiaoer   54 Aug 14 02:15 sec<br></code></pre></td></tr></table></figure><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>在linux的系统当中，非root用户执行sudo命令，需要输入密码，这个过程会导致我们的自动脚本执行失败，我们需要跳过此步骤。</p><p>sudo的配置在<code>/etc/sudoers</code>这个文件中</p><p>其中</p><p>如将　%admin ALL=(ALL) ALL　修改为　%admin ALL=(ALL) NOPASSWD: ALL</p><p>意思是属于admin组的用户可以不需要输入密码执行sudo</p><p>如果去除%，则仅仅表示admin这个用户不需要输入密码</p><p> 为某个用户设置可设置为</p><p>username ALL=(ALL) NOPASSWD: ALL</p><p>我们为projectName组设置免密。</p><p>在nginx基础镜像构建脚本中添加</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/308c05f15d78ac60f3c1a5e40405f7b1_1329x630.png@900-0-90-f.png"></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i sed -i &#x27;/\#includedir \/etc\/sudoers.d/a\%shuxiaoer ALL=(ALL) NOPASSWD: ALL&#x27; /etc/sudoers<br></code></pre></td></tr></table></figure><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>在Nginx镜像改造过程中，发现nginx是通过脚本<code>operat_nginx.sh</code>启动的，而并非我们常用的nginx启动命令。</p><p>这一段脚本的开发人员已经找不到了，没有注释，仔细研究后发现它将宿主机的端口限制在了80与443，应该是出于安全方面的考虑，我们将注释补上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>source /etc/profile<br>if [ -e ~/.bashrc ];then<br>  source ~/.bashrc<br>fi<br><br>CUR_PATH=$(cd `dirname $0`; pwd)<br><br>function open_iptables_port()<br>&#123;<br>    sudo iptables -t filter -L INPUT -n | grep &quot;ACCEPT.*tcp dpt:&quot;$1 &amp;&gt;/dev/null<br>    if [ $? -ne 0 ]; then<br>        sudo iptables -A INPUT -t filter -p tcp -m state --state ESTABLISHED --dport $1 -j ACCEPT &amp;&gt;/dev/null<br>        if [ $? -ne 0 ]; then<br>            return 1<br>        fi<br>    fi<br>    return 0<br>&#125;<br><span class="hljs-meta">#</span><span class="bash">安全要求规定需仅放行必要tcp到80与443端口的请求</span><br>open_iptables_port 80<br>open_iptables_port 443<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">授权nginx文件可以以非root用户开启1024以下端口</span><br>sudo setcap cap_net_bind_service=+eip $CUR_PATH/nginx<br><br>if [[ $# -gt 0 ]]; then<br><span class="hljs-meta">#</span><span class="bash">启动nginx，指定配置文件</span><br>    $CUR_PATH/nginx $* -c $CUR_PATH/../conf/nginx.conf -p $CUR_PATH/..<br>    if [[ $? -ne 0 ]]; then<br>        echo &quot;failed to operate nginx&quot;<br>        exit 1<br>    fi<br>else<br>    $CUR_PATH/nginx -c $CUR_PATH/../conf/nginx.conf -p $CUR_PATH/..<br>    if [[ $? -ne 0 ]]; then<br>        echo &quot;failed to start nginx&quot;<br>        exit 1<br>    fi<br>fi<br><br>if [[ -f $CUR_PATH/../nginx.pid ]]; then<br>    chmod 600 $CUR_PATH/../nginx.pid &gt; /dev/null 2&gt;&amp;1<br>fi<br><br></code></pre></td></tr></table></figure><p>然后发现这段脚本执行还有些问题：</p><p><strong>在配置了sudo免密执行之后，我们的nginx启动脚本仍然报错</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR: problem running iptables: iptables v1.6.1: can&#x27;t initialize iptables table `filter&#x27;: Permission denied (you must be root)<br>Perhaps iptables or your kernel needs to be upgraded.<br></code></pre></td></tr></table></figure><p>网上搜索了一下之后发现，需要在docker启动命令上加上一行参数<code>--privileged</code>。</p><p>如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it --privileged 32jo13jl1 bash<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Magic_Ninja/article/details/88432140">https://blog.csdn.net/Magic_Ninja/article/details/88432140</a></p><p>添加后启动正常，在我们的K8s资源文件中也需要添加相应的设置</p><h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3><p>在nginx启动命令中加入参数<code>-g &quot;daemon off;&quot;</code>来使我们的nginx线程处于前台运行。</p><p>在我们的镜像构建脚本中，修改nginx启动脚本<code>operat_nginx.sh</code>中的nginx启动命令</p><p><code>install_nginx.sh</code>中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">···<br>install_nginx()<br>&#123;<br>...<br>    #设置nginx启动脚本前台启动<br>    sed -i &quot;s#-p \$CUR_PATH\/\.\.#-p \$CUR_PATH\/\.\. -g \&quot;daemon off\;\&quot;#g&quot; $&#123;FRONTEND_USER_HOME&#125;/nginx-run/sbin/operat_nginx.sh<br>···<br></code></pre></td></tr></table></figure><p>修改后<code>operat_nginx.sh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs she">···<br>if [[ $# -gt 0 ]]; then<br>    $CUR_PATH/nginx $* -c $CUR_PATH/../conf/nginx.conf -p $CUR_PATH/.. -g &quot;daemon off;&quot;<br>    if [[ $? -ne 0 ]]; then<br>        echo &quot;failed to operate nginx&quot;<br>        exit 1<br>    fi<br>else<br>    $CUR_PATH/nginx -c $CUR_PATH/../conf/nginx.conf -p $CUR_PATH/.. -g &quot;daemon off;&quot;<br>    if [[ $? -ne 0 ]]; then<br>        echo &quot;failed to start nginx&quot;<br>        exit 1<br>    fi<br>fi<br>···<br></code></pre></td></tr></table></figure><h3 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h3><p>处理完了以上问题之后，试着运行一下frontend镜像，将宿主机的443端口映射到容器的443端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@storage01 ~]# docker run -it -p 443:443 --privileged--rm fd2c8e2ae783 bash<br></code></pre></td></tr></table></figure><p>在浏览器输入https://+ 宿主机ip</p><p><a href="https://192.168.4.118/">https://192.168.4.118</a></p><p>OK，我们本节的内容就结束了。下一节中我们将来解决容器化的另外一个重要问题—日志采集。</p>]]></content>
    
    
    <categories>
      
      <category>容器化技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器化</tag>
      
      <tag>Docker</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(五)容器化实战--数据库改造</title>
    <link href="/2021/06/04/containerization5-database/"/>
    <url>/2021/06/04/containerization5-database/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在本章，由于后面所有的微服务均需要与数据库交互，我们本章进行数据库的容器化改造，首先我们来改造项目的持久层，mysql和redis。在本次改造过程当中，由于目前项目k8s测试资源不足，无法搭建数据库高可用集群，并且GM项目中我们也将采用云数据库的解决方案，因此本章仅保证功能的可用，不进行深入的研究。数据库的容器化工作中，卷的挂载及高可用的实现等问题都相对更为复杂，且数据库的性能也会受到一定程度的影响，如果能够选择云存储或其他封装好的持久层解决方案，那么可以跳过本章，也是笔者比较建议的方式。</p></blockquote><h2 id="1-Mysql"><a href="#1-Mysql" class="headerlink" title="1.    Mysql"></a>1.    Mysql</h2><h3 id="1-1-软件获取"><a href="#1-1-软件获取" class="headerlink" title="1.1    软件获取"></a>1.1    软件获取</h3><p>获取数据库相关软件包，以下以mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz这个版本为例</p><h3 id="1-2-构建过程设计"><a href="#1-2-构建过程设计" class="headerlink" title="1.2    构建过程设计"></a>1.2    构建过程设计</h3><p>这里我们还是采取把安装文件包传到容器当中，通过shell脚本的方式完成镜像的构建。</p><p>为了提升镜像构建的速度与提高复用性，我们把mysql基础镜像与项目数据库初始化分为两层镜像。</p><ul><li><code>mysql_5.7_base</code>基础镜像</li><li><code>mysql</code>应用层镜像</li></ul><p><strong>目录树设计</strong></p><blockquote><p>|–docker</p><p>|   |–bin<br>|   |   |–comm_lib                                        #公共函数抽象、环境变量设置文件<br>|   |   |–build_registry_image.sh                #registry镜像构建脚本<br>|   |   |–build_mysql_base_image.sh         #mysql基础层构建脚本<br>|   |   |–build_baseOS_HWJDK_image.sh  #OS+JDK层构建脚本<br>|   |   |–buildImage.sh                                  #主构建脚本<br>|   |   |–build_mysql_app_image.sh           #mysql应用层构建脚本<br>|   |   |–build_redis_images.sh                    #redis镜像构建脚本</p><p>|   |–config                                                     #环境变量读取文件<br>|   |   |–config.property</p><p>|   |–DockerFile                                             #DockerFile文件夹</p><p>|   |   |–centos_hwjdk1.8_mysql5.7_liquibase3.6.2<br>|   |   |   |–install                                            #安装包文件夹<br>|   |   |   |   |–package                                  #二进制安装文件夹<br>|   |   |   |   |   |–liquibase-3.6.2-bin.zip<br>|   |   |   |   |   |–mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz<br>|   |   |   |   |–config                                      #相关配置文件夹<br>|   |   |   |   |–bin                                           #构建脚本文件夹<br>|   |   |   |   |   |–install_mysql_liquibase.sh<br>|   |   |   |–libaio-0.3.109-13.el7.x86_64.rpm   #其他文件<br>|   |   |   |–Dockerfile                                            #Dockerfile文件  </p><p>|   |   |–projectName_mysql<br>|   |   |   |–install<br>|   |   |   |   |–config<br>|   |   |   |   |   |–db_changelog<br>|   |   |   |   |   |   |–projectName.init.xml<br>|   |   |   |   |   |   |–projectName.changelog.master.xml<br>|   |   |   |   |   |   |–projectName.changelog.21.RP2.xml<br>|   |   |   |   |–bin<br>|   |   |   |   |   |–init_database.sh<br>|   |   |   |–run.sh<br>|   |   |   |–Dockerfile<br>|   |   |–projectName_redis<br>|   |   |   |–install<br>|   |   |   |   |–package<br>|   |   |   |   |   |–redis-4.0.9.tar.gz<br>|   |   |   |   |–bin<br>|   |   |   |   |   |–install.sh<br>|   |   |   |–Dockerfile</p></blockquote><h3 id="1-3-镜像构建文件开发"><a href="#1-3-镜像构建文件开发" class="headerlink" title="1.3    镜像构建文件开发"></a>1.3    镜像构建文件开发</h3><h4 id="1-3-1-mysql基础镜像层"><a href="#1-3-1-mysql基础镜像层" class="headerlink" title="1.3.1    mysql基础镜像层"></a>1.3.1    mysql基础镜像层</h4><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><strong>Dockerfile</strong></h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#使用的基础镜像 暂时使用centos7开源，后期可更改，注意如无法访问公网，本地需要提前准备</span><br><span class="hljs-keyword">FROM</span> centos7_hwjdk8<br><span class="hljs-comment">#作者信息  姓名 邮箱</span><br><span class="hljs-comment">#MAINTAINER name &quot;xxxx@xxx.com&quot;</span><br><br><br><span class="hljs-comment">#声明变量</span><br><span class="hljs-keyword">ENV</span> INSTALL_HOME=/opt/install<br><span class="hljs-keyword">ENV</span> SCRIPT_NAME=install_mysql_liquibase.sh<br><span class="hljs-keyword">ENV</span> MYSQL_HOME=/opt/mysql<br><br><span class="hljs-comment">#创建安装目录</span><br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir -p /data01 &amp;&amp; mkdir -p <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><br><span class="hljs-comment">#由于centos7缺少libaio依赖，会导致后面mysql安装失败，如已有依赖可忽略此步骤</span><br><span class="hljs-keyword">COPY</span><span class="bash"> libaio-0.3.109-13.el7.x86_64.rpm <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><span class="hljs-keyword">RUN</span><span class="bash"> rpm -ivh <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span>/libaio-0.3.109-13.el7.x86_64.rpm &amp;&amp; yum install -y numactl</span><br><br><span class="hljs-comment">#复制安装脚本</span><br><span class="hljs-keyword">COPY</span><span class="bash"> install <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><br><span class="hljs-comment">#运行安装脚本</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sh <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span>/bin/<span class="hljs-variable">$&#123;SCRIPT_NAME&#125;</span></span><br><br></code></pre></td></tr></table></figure><h5 id="镜像构建脚本"><a href="#镜像构建脚本" class="headerlink" title="镜像构建脚本"></a><strong>镜像构建脚本</strong></h5><p><code>install_mysql_liquibase.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#########################################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-keyword">function</span>:      refresh_database</span><br><span class="hljs-meta">#</span><span class="bash">author:        XXXXXXX</span><br><span class="hljs-meta">#</span><span class="bash">date:          2021-07-19</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#########################################################################################</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#####################基本配置####################################################</span></span><br>CUR_DIR=$(pwd)<br>jdk_path=&quot;/opt/JRE&quot;<br>liquibase_package=&quot;liquibase-3.6.2-bin.zip&quot;<br>package_dir=&quot;/opt/install/package&quot;<br>db_changelog_dir=&quot;/opt/install/config/db_changelog&quot;<br>mysql_pachage=&quot;/opt/install/package/mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz&quot;<br>mysql_dest=&quot;/opt/mysql-5.7.23-linux-glibc2.12-x86_64&quot;<br>DB_ADDRESS=&quot;127.0.0.1&quot;<br>DB_PORT=&quot;3306&quot;<br>DB_NAME=&quot;data_waiter&quot;<br>DB_USERNAME=&quot;root&quot;<br>DB_PASSWORD=&quot;Huawei@123&quot;<br>MYSQL_UID=&quot;3000&quot;<br>MYSQL_GID=&quot;3000&quot;<br><br><br>function install_mysql()<br>&#123;<br>    DB_ADDRESS=$1<br>    DB_NAME=$2<br>    DB_PASSWORD=$3<br>    echo &quot;INFO&quot; &quot;------ begin prepare mysql -----&quot;<br>    #解压mysql安装文件<br>    tar -xzvf /opt/install/package/mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz -C /opt<br>    #重命名 mysql目录<br>    mv /opt/mysql-5.7.23-linux-glibc2.12-x86_64 /opt/mysql<br><br>    if [[ ! -d /opt/mysql ]];then<br>        echo &quot;ERROR&quot; &quot;[ file /opt/mysql ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    #设置数据库时区<br>    #Install MySQL<br>    #set timezone<br>    #rm -rf /etc/localtime<br>    #ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>    #Delete Old Mysql program<br>    #Disable Selinux<br><br>    #创建mysql用户与组,授权目录<br>    groupadd mysql -g $&#123;MYSQL_GID&#125;<br>    useradd -d /home/mysql -s /bin/bash -u $&#123;MYSQL_UID&#125; -g mysql -m mysql<br>    chown -R mysql:mysql /opt/mysql<br><br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;user&amp;group add  failed&quot;<br>        return 1<br>    fi<br><br>    #创建文件目录<br>    mkdir -p /data01/mysql-data<br>    mkdir /data01/mysql-data/tmp<br>    mkdir /data01/mysql-data/log<br>    chown -R mysql:mysql /data01/mysql-data<br>    chgrp -R mysql /data01/mysql-data<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;directory /data01/mysql-data created failed&quot;<br>        return 1<br>    fi<br><br>    #创建配置文件 my.cnf<br>    touch /opt/mysql/my.cnf<br>    cat &gt;&gt;/opt/mysql/my.cnf&lt;&lt;EOF<br>[mysqld]<br>basedir = /opt/mysql<br><span class="hljs-meta">#</span><span class="bash">bind-address = <span class="hljs-variable">$&#123;DB_ADDRESS&#125;</span></span><br>datadir = /data01/mysql-data/workdbs<br>tmpdir = /data01/mysql-data/tmp/<br>port = 3306<br>socket =/opt/mysql/lib/mysql.sock<br>lower_case_table_names=1<br>character-set-server = utf8<br>max_allowed_packet = 1000M<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,STRICT_ALL_TABLES<br>log-error=/data01/mysql-data/log/mysql_3306.log<br>max_connections=1000<br>event_scheduler=ON<br>[mysql]<br>default-character-set = utf8<br>socket =/opt/mysql/lib/mysql.sock<br>EOF<br>    chown mysql:mysql /opt/mysql/my.cnf<br>    \cp -rf /opt/mysql/my.cnf /etc/my.cnf<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;edit /opt/mysql/my.cnf failed&quot;<br>        return 1<br>    fi<br>    #设置环境变量<br>    cat &gt;&gt;/etc/profile&lt;&lt;EOF<br>export PATH=$PATH:/opt/mysql/bin<br>export PATH=$PATH:/etc/init.d<br>EOF<br>    source /etc/profile<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;edit /etc/profile failed&quot;<br>        return 1<br>    fi<br><br>    #初始化MySQL<br>    cp -a /opt/mysql/support-files/mysql.server /etc/init.d/mysql.server<br>    /opt/mysql/bin/mysqld --initialize --user=mysql --basedir=/opt/mysql/ --datadir=/data01/mysql-data/workdbs<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;initialize mysqld failed&quot;<br>        return 1<br>    fi<br><br>    #创建软连接<br>    ln -s /opt/mysql /usr/local/mysql<br>    ln -s /opt/mysql/lib/mysql.sock /tmp/mysql.sock<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;create softlink failed&quot;<br>        return 1<br>    fi<br><br>    #获取初始密码<br>    mysqlrootpwd=`cat /data01/mysql-data/log/mysql_3306.log|grep root|awk -F&#x27; &#x27; &#x27;NR==1 &#123;print $NF&#125;&#x27;`<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR get mysqlrootpwd== $&#123;mysqlrootpwd&#125; failed &quot;<br>        return 1<br>    fi<br><br>    #启动MySQL<br>    /opt/mysql/support-files/mysql.server start<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;mysql.server start failed&quot;<br>        return 1<br>    fi<br><br>    #以脚本的方式更改初始密码、授权登录IP、创建初始数据库data_waiter等<br>    cat &gt;/tmp/mysql_sec_script&lt;&lt;EOF<br>grant all privileges on *.* to &#x27;root&#x27;@&quot;%&quot; identified by &quot;$&#123;DB_PASSWORD&#125;&quot; with grant option;<br>CREATE DATABASE \`$&#123;DB_NAME&#125;\` CHARACTER SET &#x27;utf8&#x27; COLLATE &#x27;utf8_general_ci&#x27;;<br>flush privileges;<br>EOF<br>    /opt/mysql/bin/mysqladmin -uroot -p$&#123;mysqlrootpwd&#125; password $&#123;DB_PASSWORD&#125;<br>    /opt/mysql/bin/mysql -u root -p$&#123;DB_PASSWORD&#125;  &lt; /tmp/mysql_sec_script<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;mysql config changed failed&quot;<br>        return 1<br>    fi<br>    rm -f /tmp/mysql_sec_script<br>    #将可执行文件复制至/usr/bin 下方便启动<br>    cp /opt/mysql/bin/mysql /usr/bin<br><br>    if [[ $? -ne 0 ]];then<br>    echo &quot;==================MySQL 5.7 install faild!======================&quot;<br>    exit 1<br>    else<br>    echo &quot;==================MySQL 5.7 install success======================&quot;<br>    echo -e &quot;\n&quot;<br>    fi<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">准备liquibase安装文件</span><br>function install_liquibase()<br>&#123;<br>    echo &quot;INFO&quot; &quot;------ begin install liquibase -----&quot;<br><br><br>    file_liquibase=$&#123;package_dir&#125;/$&#123;liquibase_package&#125;<br>  if [[ ! -f $&#123;file_liquibase&#125; ]];then<br>        echo &quot;ERROR&quot; &quot;[ file $&#123;file_liquibase&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    unzip -o $&#123;file_liquibase&#125; -d $&#123;package_dir&#125; &gt;/dev/null 2&gt;&amp;1<br>  if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ unzip $&#123;file_liquibase&#125; ] failed&quot;<br>        return 1<br>    fi<br><br>    echo &quot;INFO&quot; &quot;------ successful install liquibase -----&quot;<br>&#125;<br><br><br>    #设置JAVA环境变量<br>function set_env()<br>&#123;<br>    echo &quot;INFO&quot; &quot;------ begin set_env  -----&quot;<br>    file_bash=/etc/profile<br>    root_bash=~/.bashrc<br>    sudo chmod 646 $&#123;file_bash&#125;<br>    echo &quot;export JAVA_HOME=$&#123;jdk_path&#125;/jre1.8.0_232&quot; &gt;&gt; $&#123;file_bash&#125;<br>    echo &#x27;export JRE_HOME=$&#123;JAVA_HOME&#125;&#x27; &gt;&gt; $&#123;file_bash&#125;<br>    echo &#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27; &gt;&gt; $&#123;file_bash&#125;<br>    echo &#x27;export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib&#x27; &gt;&gt; $&#123;file_bash&#125;<br>    sudo chmod 644 $&#123;file_bash&#125;<br>    echo &#x27;source /etc/profile&#x27; &gt;&gt; $&#123;root_bash&#125;<br>    source $&#123;file_bash&#125;<br>    java -version &gt;/dev/null 2&gt;/dev/null<br><br>  if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ java -version ] failed&quot;<br>        return 1<br>    fi<br>        echo &quot;INFO&quot; &quot;------ successful set_env  -----&quot;<br>&#125;<br><br>function main()<br>&#123;<br>    echo &quot;INFO&quot; &quot;------ begin install projectName database -----&quot;<br><br>    install_mysql $&#123;DB_ADDRESS&#125; $&#123;DB_NAME&#125; $&#123;DB_PASSWORD&#125; || return 1<br><br>    set_env || return 1<br><br>    install_liquibase || return 1<br><br><br>    echo &quot;INFO&quot; &quot;------ end install projectName database root -----&quot;<br>&#125;<br><br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><h5 id="打包镜像脚本"><a href="#打包镜像脚本" class="headerlink" title="打包镜像脚本"></a><strong>打包镜像脚本</strong></h5><p><code>build_mysql_base_image.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">配置安装变量</span><br>CUR_DIR=$(pwd)<br>cdir=$(cd `dirname $0`; pwd)<br>. $&#123;cdir&#125;/comm_lib<br>IMAGE_NAME=mysql_5.7_base<br>DOCKER_REGISTRY_URL=$&#123;Docker_Registry_URL&#125;<br>IMAGE_VERSION=1.0.0<br>WORK_DIR=$(cd ../DockerFile/centos_hwjdk1.8_mysql5.7_liquibase3.6.2;pwd)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">检查安装文件夹</span><br>check_dictionary()<br>&#123;<br>    LOG &quot;INFO&quot; &quot;BEGIN CHECK DICTIONARY...&quot;<br><br><br>  if [[ ! -d $&#123;WORK_DIR&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ dictionary $&#123;WORK_DIR&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    LOG &quot;INFO&quot; &quot;DICTIONARY IS READY&quot;<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">检查安装文件</span><br>check_files()<br>&#123;<br>    LOG &quot;INFO&quot; &quot;BEGIN CHECK FILES...&quot;<br><br>  dockfile_path=$&#123;WORK_DIR&#125;/Dockerfile<br>  if [[ ! -f $&#123;dockfile_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;dockfile_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    mysql_path=$&#123;WORK_DIR&#125;/install/package/mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz<br>  if [[ ! -f $&#123;mysql_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;mysql_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    liquibase_path=$&#123;WORK_DIR&#125;/install/package/liquibase-3.6.2-bin.zip<br>  if [[ ! -f $&#123;liquibase_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;liquibase_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br>    sh_path=$&#123;WORK_DIR&#125;/install/bin/install_mysql_liquibase.sh<br>  if [[ ! -f $&#123;sh_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;sh_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">构建镜像</span><br>buildImage()&#123;<br><br>    cd $&#123;WORK_DIR&#125;<br><br>    docker build -t $&#123;IMAGE_NAME&#125; . || return 1<br><br>    if [[ $? -ne 0 ]];then<br>        LOG &quot;ERROR&quot; &quot;$&#123;IMAGE_NAME&#125;Image Build  failed&quot;<br>        return 1<br>    fi<br><br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">往镜像仓推送镜像</span><br>pushdImage()&#123;<br><br>    docker tag $&#123;IMAGE_NAME&#125; $&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125; || return 1<br><br>    if [[ $? -ne 0 ]];then<br>       LOG &quot;ERROR&quot; &quot;$&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;Image tag  failed&quot;<br>        return 1<br>    fi<br><br>    docker push $&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125; || return 1<br><br>    if [[ $? -ne 0 ]];then<br>        LOG &quot;ERROR&quot; &quot;$&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;Image push  failed&quot;<br>        return 1<br>    fi<br><br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">主函数</span><br>function main()<br>&#123;<br>    echo &quot;=======================================================================&quot;<br><br>    check_dictionary || return 1<br><br>    check_files || return 1<br><br>    buildImage || return 1<br><br>    pushdImage || return 1<br><br>    echo &quot;=======================================================================&quot;<br>&#125;<br><br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-mysql应用镜像层"><a href="#1-3-2-mysql应用镜像层" class="headerlink" title="1.3.2    mysql应用镜像层"></a>1.3.2    mysql应用镜像层</h4><h5 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> mysql_5.<span class="hljs-number">7</span>_base<br><span class="hljs-comment">#作者信息  姓名 邮箱</span><br><span class="hljs-comment">#MAINTAINER name &quot;xxxx@xxx.com&quot;</span><br><br><span class="hljs-comment">#声明变量</span><br><span class="hljs-keyword">ENV</span> INSTALL_HOME=/opt/install<br><span class="hljs-keyword">ENV</span> SCRIPT_NAME=init_database.sh<br><span class="hljs-keyword">ENV</span> MYSQL_HOME=/opt/mysql<br><br><span class="hljs-comment">#复制安装脚本</span><br><span class="hljs-keyword">COPY</span><span class="bash"> install <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><span class="hljs-keyword">COPY</span><span class="bash"> run.sh <span class="hljs-variable">$&#123;MYSQL_HOME&#125;</span>/bin</span><br><br><span class="hljs-comment">#运行安装脚本</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sh <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span>/bin/<span class="hljs-variable">$&#123;SCRIPT_NAME&#125;</span></span><br><span class="hljs-comment">#删除安装目录</span><br><span class="hljs-keyword">RUN</span><span class="bash"> rm -rf <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><br><span class="hljs-comment">#更换用户、工作目录</span><br><span class="hljs-keyword">USER</span> mysql<br><span class="hljs-keyword">WORKDIR</span><span class="bash"> <span class="hljs-variable">$&#123;MYSQL_HOME&#125;</span>/bin</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;run.sh&quot;</span>]</span><br><span class="hljs-comment">#Docker bu5  ild命令参考：docker build -t centos7_hwjdk8 .</span><br></code></pre></td></tr></table></figure><h5 id="镜像构建脚本-1"><a href="#镜像构建脚本-1" class="headerlink" title="镜像构建脚本"></a>镜像构建脚本</h5><p><code>init_database.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#########################################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-keyword">function</span>:      refresh_database</span><br><span class="hljs-meta">#</span><span class="bash">author:        XXXXXXX</span><br><span class="hljs-meta">#</span><span class="bash">date:          2018-11-21</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#########################################################################################</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#####################基本配置####################################################</span></span><br>CUR_DIR=$(pwd)<br>jdk_path=&quot;/opt/JRE&quot;<br>package_dir=&quot;/opt/install/package&quot;<br>db_changelog_dir=&quot;/opt/install/config/db_changelog&quot;<br>DB_ADDRESS=&quot;127.0.0.1&quot;<br>DB_PORT=&quot;3306&quot;<br>DB_NAME=&quot;data_waiter&quot;<br>DB_USERNAME=&quot;root&quot;<br>DB_PASSWORD=&quot;Huawei@123&quot;<br>run_file=&quot;/opt/mysql/bin/run.sh&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">初始化liquibase</span><br>function exec_liquibase()<br>&#123;<br>  if [[ ! -f $&#123;run_file&#125; ]];then<br>        echo &quot;ERROR&quot; &quot;[ file $&#123;run_file&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br>    sudo chown mysql $&#123;run_file&#125;<br>    sudo chgrp mysql $&#123;run_file&#125;<br><span class="hljs-meta">#</span><span class="bash">. lib/us.sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">export</span> CIPHER_TEXT=<span class="hljs-variable">$&#123;DB_PASSWORD&#125;</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">sudo chmod 750 qUKwo8UXe61X5aqT.sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">obfuscated_text=$(./qUKwo8UXe61X5aqT.sh <span class="hljs-string">&#x27;CIPHER_TEXT&#x27;</span>)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span></span><br><span class="hljs-meta">#</span><span class="bash">  error_msg=<span class="hljs-variable">$obfuscated_text</span></span><br><span class="hljs-meta">#</span><span class="bash">  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$error_msg</span>&quot;</span></span><br><span class="hljs-meta">#</span><span class="bash">  <span class="hljs-built_in">exit</span> 1</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-keyword">fi</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">plaintext=$(dstring <span class="hljs-string">&quot;<span class="hljs-variable">$obfuscated_text</span>&quot;</span>)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">password=<span class="hljs-variable">$plaintext</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">unset</span> obfuscated_text</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">unset</span> plaintext</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">unset</span> CIPHER_TEXT</span><br><br>    dir_liquibase=$&#123;package_dir&#125;/liquibase-3.6.2-bin<br>    #echo &quot;INFO&quot; &quot;password has been decrypted&quot;<br>  if [[ ! -d $&#123;dir_liquibase&#125; ]];then<br>        echo &quot;ERROR&quot; &quot;[ dir $&#123;dir_liquibase&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    source /etc/profile<br>    sudo chmod 750 -R $&#123;dir_liquibase&#125;<br>    /opt/mysql/support-files/mysql.server start<br>    cd $&#123;dir_liquibase&#125;;<br><br>       sh liquibase --driver=com.mysql.cj.jdbc.Driver \<br>       --classpath=$&#123;db_changelog_dir&#125; \<br>       --changeLogFile=projectName.changelog.master.xml \<br>       --url=&quot;jdbc:mysql://$&#123;DB_ADDRESS&#125;:$&#123;DB_PORT&#125;/$&#123;DB_NAME&#125;?serverTimezone=UTC&amp;useSSL=false&quot; \<br>       --username=$&#123;DB_USERNAME&#125; \<br>       --password=$&#123;DB_PASSWORD&#125; \<br>       update<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;failed execute liquibase update, please check error message.&quot;<br>        return 1<br>    fi<br><br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数据库密码加密函数</span><br>function dstring()<br>&#123;<br>    ens=&#x27;abcdefghijklmnopqrstuvwxyzABCDEFHIJKLMNOPQRSTUVWXYZ012345689`~!@$%^&amp;*()-_=+|[&#123;&#125;];:&#x27;\&#x27;&#x27;&quot;,&lt;.&gt;/? &#x27;<br>    des=&#x27;p;)ILlF+rZUW6=smX-V3SEid:xaw2t[HC|&lt;/D,_To 9uMk0fK1N8&#125;eJcqz4`gOb~.BRj!h$(Q&#x27;\&#x27;&#x27;&quot;]&#123;^A5*&amp;n@y?v%&gt;YP&#x27;<br>    echo &quot;$*&quot; | tac | rev | sed &quot;y#$des#$ens#&quot; | sed &quot;y/G7\\\\\#/\\\\\#G7/&quot;<br>&#125;<br><br><br>function main()<br>&#123;<br>    echo &quot;=======================================================================&quot;<br>    echo &quot;INFO&quot; &quot;------ begin initialize projectName database -----&quot;<br><br>    exec_liquibase || return 1<br><br>    echo &quot;INFO&quot; &quot;------ end initialize projectName database root -----&quot;<br>    echo &quot;=======================================================================&quot;<br>&#125;<br><br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><h5 id="打包镜像脚本-1"><a href="#打包镜像脚本-1" class="headerlink" title="打包镜像脚本"></a>打包镜像脚本</h5><p><code>build_mysql_app_image.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>CUR_DIR=$(pwd)<br>cdir=$(cd `dirname $0`; pwd)<br>. $&#123;cdir&#125;/comm_lib<br><br>IMAGE_NAME=mysql<br>DOCKER_REGISTRY_URL=$&#123;Docker_Registry_URL&#125;<br>IMAGE_VERSION=1.0.0<br>WORK_DIR=$(cd ../DockerFile/projectName_mysql;pwd)<br><br>check_dictionary()<br>&#123;<br>    LOG &quot;INFO&quot; &quot;BEGIN CHECK DICTIONARY...&quot;<br><br><br>  if [[ ! -d $&#123;WORK_DIR&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ dictionary $&#123;WORK_DIR&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    LOG &quot;INFO&quot; &quot;DICTIONARY IS READY&quot;<br>&#125;<br><br>check_files()<br>&#123;<br>    LOG &quot;INFO&quot; &quot;BEGIN CHECK FILES...&quot;<br><br>  dockfile_path=$&#123;WORK_DIR&#125;/Dockerfile<br>  if [[ ! -f $&#123;dockfile_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;dockfile_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    sh_path=$&#123;WORK_DIR&#125;/install/bin/install.sh<br>  if [[ ! -f $&#123;sh_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;sh_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br>&#125;<br><br>buildImage()&#123;<br><br>    cd $&#123;WORK_DIR&#125;<br><br>    docker build -t $&#123;IMAGE_NAME&#125; . || return 1<br><br>    if [[ $? -ne 0 ]];then<br>        LOG &quot;ERROR&quot; &quot;$&#123;IMAGE_NAME&#125;Image Build  failed&quot;<br>        return 1<br>    fi<br><br>&#125;<br><br>pushdImage()&#123;<br><br>    docker tag $&#123;IMAGE_NAME&#125; $&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125; || return 1<br><br>    if [[ $? -ne 0 ]];then<br>       LOG &quot;ERROR&quot; &quot;$&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;Image tag  failed&quot;<br>        return 1<br>    fi<br><br>    docker push $&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125; || return 1<br><br>    if [[ $? -ne 0 ]];then<br>        LOG &quot;ERROR&quot; &quot;$&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;Image push  failed&quot;<br>        return 1<br>    fi<br><br>&#125;<br><br>function main()<br>&#123;<br>    echo &quot;=======================================================================&quot;<br><br>    check_dictionary || return 1<br><br>    check_files || return 1<br><br>    buildImage || return 1<br><br>    pushdImage || return 1<br><br>    echo &quot;=======================================================================&quot;<br>&#125;<br><br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><h3 id="1-4-kubernetes资源文件开发"><a href="#1-4-kubernetes资源文件开发" class="headerlink" title="1.4    kubernetes资源文件开发"></a>1.4    kubernetes资源文件开发</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-pvc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">projectName</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">5G</span><br>  <span class="hljs-comment">#storageClassName: nfs #需要和pv的sc类型一致，否则会绑定失败</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">pv:</span> <span class="hljs-string">mysql-pv</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 有状态pod，会自动根据metadata.name及实例数量生产xxx-0,xxx-1的pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">projectName</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">mysql-service</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#由于无k8s开发环境及本地性能原因 暂时无法研究高可用读写分离集群</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.60</span><span class="hljs-number">.151</span><span class="hljs-string">:5000/mysql:1.0.0</span> <span class="hljs-comment"># 配置镜像路径，也就是我们刚才push好的镜像</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3306</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/media</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-data</span><br>          <span class="hljs-attr">env:</span> <span class="hljs-comment"># 环境变量设置</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAME</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span> <span class="hljs-comment"># 取值metadata.name，这里注意，statefulset类型的对象取到的是有-0,-1序号后缀的</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_PORT</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;3306&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_INSTANCE_HOSTNAME</span> <span class="hljs-comment">#环境变量，这个变量在我们项目的配置文件中有配置，作用是指定注册到eureka集群中的hostname</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;MY_POD_NAME&#125;.mysql-service</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_NODE_NAME</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">spec.nodeName</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAMESPACE</span> <span class="hljs-comment"># POD当前命名空间</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_IP</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">status.podIP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_IN_SERVICE_NAME</span> <span class="hljs-comment"># 因为pod 通过域名互相访问，需要使用headless 服务名称</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">mysql-service</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_REPLICAS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;2&quot;</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-data</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/data</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">&quot;Parallel&quot;</span> <span class="hljs-comment"># 以并行方式创建pod，默认是串行的</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># headless service 无头服务</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">projectName</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-svc-port</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br></code></pre></td></tr></table></figure><p>这里因为Mysql高可用集群是有主从之分的，启停顺序也需要进行控制。所以我们采用的是StatefulSet+Headless service的方式来实现，这样便于我们后面高可用、读写分离Mysql的集群扩展。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>basedir = /opt/mysql<br>bind-address = 192.168.60.144<br>datadir = /data01/mysql-data/workdbs<br>tmpdir = /data01/mysql-data/tmp/<br>port = 3306<br>socket =/opt/mysql/lib/mysql.sock<br>lower_case_table_names=1<br>character-set-server = utf8<br>max_allowed_packet = 1000M<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,STRICT_ALL_TABLES<br>log-error=/data01/mysql-data/log/mysql_3306.log<br>max_connections=1000<br>event_scheduler=ON<br>[mysql]<br>default-character-set = utf8<br>socket =/opt/mysql/lib/mysql.sock<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost etc]# \cp -rf /opt/mysql/my.cnf /etc/my.cnf<br><br></code></pre></td></tr></table></figure><p>c. 修改系统配置文件profile。 </p><ol><li><ol><li><ol><li>编辑etc目录下的“profile”文件。 </li></ol></li></ol></li></ol><p><strong># vi /etc/profile</strong></p><p>输入<strong>i</strong>进入编辑模式，在文件末尾添加如下内容：</p><p>export PATH=$PATH:/opt/mysql/bin</p><p>export PATH=$PATH:/etc/init.d</p><p>添加完成后按<strong>Esc</strong>退出编辑模式，执行**:wq!**保存并退出。</p><ol><li><ol><li><ol><li>重新加载etc目录下的profile文件。 </li></ol></li></ol></li></ol><p><strong># source /etc/profile</strong></p><p>d. 将mysql.server复制到/etc/init.d/ 。 </p><p><strong># cd /opt/mysql</strong></p><p><strong># cp -a ./support-files/mysql.server /etc/init.d/mysql.server</strong></p><p>e. 初始化mysql </p><p><strong># cd /opt/mysql</strong></p><p><strong># ./bin/mysqld –initialize –user=mysql –basedir=/opt/mysql/ –datadir=/data01/mysql-data/workdbs</strong></p><p>命令执行后，如正确，则不会有显示信息。</p><p>f. 查看日志文件，获取临时密码。</p><p><strong># cat /data01/mysql-data/log/mysql_3306.log</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]# ./bin/mysqld --initialize --user=mysql --basedir=/opt/mysql/ --datadir=/data01/mysql-data/workdbs<br>[root@localhost mysql]# cat /data01/mysql-data/log/mysql_3306.log<br>2021-07-08T06:37:30.261037Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).<br>2021-07-08T06:37:30.261108Z 0 [Warning] &#x27;NO_ZERO_DATE&#x27;, &#x27;NO_ZERO_IN_DATE&#x27; and &#x27;ERROR_FOR_DIVISION_BY_ZERO&#x27; sql modes should be used with strict mode. They will be merged with strict mode in a future release.<br>2021-07-08T06:37:30.261124Z 0 [Warning] &#x27;NO_AUTO_CREATE_USER&#x27; sql mode was not set.<br>2021-07-08T06:37:31.376072Z 0 [Warning] InnoDB: New log files created, LSN=45790<br>2021-07-08T06:37:31.610332Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.<br>2021-07-08T06:37:31.685245Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: f8d794a3-dfb6-11eb-9de4-000c29da9da8.<br>2021-07-08T06:37:31.687340Z 0 [Warning] Gtid table is not ready to be used. Table &#x27;mysql.gtid_executed&#x27; cannot be opened.<br>2021-07-08T06:37:31.690134Z 1 [Note] A temporary password is generated for root@localhost: yH0IbBLiq5=v<br><br></code></pre></td></tr></table></figure><p>获取临时密码，如：“<strong>yH0IbBLiq5=v</strong>”。</p><p>g. 创建软连接。 </p><ol><li><ol><li><ol><li>将mysql的安装目录软连接到local下面。 </li></ol></li></ol></li></ol><p><strong># ln -s /opt/mysql /usr/local/mysql</strong></p><ol><li><ol><li><ol><li>将mysql.sock文件软连接到tmp下面 </li></ol></li></ol></li></ol><p><strong># ln -s /opt/mysql/lib/mysql.sock /tmp/mysql.sock</strong></p><ol><li>注册并设置mysql.server服务为开机自启动。 </li></ol><p><strong># systemctl enable mysql.server.service</strong></p><ol><li><p>启动并修改初始密码。     </p></li><li><ol><li>在“/opt/mysql/support-files”目录下启动MySQL。      </li></ol></li></ol><p><strong># cd /opt/mysql/support-files</strong></p><p><strong># mysql.server start</strong></p><ol><li><ol><li>查看MySQL状态。 </li></ol></li></ol><p><strong># mysql.server status</strong></p><p>系统显示如下类似信息表示MySQL状态正常：</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/clip_image004.png"></p><ol><li><ol><li>在“opt/mysql/bin”目录下执行以下命令登录MySQL。      </li></ol></li></ol><p><strong># cd /opt/mysql/bin</strong></p><p><strong># mysql -u root -p</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/clip_image005.png">按照提示信息输入记录的临时密码。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/clip_image006.png">登录成功后系统显示如下类似信息：</p><ol><li><ol><li>修改root用户密码。 </li></ol></li></ol><p>mysql&gt; <strong>set password=password(‘<em><strong>Password</strong></em>‘);</strong></p><p>其中，单引号中的<em>Password</em>由用户自定义。</p><ol><li><ol><li>赋予任何主机访问数据的权限。      </li></ol></li></ol><p>mysql&gt; <strong>grant all privileges on *.* to ‘root‘@’%’ identified by ‘<em><strong>Password</strong></em>‘ with grant option;</strong></p><p>其中，单引号中的<em>Password</em>由用户自定义。</p><ol><li><ol><li>使修改生效并使用数据库。      </li></ol></li></ol><p>mysql&gt; <strong>flush privileges;</strong></p><p>mysql&gt; <strong>use mysql;</strong></p><ol><li><ol><li>查看当前用户。      </li></ol></li></ol><p>mysql&gt; <strong>select host,user from user;</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/clip_image007.png">系统显示如下类似信息，表示数据库已正常安装和运行。</p><ol><li><ol><li>退出MySQL数据库。 </li></ol></li></ol><p>mysql&gt; <strong>exit</strong></p><p>\6. 将/opt/mysql/bin/目录下的可执行程序<strong>mysql</strong>拷贝到/usr/bin目录下，方便后续执行这个命令。 </p><p><strong># cp /opt/mysql/bin/mysql /usr/bin</strong></p><h2 id="2-Redis"><a href="#2-Redis" class="headerlink" title="2   Redis"></a>2   Redis</h2><h3 id="2-1-软件获取"><a href="#2-1-软件获取" class="headerlink" title="2.1    软件获取"></a>2.1    软件获取</h3><p><a href="https://onebox.huawei.com/p/db2887087836d491d6b5aa88bcb372b6">https://onebox.huawei.com/p/db2887087836d491d6b5aa88bcb372b6</a></p><h3 id="2-2-操作步骤"><a href="#2-2-操作步骤" class="headerlink" title="2.2    操作步骤"></a>2.2    操作步骤</h3><p>以下以redis-4.0.9.tar.gz这个版本为例</p><p>​    tar -zxvf redis-4.0.9.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">redis是C语言开发，运行需要c语言环境，安装gcc，如有跳过此步骤</span><br>yum install gcc<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@storage01 redis-4.0.9]# make MALLOC=libc<br><br></code></pre></td></tr></table></figure><p>   3.编译成功后，进入src文件夹，执行make install进行Redis安装。</p><p>​    如下图示安装完成，界面如下：<br>​    <img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/clip_image017.jpg"></p><p> <img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/clip_image019.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@storage01 redis-4.0.9]# mkdir -p etc<br>[root@storage01 redis-4.0.9]# mkdir -p bin<br>[root@storage01 redis-4.0.9]# mv redis.conf etc/<br>[root@storage01 src]# mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server /usr/local/redis-4.0.9/bin/<br><br>[root@storage01 bin]# ./redis-server<br>37934:C 16 Jul 14:41:46.457 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo<br>37934:C 16 Jul 14:41:46.457 # Redis version=4.0.9, bits=64, commit=00000000, modified=0, pid=37934, just started<br>37934:C 16 Jul 14:41:46.457 # Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf<br>37934:M 16 Jul 14:41:46.458 * Increased maximum number of open files to 10032 (it was originally set to 1024).<br>                _._<br>           _.-``__ &#x27;&#x27;-._<br>      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 4.0.9 (00000000/0) 64 bit<br>  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._<br> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode<br> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379<br> |    `-._   `._    /     _.-&#x27;    |     PID: 37934<br>  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;<br> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|<br> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io<br>  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;<br> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|<br> |    `-._`-._        _.-&#x27;_.-&#x27;    |<br>  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;<br>      `-._    `-.__.-&#x27;    _.-&#x27;<br>          `-._        _.-&#x27;<br>              `-.__.-&#x27;<br><br>37934:M 16 Jul 14:41:46.475 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.<br>37934:M 16 Jul 14:41:46.476 # Server initialized<br>37934:M 16 Jul 14:41:46.477 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.<br>37934:M 16 Jul 14:41:46.481 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.<br>37934:M 16 Jul 14:41:46.481 * Ready to accept connections<br><br><br>[root@storage01 bin]# ./redis-server /usr/local/redis-4.0.9/etc/redis.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">把 redis.conf配置文件中的 <span class="hljs-built_in">bind</span> 127.0.0.1 这一行给注释掉，这里的<span class="hljs-built_in">bind</span>指的是只有指定的网段才能远程访问这个redis，注释掉后，就没有这个限制了。</span><br>sed -n &#x27;s/bind 127.0.0.1/#bind 127.0.0.1/p&#x27; 1.txt<br><span class="hljs-meta">#</span><span class="bash">protected-mode 设置成no（默认是设置成yes的， 防止了远程访问，在redis3.2.3版本后）</span><br>sed -n &#x27;s/protected-mode yes/protected-mode no/p&#x27; 1.txt<br><span class="hljs-meta">#</span><span class="bash">修改Redis默认密码 (默认密码为空)</span><br>sed -n &#x27;s/# requirepass foobared/requirepass Huawei@123/p&#x27; 1.txt<br><br>sed -n &#x27;s/bind 127.0.0.1/#bind 127.0.0.1/p&#x27; 1.txt<br><br>sed -n &#x27;s/bind 127.0.0.1/#bind 127.0.0.1/p&#x27; 1.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE DATABASE `data_waiter` CHARACTER SET &#x27;utf8&#x27; COLLATE &#x27;utf8_general_ci&#x27;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>容器化技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器化</tag>
      
      <tag>Docker</tag>
      
      <tag>Mysql</tag>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(四)容器化实战--eureka改造</title>
    <link href="/2021/06/04/containerization4-eureka/"/>
    <url>/2021/06/04/containerization4-eureka/</url>
    
    <content type="html"><![CDATA[<h3 id="本章我们主要解决3个问题"><a href="#本章我们主要解决3个问题" class="headerlink" title="本章我们主要解决3个问题"></a>本章我们主要解决3个问题</h3><ul><li><p><strong>docker 镜像私仓的搭建</strong></p><p>上文提到，我们的源码直接推到dockerhub公网仓上是不安全的，我们需要一个私仓来放置我们的镜像，让k8s使用私仓各个版本的镜像去编排、发布微服务。如果在容器化的实践中，已经有了镜像仓库，那么这个步骤可以省略，在k8s的资源文件、及推送镜像的步骤当中，自行把本文提到的私仓地址替换为对应的仓库地址即可。</p></li><li><p><strong>registry 、微服务集群无法互相注册。</strong></p><p>原因为POD的IP不是固定的，随着每次Deployment、StatefulSet、Service的销毁、更新、回滚等，都会生成新的POD及IP，那么我们把IP写死在eureka以及微服务的配置文件中里肯定就无法寻址与路由了。k8s了Service的设计其实是用来提供类似eureka的功能的，但是由于本次改造时间有限，如果改动微服务架构，那么工作量太大，因此我们先继续沿用之前的微服务架构，在后面可以继续优化为。一种比较好的实践是k8s+SpringBoot+RPC调用的架构。</p></li><li><p><strong>registry服务的状态问题。</strong><br>registry目前仍然是无状态的，虽然我们使用了StatefulSet，但是并没有对他的持久化策略进行设置，我们的微服务日志需要保存在一个固定的卷，与POD的生命周期解耦。这个K8s也有对应的功能支持，我们在这个章节把这个问题解决。</p></li></ul><hr><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>首先我们来搭建一个docker私仓</p><blockquote><p>这里采用Docker提供的现成解决方案–Docker Registry</p><p>官方文档：<a href="https://docs.docker.com/registry/">https://docs.docker.com/registry/</a></p></blockquote><p>我们这里使用master01节点来搭建，这里我们就不做HA了。有兴趣的同学可以自己研究。</p><h4 id="1、-获取registry镜像"><a href="#1、-获取registry镜像" class="headerlink" title="1、    获取registry镜像"></a>1、    获取registry镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 docker]# docker pull registry:2<br></code></pre></td></tr></table></figure><h4 id="2、-运行registry容器"><a href="#2、-运行registry容器" class="headerlink" title="2、    运行registry容器"></a>2、    运行registry容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@dockerA ~]# docker run  -itd --name registry --restart=always  -p 5000:5000 -v /opt/registry:/var/lib/registry registry:2<br><br>//创建一个registry容器来运行registry服务；<br>//-p：端口映射（前面是宿主机端口：后面是容器暴露的端口）；<br>//-v：挂载目录（前面是宿主机的目录：后面的是容器的目录）自动创建宿主机的目录；<br>//--restart=always：随docker服务的启动而启动！<br></code></pre></td></tr></table></figure><h4 id="3、-验证"><a href="#3、-验证" class="headerlink" title="3、    验证"></a>3、    验证</h4><p>往私仓上推送镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">按照规则重命名要推送的镜像，</span><br><span class="hljs-meta">#</span><span class="bash">注：私有仓库镜像的命名规则：192.168.45.129:5000/XXX（宿主机的IP:5000端口/镜像名称:版本）</span><br>[root@master01 docker]# docker tag nginx:latest 192.168.60.128:5000/my_nginx:1.0<br><span class="hljs-meta">#</span><span class="bash">推送</span><br>[root@master01 docker]# docker push 192.168.60.128:5000/my_nginx<br><span class="hljs-meta">#</span><span class="bash">查看私藏镜像清单</span><br>[root@master01 docker]# curl -XGET http://192.168.60.128:5000/v2/_catalog<br>&#123;&quot;repositories&quot;:[&quot;my_hello&quot;,&quot;my_nginx&quot;]&#125;<br></code></pre></td></tr></table></figure><p>在其他客户端下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@node02 ~]# docker pull 192.168.60.128:5000/my_nginx<br>Using default tag: latest<br>Error response from daemon: Get https://192.168.60.128:5000/v2/: http: server gave HTTP response to HTTPS client<br><span class="hljs-meta">#</span><span class="bash">报错https请求错误，设置跳过https验证</span><br>[root@master01 docker]# cat /etc/docker/daemon.json<br>&#123;<br>  &quot;insecure-registries&quot;:[&quot;192.168.60.128:5000&quot;],<br>  &quot;registry-mirrors&quot;: [&quot;http://192.168.60.128:5000&quot;],<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;log-driver&quot;: &quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;<br>    &quot;max-size&quot;: &quot;100m&quot;<br>  &#125;,<br>  &quot;storage-driver&quot;: &quot;overlay2&quot;<br>&#125;<br>[root@node02 ~]# systemctl daemon-reload &amp;&amp; systemctl restart docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">成功拉取</span><br>[root@node02 ~]# docker pull 192.168.60.128:5000/my_nginx:1.0<br>1.0: Pulling from my_nginx<br>Digest: sha256:61191087790c31e43eb37caa10de1135b002f10c09fdda7fa8a5989db74033aa<br>Status: Downloaded newer image for 192.168.60.128:5000/my_nginx:1.0<br></code></pre></td></tr></table></figure><h4 id="4、-如何删除Docker-Registry"><a href="#4、-如何删除Docker-Registry" class="headerlink" title="4、    如何删除Docker Registry"></a>4、    如何删除Docker Registry</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 docker]# docker container stop registry &amp;&amp; docker container rm -v registry<br>registry<br></code></pre></td></tr></table></figure><hr><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>对于一般的后端微服务来说，在k8s中同时起多个相同的服务来做负载均衡，只需要简单的修改deployment的replicas，增加pod数量，然后通过对外暴露一个service来代理这些pod。</p><p>而对于eureka来说，要实现eureka的高可用，那就不是修改replicas这么方便了。由于部署的多个eureka之间需要将自己注册到彼此，因此要做一些特殊改动。</p><p>主要是用到了StatefulSet和headless service这两个k8s对象</p><h4 id="StatefulSet、Headless-Service简介"><a href="#StatefulSet、Headless-Service简介" class="headerlink" title="StatefulSet、Headless Service简介"></a>StatefulSet、Headless Service简介</h4><h5 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h5><p>StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括</p><p>稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现</p><p>稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有Cluster IP的Service）来实现</p><p>有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0到N-1，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态），基于init containers来实现</p><p>有序收缩，有序删除（即从N-1到0）</p><p>StatefulSet中每个Pod的DNS格式为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">statefulSetName-&#123;<span class="hljs-number">0.</span>.N<span class="hljs-number">-1</span>&#125;.serviceName.<span class="hljs-keyword">namespace</span>.svc.cluster.local<br></code></pre></td></tr></table></figure><blockquote><p>serviceName为Headless Service的名字<br>0..N-1为Pod所在的序号，从0开始到N-1<br>statefulSetName为StatefulSet的名字<br>namespace为服务所在的namespace，Headless Service和StatefulSet必须在相同的namespace<br>cluster.local为Cluster Domain</p></blockquote><h5 id="Headless-Service"><a href="#Headless-Service" class="headerlink" title="Headless Service"></a>Headless Service</h5><p>Headless Service 和普通service的一个显著的区别是，Headless Service的对应的每一个Endpoints，即每一个Pod，都会有对应的DNS域名<br> 例如：我们可以用过这种域名来访问某个具体的pod：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">statefulSetName-<span class="hljs-number">0</span><span class="hljs-selector-class">.serviceName</span><span class="hljs-selector-class">.namespace</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span><br></code></pre></td></tr></table></figure><p>在实际使用中，将service的clusterIP设置成None，就表明这个service是一个Headless Service。</p><h5 id="StatefulSet和Headless-Service的结合"><a href="#StatefulSet和Headless-Service的结合" class="headerlink" title="StatefulSet和Headless Service的结合"></a>StatefulSet和Headless Service的结合</h5><p>通过 StatefulSet，我们得到了一些列pod，每个pod的name为statefulSetName-{0..N-1}，<br> 加入我们创建了一个名称叫eureka的StatefulSet，并且设置replicas =3，那么部署到k8s后，k8s会为我们生成三个名称依次为eureka-0，eureka-1，eureka-2的pod。<br> 通过Headless Service，我们可以通过pod名称来访问某个pod，</p><p>例如，我们在namespace=test的命名空间下创建了一个名称为register-server的service，并且关联了之前StatefulSet创建的pod，那么我们可以在集群内任意地方<br> 通过eureka-0.register-server.test.svc.cluster.local这个域名访问到eureka-0这个pod。</p><h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p>有了前面的基础，现在部署eureka集群的方式就逐渐清晰了。</p><p>首先明确部署eureka的关键点：需要让每个eureka注册到另外的eureka上。<br> 也就是eureka.client.serviceUrl.defaultZone这个配置，是一组eureka的地址。<br> 通过StatefulSet，我们可以明确知道生成的每个eureka的名称，<br> 通过Headless Service，我们又可以访问到每个eureka，所以eureka.client.serviceUrl.defaultZone的值就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;http://registry-0.registry-service:8022/eureka,http://registry-0.registry-service:8022/eureka&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>由于这两个个pod在同一个命名空间内，可以省略.namespace.svc.cluster.local</p></blockquote><p>有个这个配置，那么我们部署StatefulSet，和Headless Service<br> 那么我们能基本能得到一个可用的eureka集群<br> 除了会有以下问题：<br> 红框中的可用副本（available-replicas）会出现在不可用unavailable-replicas中</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104173002335.png"></p><p>原因是我们默认是通过ip的方式来注册eureka（eureka.instance.prefer-ip-address配置默认为true），但是eureka的注册地址又是域名的形式，两者不一致。<br> 要解决这个问题，还需做一些额外的配置。</p><p>1.在application.yaml中，将eureka.instance.prefer-ip-address设置成false。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">eureka:<br>    instance:<br>       prefer-ip-address: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>2.registry-sts.yml中，增加环境变量配置，将pod的名称绑定到环境变量</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">...</span>    <br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">registry</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.60</span><span class="hljs-number">.128</span><span class="hljs-string">:5000/registry:1.0.0</span> <br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8022</span><br>          <span class="hljs-attr">env:</span> <span class="hljs-comment"># 环境变量设置</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">EUREKA_URL_LIST</span> <br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;http://registry-0.registry-service:8022/eureka,http://registry-0.registry-service:8022/eureka&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">REGISTRY_PORT</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">8022</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">EUREKA_INSTANCE_HOSTNAME</span> <span class="hljs-comment">#环境变量，这个变量在我们项目的配置文件中有配置，作用是指定注册到eureka集群中的hostname</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;MY_POD_NAME&#125;.registry-service</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_NODE_NAME</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">spec.nodeName</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAMESPACE</span> <span class="hljs-comment"># POD当前命名空间</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_IP</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">status.podIP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_IN_SERVICE_NAME</span> <span class="hljs-comment"># 因为pod 通过域名互相访问，需要使用headless 服务名称</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">registry-service</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">EUREKA_APPLICATION_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;registry&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">EUREKA_REPLICAS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>3.在application.yml中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;EUREKA_APPLICATION_NAME:registry&#125;</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;REGISTRY_PORT:8022&#125;</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">$&#123;EUREKA_URL_LIST:http://localhost:8022/eureka&#125;</span> <span class="hljs-comment"># 指定服务中心 eureka server的地址</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-string">$&#123;BOOL_REGISTER:true&#125;</span> <span class="hljs-comment"># 是否把服务中心本身当做eureka client 注册。默认为true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-string">$&#123;BOOL_FETCH:true&#125;</span> <span class="hljs-comment"># 是否拉取 eureka server 的注册信息。 默认为true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">$&#123;MY_POD_NAME:peer1&#125;</span> <span class="hljs-comment">#服务主机名</span><br>    <span class="hljs-attr">appname:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span> <span class="hljs-comment">#服务名称，默认为 unknow 这里直接取 spring.application.name</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#默认为true 表示为使用IP注册 可用副本（available-replicas）会出现在不可用unavailable-replicas中，因此设为false</span><br></code></pre></td></tr></table></figure><p>这里我们选择让镜像打包脚本把这个文件替换到registry的依赖目录下</p><p>把<code>application.yml</code>放在config目录下</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210630191106294.png"></p><p>修改打包脚本中的<code>modify_projectName_registry_service</code>函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">modify_projectName_registry_service()<br>&#123;<br>echo &quot;INFO&quot; &quot;begin modify registry service ...&quot;<br>    application=$&#123;CONF_PATH&#125;/application.yml<br>    application_common=$&#123;CONF_PATH&#125;/application-common.yml<br>    application_broker=$&#123;CONF_PATH&#125;/application-broker.yml<br>    application_path=$&#123;REGISTRY_USER_HOME&#125;/tomcat/webapps/$&#123;projectName_REGISTRY_SERVICE&#125;/WEB-INF/classes/<br><br>    \sudo cp -rf $&#123;application&#125; $&#123;application_path&#125;<br>    sudo cp $&#123;application_common&#125; $&#123;application_path&#125;<br>    sudo cp $&#123;application_broker&#125; $&#123;application_path&#125;<br>  file_application_yml=$&#123;REGISTRY_USER_HOME&#125;/tomcat/webapps/$&#123;projectName_REGISTRY_SERVICE&#125;/WEB-INF/classes/application.yml<br>    sudo su - $&#123;REGISTRY_USER&#125; &lt;&lt;EOF<br><br>    if [[ ! -f $&#123;file_application_yml&#125; ]];then<br>        echo &quot;[ file $&#123;file_application_yml&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>EOF<br>  sudo chown -R $&#123;REGISTRY_USER&#125;:$&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125;<br>echo &quot;INFO&quot; &quot;successful modify registry service ...&quot;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>重新打包镜像，重命名并推送至我们之前搭建好的私仓，注意版本要与我们资源文件中的设置一致。</p><p>k8s的registry资源配置文件<code>registry-sts.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>kind: Namespace<br>metadata:<br>  name: projectName<br>---<br><span class="hljs-meta">#</span><span class="bash"> 有状态pod，会自动根据metadata.name及实例数量生产xxx-0,xxx-1的pod</span><br>apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: registry<br>  namespace: projectName<br>spec:<br>  serviceName: registry-service<br>  replicas: 2<br>  selector:<br>    matchLabels:<br>      app: registry<br>  template:<br>    metadata:<br>      labels:<br>        app: registry<br>    spec:<br>      containers:<br>        - name: registry<br>          image: 192.168.60.128:5000/registry:1.0.0 # 配置镜像路径，也就是我们刚才push好的镜像<br>          imagePullPolicy: Always #配置总是拉取镜像，可以配置成如有本地有就不拉取。<br>          ports:<br>            - containerPort: 8022<br>          env: # 环境变量设置<br>            - name: MY_POD_NAME<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: metadata.name # 取值metadata.name，这里注意，statefulset类型的对象取到的是有-0,-1序号后缀的<br>            - name: EUREKA_URL_LIST #环境变量，这个变量在我们项目的配置文件中有配置,作用是配置eureka集群的所有地址，注意相同namespace底下使用dns访问时，不需要配置全路径（全路径为podname.headless-name.namespace.cluster.svc.local),只要到podname.headless-name<br>              value: &quot;http://registry-0.registry-service:8022/eureka,http://registry-0.registry-service:8022/eureka&quot;<br>            - name: REGISTRY_PORT<br>              value: 8022<br>            - name: EUREKA_INSTANCE_HOSTNAME #环境变量，这个变量在我们项目的配置文件中有配置，作用是指定注册到eureka集群中的hostname<br>              value: $&#123;MY_POD_NAME&#125;.registry-service<br>            - name: MY_NODE_NAME<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: spec.nodeName<br>            - name: MY_POD_NAMESPACE # POD当前命名空间<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: metadata.namespace<br>            - name: MY_POD_IP<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: status.podIP<br>            - name: MY_IN_SERVICE_NAME # 因为pod 通过域名互相访问，需要使用headless 服务名称<br>              value: registry-service<br>            - name: EUREKA_APPLICATION_NAME<br>              value: &quot;registry&quot;<br>            - name: EUREKA_REPLICAS<br>              value: &quot;3&quot;<br>  podManagementPolicy: &quot;Parallel&quot; # 以并行方式创建pod，默认是串行的<br>---<br><span class="hljs-meta">#</span><span class="bash"> file name eureka.yaml</span><br><span class="hljs-meta">#</span><span class="bash"> headless service</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: registry-service<br>  namespace: projectName<br>  labels:<br>    app: registry<br>spec:<br>  clusterIP: None<br>  ports:<br>    - port: 8022<br>      name: registry-svc-port<br>      targetPort: 8022<br>  selector:<br>    app: registry<br></code></pre></td></tr></table></figure><p>执行 kubectl create命令后，便可以得到一个eureka集群。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]# kubectl create -f registry-sts.yml<br>namespace/projectName created<br>statefulset.apps/registry created<br>service/registry-service created<br></code></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">可以看到我们2个POD都是健康状态了</span><br>[root@master01 k8s-projectName]# kubectl get pods -n projectName<br>NAME                   READY   STATUS    RESTARTS   AGE<br>registry-0   1/1     Running   0          7h37m<br>registry-1   1/1     Running   0          7h37m<br><span class="hljs-meta">#</span><span class="bash">进入任意POD 查看一下eureka portal</span><br>[root@master01 k8s-projectName]# kubectl exec -it registry-0 -n projectName /bin/bash<br>kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.<br>[registry@registry-0 /]$ curl localhost:8022<br>...<br>        &lt;tbody&gt;<br>              &lt;tr&gt;<br>                &lt;td&gt;&lt;b&gt;REGISTRY&lt;/b&gt;&lt;/td&gt;<br>                &lt;td&gt;<br>                    &lt;b&gt;n/a&lt;/b&gt; (2)<br>                &lt;/td&gt;<br>                &lt;td&gt;<br>                    &lt;b&gt;&lt;/b&gt; (2)<br>                &lt;/td&gt;<br>                &lt;td&gt;<br>                    &lt;b&gt;UP&lt;/b&gt; (2) -<br>                        &lt;a href=&quot;http://registry-1.registry-service:8022/actuator/info&quot; target=&quot;_blank&quot;&gt;registry-1.registry-service.projectName.svc.cluster.local:registry:8022&lt;/a&gt;<br>,<br>                        &lt;a href=&quot;http://registry-0.registry-service:8022/actuator/info&quot; target=&quot;_blank&quot;&gt;registry-0.registry-service.projectName.svc.cluster.local:registry:8022&lt;/a&gt;<br><br>                &lt;/td&gt;<br>              &lt;/tr&gt;<br><br>        &lt;/tbody&gt;<br>      &lt;/table&gt;<br>...<br></code></pre></td></tr></table></figure><h5 id="可以看到我们两个eureka实例已经相互注册了，那么微服务的注册功能我们后面还需要对微服务进行微调。"><a href="#可以看到我们两个eureka实例已经相互注册了，那么微服务的注册功能我们后面还需要对微服务进行微调。" class="headerlink" title="可以看到我们两个eureka实例已经相互注册了，那么微服务的注册功能我们后面还需要对微服务进行微调。"></a>可以看到我们两个eureka实例已经相互注册了，那么微服务的注册功能我们后面还需要对微服务进行微调。</h5><h4 id="微服务注册"><a href="#微服务注册" class="headerlink" title="微服务注册"></a>微服务注册</h4><p>将一般的微服务注册到eureka集群中，可以通过eureka的service来访问eureka，即：将eureka.client.serviceUrl.defaultZone设置成register-server.test.svc.cluster.local，使用了k8s的service负载均衡，将服务注册到任意一个活着的eureka上，然后eureka集群内部会做同步，最终注册到eureka集群内部所有eureka上</p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[registry@registry-0 logs]$ cat catalina.log<br>2021-06-30 03:44:59,768 [main] WARN  org.apache.catalina.security.SecurityListener- No umask setting was found in system property [org.apache.catalina.security.SecurityListener.UMASK]. However, it appears Tomcat is running on a platform that supports umask. The system property is typically set in CATALINA_HOME/bin/catalina.sh. The Lifecycle listener org.apache.catalina.security.SecurityListener (usually configured in CATALINA_BASE/conf/server.xml) expects a umask at least as restrictive as [0027]<br>2021-06-30 03:44:59,770 [main] INFO  org.apache.catalina.core.AprLifecycleListener- The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib<br>2021-06-30 03:45:00,506 [main] INFO  org.apache.coyote.http11.Http11NioProtocol- Initializing ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-06-30 03:45:00,554 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool- Using a shared selector for servlet write/read<br>2021-06-30 03:45:00,561 [main] INFO  org.apache.catalina.startup.Catalina- Initialization processed in 2475 ms<br>2021-06-30 03:45:00,603 [main] INFO  org.apache.catalina.core.StandardService- Starting service Catalina<br>2021-06-30 03:45:00,603 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet Engine:<br>2021-06-30 03:45:02,199 [localhost-startStop-1] WARN  org.apache.catalina.startup.ContextConfig- catalina annotation was enabled<br>2021-06-30 03:45:58,222 [main] INFO  org.apache.coyote.http11.Http11NioProtocol- Starting ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-06-30 03:45:58,266 [main] INFO  org.apache.catalina.startup.Catalina- Server startup in 57704 ms<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20210713095957693.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>kind: Service<br>metadata:<br>  name: registry-service-o<br>  namespace: projectName<br>  labels:<br>    app: registry<br>spec:<br>  type: NodePort<br>  ports:<br>    - port: 8022<br>      name: registry-svc-port<br>      targetPort: 8022<br>      nodePort: 30022<br>  selector:<br>    app: registry<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]# kubectl get svc -A<br>...<br>projectName              registry-service            ClusterIP   None          &lt;none&gt;        8022/TCP                 16h<br>projectName              registry-service-o          NodePort    10.1.42.201   &lt;none&gt;        8022:30022/TCP           6m33s<br><br></code></pre></td></tr></table></figure><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><blockquote><p>k8s有几种容器持久化方案，这里我们使用的是基于nfs的PV/PVC，其余的方案这里暂时不讨论了。</p><p>这块我们放在K8s里面介绍，链接待更新…</p></blockquote><h4 id="安装NFS"><a href="#安装NFS" class="headerlink" title="安装NFS"></a>安装NFS</h4><p>在作为NFS服务的节点执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum -y install nfs-utils  rpcbind<br></code></pre></td></tr></table></figure><h4 id="创建共享目录"><a href="#创建共享目录" class="headerlink" title="创建共享目录"></a>创建共享目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir /nfsdata<br></code></pre></td></tr></table></figure><h4 id="创建共享目录的权限"><a href="#创建共享目录的权限" class="headerlink" title="创建共享目录的权限"></a><strong>创建共享目录的权限</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# vi /etc/exports<br>/nfsdata *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><h4 id="开启nfs和rpcbind"><a href="#开启nfs和rpcbind" class="headerlink" title="开启nfs和rpcbind"></a>开启nfs和rpcbind</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# systemctl start nfs-server.service <br>[root@master ~]# systemctl start rpcbind<br></code></pre></td></tr></table></figure><h4 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# showmount -e<br>Export list for localhost.localdomain:<br>/nfsdata *<br></code></pre></td></tr></table></figure><h4 id="在master-和其他节点执行"><a href="#在master-和其他节点执行" class="headerlink" title="在master 和其他节点执行"></a>在master 和其他节点执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y nfs-utils<br></code></pre></td></tr></table></figure><h4 id="设置tomcat的日志输出路径"><a href="#设置tomcat的日志输出路径" class="headerlink" title="设置tomcat的日志输出路径"></a>设置tomcat的日志输出路径</h4><p>更改tomcat的日志输出格式通过pod名和pod命名空间变量，唯一标识输出文件名。</p><p>给所有的log前缀加上 <code>$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs xml">[vincent@node02 conf]$ cat log4j.xml<br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">log4j</span>:configuration <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&#x27;http://jakarta.apache.org/log4j/&#x27;</span> &gt;</span><br><br>        <span class="hljs-comment">&lt;!--  tomcat log--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CATALINA&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.RollingFileAppenderMod&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_catalina.log&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d [%t] %-5p %c- %m%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STD_OUT_REDIRECTOR&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.LazyStdOutRollingFileAppender&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">errorHandler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.CatalinaErrorhandler&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_catalina.out&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d [%t] %-5p %m%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOCALHOST&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.RollingFileAppenderMod&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_localhost.log&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d [%t] %-5p %c- %m%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d %n%p: %m%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SWITCHABLE_CONSOLE_APPENDER&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.SwitchableConsoleAppender&quot;</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accesslog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.RollingFileAppenderMod&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_localhost_access.log&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d [%t] %-5p %c- %m%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  DBPool log (Custom Appender)--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dbpool&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.LazyRollingFileAppenderMod&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ModuleCheckerClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.huawei.bme.dbconnector.dbpool.PoolDataSource&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/dbpool/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_dbpool.log&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%-5p|%t|JTA &gt; %m (%l)%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  xa transaction recovery log (Custom Appender)--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xa_transaction_recovery&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.RollingFileAppenderMod&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/dbpool/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_xa_transaction.log&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%-5p|%t|JTA &gt; %m (%l)%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  Mbean log--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mbTool&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.RollingFileAppenderMod&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/mbeanTool/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_mbeanTool.log&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%-5p|%t|MBeanTool &gt; %m (%l)%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>        <span class="hljs-comment">&lt;!--  monitor log--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;monitor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.huawei.openas.common.log.appender.RollingFileAppenderMod&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs/monitor/$&#123;my.pod.name&#125;_$&#123;my.pod.namespace&#125;_monitor.log&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxFileSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MaxBackupIndex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%-5p|%t|Monitor &gt; %m (%l)%n&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  sessionkeeper log--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;appender name=&quot;sessionkeeper&quot; class=&quot;org.apache.log4j.RollingFileAppender&quot;&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;File&quot; value=&quot;$&#123;catalina.base&#125;/logs/sessionkeeper/sessionkeeper.log&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;Append&quot; value=&quot;true&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;MaxFileSize&quot; value=&quot;10MB&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;MaxBackupIndex&quot; value=&quot;10&quot; /&gt;</span><br><span class="hljs-comment">                &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="hljs-comment">                        &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%-5p|%t|Monitor &gt; %m (%l)%n&quot; /&gt;</span><br><span class="hljs-comment">                &lt;/layout&gt;</span><br><span class="hljs-comment">        &lt;/appender&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  dcs log--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;appender name=&quot;dcs&quot; class=&quot;org.apache.log4j.RollingFileAppender&quot;&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;File&quot; value=&quot;$&#123;catalina.base&#125;/logs/dcs/dcs.log&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;Append&quot; value=&quot;true&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;MaxFileSize&quot; value=&quot;10MB&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;MaxBackupIndex&quot; value=&quot;10&quot; /&gt;</span><br><span class="hljs-comment">                &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="hljs-comment">                        &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%-5p|%t|Monitor &gt; %m (%l)%n&quot; /&gt;</span><br><span class="hljs-comment">                &lt;/layout&gt;</span><br><span class="hljs-comment">        &lt;/appender&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--  coherence log--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;appender name=&quot;coherenceMonitor&quot; class=&quot;org.apache.log4j.RollingFileAppender&quot;&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;File&quot; value=&quot;$&#123;catalina.base&#125;/logs/coherence/coherence.log&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;Append&quot; value=&quot;true&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;MaxFileSize&quot; value=&quot;10MB&quot; /&gt;</span><br><span class="hljs-comment">                &lt;param name=&quot;MaxBackupIndex&quot; value=&quot;10&quot; /&gt;</span><br><span class="hljs-comment">                &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="hljs-comment">                        &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%-5p|%t|Monitor &gt; %m (%l)%n&quot; /&gt;</span><br><span class="hljs-comment">                &lt;/layout&gt;</span><br><span class="hljs-comment">        &lt;/appender&gt;--&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>通过容器传入的变量在tomcat中并不能直接使用,需要在tomcat的启动脚本中，在java的启动命令中加上-D选项。找到所有有-Dcatalina.base=”&quot;$CATALINA_BASE&quot;“ 的地方加上</p><p><code>-Dmy.pod.name=&quot;$MY_POD_NAME&quot; -Dmy.pod.namespace=&quot;$MY_POD_NAMESPACE&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">...<br><span class="hljs-meta">#</span><span class="bash">例如</span><br>elif [ &quot;$1&quot; = &quot;configtest&quot; ] ; then<br>    JAVA_OPTS=&quot;$JAVA_OPTS &quot;-Dopenas.catalina.out.log.file.control=off<br>    eval &quot;\&quot;$_RUNJAVA\&quot;&quot; $JAVA_OPTS \<br>      -D$ENDORSED_PROP=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; \<br>      -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \<br>      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \<br>      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \<br>      -Dmy.pod.name=&quot;$MY_POD_NAME&quot; \<br>      -Dmy.pod.namespace=&quot;$MY_POD_NAMESPACE&quot; \<br><br>...<br></code></pre></td></tr></table></figure><h4 id="修改构建脚本"><a href="#修改构建脚本" class="headerlink" title="修改构建脚本"></a>修改构建脚本</h4><p>将<code>catalina.sh</code>与<code>log4j.xml</code>文件夹添加到dockerfile根目录下的config目录</p><p>在之前的镜像安装脚本<code>install_projectName_registry.sh</code>中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ...<br><span class="hljs-meta">  #</span><span class="bash">copy log4j.xml to user home openas config</span><br>    sudo cp $&#123;CONF_PATH&#125;/log4j.xml $&#123;USER_HOME&#125;/tomcat/conf<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ cp $&#123;CONF_PATH&#125;/web.xml $&#123;USER_HOME&#125;/tomcat/conf ] failed&quot;<br>        return 1<br>    fi<br><br>    #copy catalina.sh to user home openas bin<br>    sudo cp $&#123;CONF_PATH&#125;/catalina.sh $&#123;USER_HOME&#125;/tomcat/bin<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ cp $&#123;CONF_PATH&#125;/web.xml $&#123;USER_HOME&#125;/tomcat/bin ] failed&quot;<br>        return 1<br>    fi<br>...<br></code></pre></td></tr></table></figure><p>为了方便，把push动作也放到镜像打包脚本<code>build_registry_image.sh</code>中,镜像版本和URL解耦为变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">pushdImage()&#123;<br><br>    docker tag $&#123;IMAGE_NAME&#125;:$&#123;IMAGE_VERSION&#125; $&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;:$&#123;IMAGE_VERSION&#125; || return 1<br><br>    if [[ $? -ne 0 ]];then<br>       LOG &quot;ERROR&quot; &quot;$&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;:$&#123;IMAGE_VERSION&#125;Image tag  failed&quot;<br>        return 1<br>    fi<br><br>    docker push $&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;:$&#123;IMAGE_VERSION&#125; || return 1<br><br>    if [[ $? -ne 0 ]];then<br>        LOG &quot;ERROR&quot; &quot;$&#123;DOCKER_REGISTRY_URL&#125;/$&#123;IMAGE_NAME&#125;:$&#123;IMAGE_VERSION&#125;Image push  failed&quot;<br>        return 1<br>    fi<br><br>&#125;<br>...<br>    pushdImage || return 1<br><br>    echo &quot;=======================================================================&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新打包并push镜像</p><h4 id="修改k8s资源文件"><a href="#修改k8s资源文件" class="headerlink" title="修改k8s资源文件"></a>修改k8s资源文件</h4><p>为registry服务添加PVC和PV，这里我们抽象出一个公共资源文件<code>k8s-env.yml</code>用于准备命名空间和pv等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>kind: Namespace<br>metadata:<br>  name: projectName<br>---<br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: registry-nfs-pv<br>  namespace: projectName<br>  labels:<br>    pv: registry-nfs-pv<br>spec:<br>  capacity: #pv容量的大小<br>    storage: 1024Mi<br>  accessModes: #访问pv的模式<br>    - ReadWriteMany<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs  #持久资源的类型<br>  nfs:<br>    # FIXME: use the right IP<br>    server: 192.168.60.144<br>    path: &quot;/nfsdata/registry/tomcat/&quot;<br>---<br>apiVersion: v1 #这里先定义好core的pv，后面我们会用到<br>kind: PersistentVolume<br>metadata:<br>  name: core-nfs-pv<br>  namespace: projectName<br>  labels:<br>    pv: core-nfs-pv<br>spec:<br>  capacity: #pv容量的大小<br>    storage: 1024Mi<br>  accessModes: #访问pv的模式<br>    - ReadWriteMany<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    # FIXME: use the right IP<br>    server: 192.168.60.144<br>    path: &quot;/nfsdata/core/&quot;<br></code></pre></td></tr></table></figure><p>在<code>regitsry-sts.yml</code>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs shell">kind: PersistentVolumeClaim  #pvc <br>apiVersion: v1<br>metadata:<br>  name: registry-nfs-pvc<br>  namespace: projectName<br>spec:<br>  accessModes:<br>    - ReadWriteMany<br>  resources:<br>    requests:<br>      storage: 1000Mi   #不能大于绑定pv的容量<br>  storageClassName: nfs #需要和pv的sc类型一致，否则会绑定失败<br>  selector:<br>    matchLabels:<br>      pv: registry-nfs-pv<br>---<br><span class="hljs-meta">#</span><span class="bash"> 有状态pod，会自动根据metadata.name及实例数量生产xxx-0,xxx-1的pod</span><br>apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: registry<br>  namespace: projectName<br>spec:<br>  serviceName: registry-service<br>  replicas: 2<br>  selector:<br>    matchLabels:<br>      app: registry<br>  template:<br>    metadata:<br>      labels:<br>        app: registry<br>    spec:<br>      containers:<br>        - name: registry<br>          image: 192.168.60.128:5000/registry:1.0.0 # 配置镜像路径，也就是我们刚才push好的镜像<br>          imagePullPolicy: Always<br>          ports:<br>            - containerPort: 8022<br>          volumeMounts:<br>            - mountPath: /data01/registry/tomcat/logs<br>              name: registry-data<br>          env: # 环境变量设置<br>            - name: MY_POD_NAME<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: metadata.name # 取值metadata.name，这里注意，statefulset类型的对象取到的是有-0,-1序号后缀的<br>            - name: EUREKA_URL_LIST #环境变量，这个变量在我们项目的配置文件中有配置,作用是配置eureka集群的所有地址，注意相同namespace底下使用dns访问时，不需要配置全路径（全路径为podname.headless-name.namespace.cluster.svc.local),只要到podname.headless-name<br>              value: &quot;http://registry-0.registry-service:8022/eureka,http://registry-0.registry-service:8022/eureka&quot;<br>            - name: REGISTRY_PORT<br>              value: &quot;8022&quot;<br>            - name: EUREKA_INSTANCE_HOSTNAME #环境变量，这个变量在我们项目的配置文件中有配置，作用是指定注册到eureka集群中的hostname<br>              value: $&#123;MY_POD_NAME&#125;.registry-service<br>            - name: MY_NODE_NAME<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: spec.nodeName<br>            - name: MY_POD_NAMESPACE # POD当前命名空间<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: metadata.namespace<br>            - name: MY_POD_IP<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: status.podIP<br>            - name: MY_IN_SERVICE_NAME # 因为pod 通过域名互相访问，需要使用headless 服务名称<br>              value: registry-service<br>            - name: EUREKA_APPLICATION_NAME<br>              value: &quot;registry&quot;<br>            - name: EUREKA_REPLICAS<br>              value: &quot;2&quot;<br>      volumes:<br>        - name: registry-data<br>          persistentVolumeClaim:<br>            claimName: registry-nfs-pvc<br>  podManagementPolicy: &quot;Parallel&quot; # 以并行方式创建pod，默认是串行的<br>---<br><span class="hljs-meta">#</span><span class="bash"> file name eureka.yaml</span><br><span class="hljs-meta">#</span><span class="bash"> headless service</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: registry-service<br>  namespace: projectName<br>  labels:<br>    app: registry<br>spec:<br>  clusterIP: None<br>  ports:<br>    - port: 8022<br>      name: registry-svc-port<br>      targetPort: 8022<br>  selector:<br>    app: registry<br><br></code></pre></td></tr></table></figure><p>清除全部资源并重新创建k8s资源，注意依赖关系先删除<code>registry-sts.yml</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]kubectl delete -f registry-sts.yml<br>[root@master01 k8s-projectName]kubectl delete -f k8s-env.yml<br>[root@master01 k8s-projectName]kubectl create k8s-env.yml<br>[root@master01 k8s-projectName]kubectl create registry-sts.yml<br></code></pre></td></tr></table></figure><h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><h5 id="pv"><a href="#pv" class="headerlink" title="pv"></a>pv</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]# kubectl get pv -A<br>NAME                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                                  STORAGECLASS   REASON   AGE<br>core-nfs-pv       1Gi        RWX            Recycle          Available                                          nfs                     23m<br>registry-nfs-pv   1Gi        RWX            Recycle          Bound       projectName/registry-nfs-pvc   nfs                     23m<br>[root@master01 k8s-projectName]# kubectl describe pv/registry-nfs-pv -n projectName<br>Name:            registry-nfs-pv<br>Labels:          pv=registry-nfs-pv<br>Annotations:     pv.kubernetes.io/bound-by-controller: yes<br>Finalizers:      [kubernetes.io/pv-protection]<br>StorageClass:    nfs<br>Status:          Bound<br>Claim:           projectName/registry-nfs-pvc<br>Reclaim Policy:  Recycle<br>Access Modes:    RWX<br>VolumeMode:      Filesystem<br>Capacity:        1Gi<br>Node Affinity:   &lt;none&gt;<br>Message:<br>Source:<br>    Type:      NFS (an NFS mount that lasts the lifetime of a pod)<br>    Server:    192.168.60.144<br>    Path:      /nfsdata/registry/tomcat/<br>    ReadOnly:  false<br>Events:        &lt;none&gt;<br></code></pre></td></tr></table></figure><h5 id="pvc"><a href="#pvc" class="headerlink" title="pvc"></a>pvc</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]# kubectl get pvc -A<br>NAMESPACE   NAME                         STATUS   VOLUME                      CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>projectName   registry-nfs-pvc   Bound    registry-nfs-pv   1Gi        RWX            nfs            26m<br>[root@master01 k8s-projectName]# kubectl describe pvc/registry-nfs-pvc -n projectName<br>Name:          registry-nfs-pvc<br>Namespace:     projectName<br>StorageClass:  nfs<br>Status:        Bound<br>Volume:        registry-nfs-pv<br>Labels:        &lt;none&gt;<br>Annotations:   pv.kubernetes.io/bind-completed: yes<br>               pv.kubernetes.io/bound-by-controller: yes<br>Finalizers:    [kubernetes.io/pvc-protection]<br>Capacity:      1Gi<br>Access Modes:  RWX<br>VolumeMode:    Filesystem<br>Mounted By:    registry-0<br>               registry-1<br>Events:        &lt;none&gt;<br></code></pre></td></tr></table></figure><h5 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]# kubectl get pods -n projectName<br>NAME                   READY   STATUS    RESTARTS   AGE<br>registry-0   1/1     Running   0          22m<br>registry-1   1/1     Running   0          27m<br>[root@master01 k8s-projectName]# kubectl describe pods -n projectName<br>Name:         registry-0<br>Namespace:    projectName<br>Priority:     0<br>Node:         node01/192.168.60.129<br>Start Time:   Sat, 03 Jul 2021 04:25:30 -0400<br>Labels:       app=registry<br>              controller-revision-hash=registry-69fb95c8c6<br>              statefulset.kubernetes.io/pod-name=registry-0<br>Annotations:  &lt;none&gt;<br>Status:       Running<br>IP:           10.244.1.25<br>IPs:<br>  IP:           10.244.1.25<br>Controlled By:  StatefulSet/registry<br>Containers:<br>  registry:<br>    Container ID:   docker://1270c57122d4f9effa1e3aa494648942efe1ea050f5b9a51045bdb5d77da90d8<br>    Image:          192.168.60.128:5000/registry:1.0.0<br>    Image ID:       docker-pullable://192.168.60.128:5000/registry@sha256:385e3dffdb979469797150c41d537883c8271308c522208a41d81be6d854299e<br>    Port:           8022/TCP<br>    Host Port:      0/TCP<br>    State:          Running<br>      Started:      Sat, 03 Jul 2021 04:25:33 -0400<br>    Ready:          True<br>    Restart Count:  0<br>    Environment:<br>      MY_POD_NAME:               registry-0 (v1:metadata.name)<br>      EUREKA_URL_LIST:           http://registry-0.registry-service:8022/eureka,http://registry-0.registry-service:8022/eureka<br>      REGISTRY_PORT:             8022<br>      EUREKA_INSTANCE_HOSTNAME:  $&#123;MY_POD_NAME&#125;.registry-service<br>      MY_NODE_NAME:               (v1:spec.nodeName)<br>      MY_POD_NAMESPACE:          projectName (v1:metadata.namespace)<br>      MY_POD_IP:                  (v1:status.podIP)<br>      MY_IN_SERVICE_NAME:        registry-service<br>      EUREKA_APPLICATION_NAME:   registry<br>      EUREKA_REPLICAS:           2<br>    Mounts:<br>      /data01/registry/tomcat/logs from registry-data (rw)<br>      /var/run/secrets/kubernetes.io/serviceaccount from default-token-zrfkg (ro)<br>Conditions:<br>  Type              Status<br>  Initialized       True<br>  Ready             True<br>  ContainersReady   True<br>  PodScheduled      True<br>Volumes:<br>  registry-data:<br>    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)<br>    ClaimName:  registry-nfs-pvc<br>    ReadOnly:   false<br>  default-token-zrfkg:<br>    Type:        Secret (a volume populated by a Secret)<br>    SecretName:  default-token-zrfkg<br>    Optional:    false<br>QoS Class:       BestEffort<br>Node-Selectors:  &lt;none&gt;<br>Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s<br>                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s<br>Events:<br>  Type    Reason     Age   From               Message<br>  ----    ------     ----  ----               -------<br>  Normal  Scheduled  22m   default-scheduler  Successfully assigned projectName/registry-0 to node01<br>  Normal  Pulling    22m   kubelet            Pulling image &quot;192.168.60.128:5000/registry:1.0.0&quot;<br>  Normal  Pulled     22m   kubelet            Successfully pulled image &quot;192.168.60.128:5000/registry:1.0.0&quot; in 48.902535ms<br>  Normal  Created    22m   kubelet            Created container registry<br>  Normal  Started    22m   kubelet            Started container registry<br><br><br>Name:         registry-1<br>Namespace:    projectName<br>Priority:     0<br>Node:         node02/192.168.60.130<br>Start Time:   Sat, 03 Jul 2021 04:20:38 -0400<br>Labels:       app=registry<br>              controller-revision-hash=registry-69fb95c8c6<br>              statefulset.kubernetes.io/pod-name=registry-1<br>Annotations:  &lt;none&gt;<br>Status:       Running<br>IP:           10.244.2.19<br>IPs:<br>  IP:           10.244.2.19<br>Controlled By:  StatefulSet/registry<br>Containers:<br>  registry:<br>    Container ID:   docker://35ca2fd2a67d37b373c37de9ab7ae52bc91c4d1abab87ce3e3b99bc5a5d3bb1a<br>    Image:          192.168.60.128:5000/registry:1.0.0<br>    Image ID:       docker-pullable://192.168.60.128:5000/registry@sha256:385e3dffdb979469797150c41d537883c8271308c522208a41d81be6d854299e<br>    Port:           8022/TCP<br>    Host Port:      0/TCP<br>    State:          Running<br>      Started:      Sat, 03 Jul 2021 04:21:10 -0400<br>    Ready:          True<br>    Restart Count:  0<br>    Environment:<br>      MY_POD_NAME:               registry-1 (v1:metadata.name)<br>      EUREKA_URL_LIST:           http://registry-0.registry-service:8022/eureka,http://registry-0.registry-service:8022/eureka<br>      REGISTRY_PORT:             8022<br>      EUREKA_INSTANCE_HOSTNAME:  $&#123;MY_POD_NAME&#125;.registry-service<br>      MY_NODE_NAME:               (v1:spec.nodeName)<br>      MY_POD_NAMESPACE:          projectName (v1:metadata.namespace)<br>      MY_POD_IP:                  (v1:status.podIP)<br>      MY_IN_SERVICE_NAME:        registry-service<br>      EUREKA_APPLICATION_NAME:   registry<br>      EUREKA_REPLICAS:           2<br>    Mounts:<br>      /data01/registry/tomcat/logs from registry-data (rw)<br>      /var/run/secrets/kubernetes.io/serviceaccount from default-token-zrfkg (ro)<br>Conditions:<br>  Type              Status<br>  Initialized       True<br>  Ready             True<br>  ContainersReady   True<br>  PodScheduled      True<br>Volumes:<br>  registry-data:<br>    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)<br>    ClaimName:  registry-nfs-pvc<br>    ReadOnly:   false<br>  default-token-zrfkg:<br>    Type:        Secret (a volume populated by a Secret)<br>    SecretName:  default-token-zrfkg<br>    Optional:    false<br>QoS Class:       BestEffort<br>Node-Selectors:  &lt;none&gt;<br>Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s<br>                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s<br>Events:<br>  Type    Reason     Age   From               Message<br>  ----    ------     ----  ----               -------<br>  Normal  Scheduled  27m   default-scheduler  Successfully assigned projectName/registry-1 to node02<br>  Normal  Pulling    27m   kubelet            Pulling image &quot;192.168.60.128:5000/registry:1.0.0&quot;<br>  Normal  Pulled     27m   kubelet            Successfully pulled image &quot;192.168.60.128:5000/registry:1.0.0&quot; in 25.890524219s<br>  Normal  Created    27m   kubelet            Created container registry<br>  Normal  Started    27m   kubelet            Started container registry<br><br></code></pre></td></tr></table></figure><p>检查两个registry节点日志是否按照设定格式存入nfs服务器对应目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost tomcat]# pwd<br>/nfsdata/registry/tomcat<br>[root@localhost tomcat]# ll<br>total 76<br>drwxr-x---. 2 1000 1000   120 Jul  3 04:21 dbpool<br>drwxr-x---. 2 1000 1000   110 Jul  3 04:21 mbeanTool<br>drwxr-x---. 2 1000 1000   106 Jul  3 04:21 monitor<br>-rw-r-----. 1 1000 1000  3942 Jul  3 04:26 registry-0_projectName_catalina.log<br>-rw-r-----. 1 1000 1000 55446 Jul  3 04:51 registry-0_projectName_localhost_access.log<br>-rw-r-----. 1 1000 1000  1397 Jul  3 04:26 registry-0_projectName_localhost.log<br>-rw-r-----. 1 1000 1000  1722 Jul  3 04:22 registry-1_projectName_catalina.log<br>-rw-r-----. 1 1000 1000   211 Jul  3 04:22 registry-1_projectName_localhost_access.log<br>-rw-r-----. 1 1000 1000   351 Jul  3 04:21 registry-1_projectName_localhost.log<br></code></pre></td></tr></table></figure><p>可以看到已经日志已经与pod解耦了，我们使用<code>kubectl delete</code>命令模拟下pod挂掉的情况，看之前的日志是否能保留</p><p>我们先看下<code>registry-0</code>节点的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost tomcat]# cat registry-0_projectName_catalina.log<br>...<br>2021-07-03 08:25:35,412 [main] INFO  org.apache.coyote.http11.Http11NioProtocol- Initializing ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:25:35,437 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool- Using a shared selector for servlet write/read<br>2021-07-03 08:25:35,441 [main] INFO  org.apache.catalina.startup.Catalina- Initialization processed in 1308 ms<br>2021-07-03 08:25:35,468 [main] INFO  org.apache.catalina.core.StandardService- Starting service Catalina<br>2021-07-03 08:25:35,469 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet Engine:<br>2021-07-03 08:25:36,051 [localhost-startStop-1] WARN  org.apache.catalina.startup.ContextConfig- catalina annotation was enabled<br>2021-07-03 08:25:55,509 [main] INFO  org.apache.coyote.http11.Http11NioProtocol- Starting ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:25:55,535 [main] INFO  org.apache.catalina.startup.Catalina- Server startup in 20094 ms<br></code></pre></td></tr></table></figure><blockquote><p>这里我们意外发现了个小问题，节点上的时间还没有统一，这个放在后面解决</p></blockquote><p>我们delete一个节点，然后等待k8s重新拉起。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]# kubectl delete pod/registry-0 -n projectName<br>pod &quot;registry-0&quot; deleted<br>[root@master01 k8s-projectName]# kubectl get pods -n projectName<br>NAME                   READY   STATUS        RESTARTS   AGE<br>registry-0   0/1     Terminating   0          32m<br>registry-1   1/1     Running       0          37m<br>[root@master01 k8s-projectName]# kubectl get pods -n projectName<br>NAME                   READY   STATUS    RESTARTS   AGE<br>registry-0   1/1     Running   0          5s<br>registry-1   1/1     Running   0          37m<br><br></code></pre></td></tr></table></figure><p>nfs日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost tomcat]# cat registry-0_projectName_catalina.log<br>...<br>2021-07-03 08:25:35,412 [main] INFO  org.apache.coyote.http11.Http11NioProtocol- Initializing ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:25:35,437 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool- Using a shared selector for servlet write/read<br>2021-07-03 08:25:35,441 [main] INFO  org.apache.catalina.startup.Catalina- Initialization processed in 1308 ms<br>2021-07-03 08:25:35,468 [main] INFO  org.apache.catalina.core.StandardService- Starting service Catalina<br>2021-07-03 08:25:35,469 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet Engine:<br>2021-07-03 08:25:36,051 [localhost-startStop-1] WARN  org.apache.catalina.startup.ContextConfig- catalina annotation was enabled<br>2021-07-03 08:25:55,509 [main] INFO  org.apache.coyote.http11.Http11NioProtocol- Starting ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:25:55,535 [main] INFO  org.apache.catalina.startup.Catalina- Server startup in 20094 ms<br>2021-07-03 08:58:07,932 [Thread-12] INFO  org.apache.coyote.http11.Http11NioProtocol- Pausing ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:58:07,954 [Thread-12] INFO  org.apache.catalina.core.StandardService- Stopping service Catalina<br>2021-07-03 08:58:27,131 [Thread-12] INFO  org.apache.coyote.http11.Http11NioProtocol- Stopping ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:58:27,159 [Thread-12] INFO  org.apache.coyote.http11.Http11NioProtocol- Destroying ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:58:35,284 [main] WARN  org.apache.catalina.security.SecurityListener- No umask setting was found in system property [org.apache.catalina.security.SecurityListener.UMASK]. However, it appears Tomcat is running on a platform that supports umask. The system property is typically set in CATALINA_HOME/bin/catalina.sh. The Lifecycle listener org.apache.catalina.security.SecurityListener (usually configured in CATALINA_BASE/conf/server.xml) expects a umask at least as restrictive as [0027]<br>2021-07-03 08:58:35,286 [main] INFO  org.apache.catalina.core.AprLifecycleListener- The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib<br>2021-07-03 08:58:35,609 [main] INFO  org.apache.coyote.http11.Http11NioProtocol- Initializing ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-07-03 08:58:35,638 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool- Using a shared selector for servlet write/read<br>2021-07-03 08:58:35,641 [main] INFO  org.apache.catalina.startup.Catalina- Initialization processed in 1124 ms<br>2021-07-03 08:58:35,671 [main] INFO  org.apache.catalina.core.StandardService- Starting service Catalina<br>2021-07-03 08:58:35,672 [main] INFO  org.apache.catalina.core.StandardEngine- Starting Servlet Engine:<br>2021-07-03 08:58:36,261 [localhost-startStop-1] WARN  org.apache.catalina.startup.ContextConfig- catalina annotation was enabled<br></code></pre></td></tr></table></figure><p>可以看到，之前的日志并没有丢失，那么假如我们把pvc和pv也删除掉，日志会不会丢失呢？这里卖个关子，有兴趣的同学可以自己测试一下。</p><p>细心的同学可能会发现，我们的nfs是单点，那么如果考虑HA的话，我们还需要搭建nfs集群，nfs集群也有多种实现方式，限于篇幅，我们后面再讨论这个问题。</p><h3 id="OK，在下一章节中，我们继续改造其余的微服务。"><a href="#OK，在下一章节中，我们继续改造其余的微服务。" class="headerlink" title="OK，在下一章节中，我们继续改造其余的微服务。"></a>OK，在下一章节中，我们继续改造其余的微服务。</h3><blockquote><p>引用</p><p>k8s部署eureka集群 <a href="https://www.jianshu.com/p/a3829851a97d">https://www.jianshu.com/p/a3829851a97d</a></p><p>k8s存储方式的介绍及应用 <a href="https://blog.csdn.net/xgp666/article/details/107242598/">https://blog.csdn.net/xgp666/article/details/107242598/</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>容器化技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器化</tag>
      
      <tag>Docker</tag>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(三)容器化实战--eureka改造</title>
    <link href="/2021/06/04/containerization3-eureka/"/>
    <url>/2021/06/04/containerization3-eureka/</url>
    
    <content type="html"><![CDATA[<p>上面两节我们对docker与k8s已经有了一定的了解，那么我们基于知识上下文，来对微服务进行改造。</p><p>本小节我们以registry服务镜像改造作为起点，开始我们的容器化改造工作。路漫漫而修远兮，吾独上下而求索，与君共勉。</p><p>首先，为什么选用registry呢，因为它是一个eruka注册中心，结构相对简单，代码量少，不涉及数据库，不依赖其他服务，可以独立运行。</p><p>在改造之前，我们需要先考虑一些问题：</p><ul><li>dockerhub是公网仓库，往外网传输源码涉及信息安全，需要搭建docker私仓来存放我们的镜像。</li><li>registry目前的测试运行环境与容器环境有差异需要适配。</li><li>registry部署态中部署脚本进行了大量的配置性设置，需要配置到镜像当中。</li><li>registry中的服务注册发现目前是基于服务器IP去路由寻址的，在k8s集群中容器的IP是随着POD的生命周期而改变，如何保证当在任何一套物理环境部署、及部署之后registry本地IP随时可能发生改变的情况下，保证registry的功能不受影响。</li><li>k8s中的pod是无状态的，随着pod的销毁、弹性伸缩，registry的日志也会丢失，在多个registry实例同时产生和销毁的场景下，如何分别对它们 的日志进行保存，并保证彼此之间没有冲突。</li></ul><hr><p>那么我们一步步来</p><p>首先我的思路是自己在linux上安装一遍registry服务，看下过程中有哪些步骤是与正常的部署有区别的，把这些步骤写入到Dockefile中就能完成了。没想到一上来就掉进了坑里。</p><p>我们的安装包使用的是公司定制的安全加固版的tomcat和jdk，猜想一定和平时用的开源版有许多区别，所以一定要小心谨慎，否则出了问题再没有文档的情况下很难解决。</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/84912118cdf0bb1321e85eff1ac6c5ed_351x563.png@900-0-90-f.png"></p><p>在测试机器上安装了jdk和把OpenAS解压到home目录下tomcat文件夹下后用tomcat试着启动了一下，没有启动起来。提示报错是当前使用root用户登陆，猜测安全加固版不允许root账户执行。改为使用其他用户执行后此报错消失。接着一直报错umask当前值为0022，安全要求最低的umask值为0027。</p><blockquote><p>简单介绍下umask，就是unix系统中默认创建文件的最小值。linux中的权限可以用9个位数来表示 000 000 000 前三位是owner的读、写、执行权限，后6位分别是组、其他用户的对应权限，读写执行可以分别用4、2、1来表示，如果为1个文件设置所有用户都有读写执行权限，可以用chmod 777 文件名 来设置，7=4+2+1（读加写加执行）。如果当前用户的umask值是027，那么会默认减去对应的权限值，也就是上一条命令实际设置的文件权限是750，每个用户又可以设置自己的umask值。</p></blockquote><p>一番操作后设置了各种umask值还是不行，原来home目录下的tomcat文件夹与tomcat用户的默认文件夹同名了，linux中创建用户会默认在home文件夹下创建同名目录，其中./bashrc是用来给这个用户配置环境变量和其他配置，以此来达到用户隔离的作用。所以在解压tomcat的时候覆盖了tomcat用户的./bashrc文件，导致我们设置umask值没有生效。</p><p>真是让人哭笑不得，在其他文件夹下解压、用非root用户启动终于启动正常。</p><p>这里也让我发现，自己去摸索这个不熟悉的安全框架可能还要花费大量时间。</p><p>所以改变思路，我决定直接把所有安装脚本的内容研究清楚，再把这些逻辑写到镜像的制作文件Dockerfile中去，然后再写一个脚本执行docker build 就可以了。但是这样Dockerfile会变得又臭又长，不能忍受，必须解耦，复用。所以最终的方案是：</p><p>把构建需要的文件和脚本放到各自的目录下，再使用docker 的ADD 和COPY命令，把这些文件和脚本一股脑丢到容器中，让脚本把jdk、tomcat安装好、环境配置好，再把自己删了….后面环境有变，我们只需要更改同目录下的脚本即可，基本无须改动Dockerfile，完美。</p><p>这里省略了基础镜像centos7_jdk8的制作过程，只放一下dockerfile，制作基础镜像的目的是使用docker的优秀特性分层构建。这里就不展开了。</p><p><strong>基础镜像Dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#使用的基础镜像 暂时使用centos7开源，后期可更改，注意如无法访问公网，本地需要提前准备</span><br><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><span class="hljs-comment">#作者信息  姓名 邮箱</span><br><span class="hljs-comment">#MAINTAINER name &quot;xxxx@xxx.com&quot;</span><br><br><span class="hljs-comment">#安装命令工具（可选）</span><br><span class="hljs-keyword">RUN</span><span class="bash"> yum -y install unzip &amp;&amp; yum -y install sudo</span><br><br><span class="hljs-comment">#声明变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=/opt/JRE<br><span class="hljs-keyword">ENV</span> INSTALL_HOME=/opt/docker_install<br><span class="hljs-keyword">ENV</span> SCRIPT_NAME=install_jdk.sh<br><br><span class="hljs-comment">#创建安装目录</span><br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir -p /data01 &amp;&amp; mkdir -p <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span> &amp;&amp; mkdir -p <span class="hljs-variable">$&#123;JAVA_HOME&#125;</span></span><br><br><span class="hljs-comment">#复制安装脚本</span><br><span class="hljs-keyword">COPY</span><span class="bash"> <span class="hljs-variable">$&#123;SCRIPT_NAME&#125;</span> <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><span class="hljs-keyword">COPY</span><span class="bash"> java.policy <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><br><span class="hljs-comment">###############构建JDK层######################</span><br><span class="hljs-comment">#把当前目录下的jdk文件夹添加到镜像</span><br><span class="hljs-keyword">ADD</span><span class="bash"> jre-8u232-linux-x64.tar.gz <span class="hljs-variable">$&#123;JAVA_HOME&#125;</span></span><br><br><span class="hljs-comment">#运行安装脚本</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sh <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span>/<span class="hljs-variable">$&#123;SCRIPT_NAME&#125;</span></span><br><span class="hljs-comment">#删除安装目录</span><br><span class="hljs-keyword">RUN</span><span class="bash"> rm -rf <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><br><span class="hljs-comment">#Docker build命令参考：docker build -t centos7_hwjdk8 .</span><br></code></pre></td></tr></table></figure><p><strong>registry的Dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">######################################################</span><br><span class="hljs-comment">#</span><br><span class="hljs-keyword">FROM</span> centos7_hwjdk8<br><span class="hljs-comment">#作者信息  姓名 邮箱</span><br><span class="hljs-comment">#MAINTAINER name &quot;xxxx@xxx.com&quot;</span><br><span class="hljs-comment">#/data01/registry/tomcat/webapps/registry/</span><br><span class="hljs-comment">#声明变量</span><br><span class="hljs-keyword">ENV</span> INSTALL_HOME=/opt/docker_install<br><span class="hljs-keyword">ENV</span> SCRIPT_NAME=install_projectName_registry.sh<br><span class="hljs-keyword">ENV</span> REGISTRY_HOME=/data01/registry<br><span class="hljs-keyword">ENV</span> TOMCATPATH=$&#123;REGISTRY_HOME&#125;/tomcat<br><br><span class="hljs-comment">############构建tomcat&amp;应用层######################</span><br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir -p <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span>/config</span><br><span class="hljs-comment">#复制文件</span><br><span class="hljs-keyword">COPY</span><span class="bash"> OpenAS_Tomcat-7.zip <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><span class="hljs-keyword">COPY</span><span class="bash"> registry.war <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><span class="hljs-keyword">COPY</span><span class="bash"> <span class="hljs-variable">$&#123;SCRIPT_NAME&#125;</span> <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><span class="hljs-keyword">COPY</span><span class="bash"> config <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span>/config</span><br><span class="hljs-comment">#运行安装脚本</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sh <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span>/<span class="hljs-variable">$&#123;SCRIPT_NAME&#125;</span></span><br><br><span class="hljs-comment">#删除安装目录</span><br><span class="hljs-keyword">RUN</span><span class="bash"> rm -rf <span class="hljs-variable">$&#123;INSTALL_HOME&#125;</span></span><br><br><span class="hljs-comment">#启动tomcat</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8022</span><br><span class="hljs-keyword">USER</span> registry<br><span class="hljs-comment">#启动时运行tomcat</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/data01/registry/tomcat/bin/catalina.sh&quot;</span>,<span class="hljs-string">&quot;run&quot;</span>]</span><br><span class="hljs-comment">#docker build -t registry .</span><br></code></pre></td></tr></table></figure><p>在写脚本之前，我们需要对目前的部署脚本结构、实现有一个整体的了解。</p><p>首先我们来了解一下我们的部署脚本结构</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/100126e1efcaaa305d50bb43523d8259_308x818.png@900-0-90-f.png"></p><p>核心是<code>install.sh</code>这个脚本，在main函数里可以发现，它执行了其它同目录下的其它sh,这里我们以registry为例，看下这个服务到底是如何部署的。</p><p>打开<code>install.sh</code></p><p>我们只看核心部分,其它几个脚本的作用这里只简单注释下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">...<br>main() &#123;<br>  echo &quot;&quot;<br>  LOG &quot;INFO&quot; &quot;=============================projectName install Begin===================================&quot;<br>  LOG &quot;INFO&quot; &quot;projectName all install exec date: date &quot;+%Y-%m-%d %H:%M:%S&quot;&quot;<br><span class="hljs-meta">  #</span><span class="bash">检查安装包完整性</span><br>  prepare_install || return 1<br><span class="hljs-meta">  #</span><span class="bash">检查ssh密码（后面用于连接其它节点进行部署）</span><br>  ssh_with_password || return 1<br><span class="hljs-meta">  #</span><span class="bash">修改application.yml</span><br>  modify_application_yml || return 1<br><span class="hljs-meta">  #</span><span class="bash">复制安装包到其他节点</span><br>  scp_package_vm || return 1<br><span class="hljs-meta">  #</span><span class="bash">创建安装目录</span><br>  install_maint || return 1<br><span class="hljs-meta">  #</span><span class="bash">安装jdk</span><br>  install_jdk || return 1<br><span class="hljs-meta">  #</span><span class="bash">数据库相关操作</span><br>  refresh_sql || return 1<br><span class="hljs-meta">  #</span><span class="bash">核心实现</span><br>  install_registry || return 1<br>  ...<br>...  <br>install_registry() &#123;<br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-comment"># registry install</span></span><br>  for ((i = 0; i &lt; $&#123;#registry_install_ip[@]&#125;; i++)); do<br>    vm1=$&#123;registry_install_ip[$i]&#125;<br>    vm=$(eval echo &#x27;$&#x27;&quot;$&#123;vm1&#125;&quot;)<br>    LOG &quot;INFO&quot; &quot;================= install projectName registry in $&#123;vm&#125; =================&quot;<br>    #执行了install_projectName_registry.sh<br>    ssh $&#123;setup_user&#125;@$&#123;vm&#125; &quot;cd $&#123;CUR_DIR&#125;; sh install_projectName_registry.sh $&#123;vm&#125;&quot;<br>  done<br>&#125;<br></code></pre></td></tr></table></figure><p>打开部署脚本<code>install_projectName_registry.sh</code></p><p>查看主函数,这里我们有些配置我们要去掉，有些要修改，需要根据我们对未来运行环境的情况来自己配置生成自己的打包脚本。这里仅供参考</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">main()<br>&#123;<br>    echo &quot;=======================================================================&quot;<br>    LOG &quot;INFO&quot; &quot;------ begin install projectName registry root -----&quot;<br><span class="hljs-meta">#</span><span class="bash">创建用户、组等，后面的registry应用的操作都基于这个权限，保留</span><br>    create_user &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; || return 1<br>    #设置环境变量 保留<br>    set_env &quot;registry&quot; $&#123;REGISTRY_USER_HOME&#125; $&#123;REGISTRY_USER&#125; || return 1<br><span class="hljs-meta">#</span><span class="bash">安装JDK 这里重复安装了2个JDK 我们后面使用一个就可以了</span><br>    install_jdk &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; || return 1<br><span class="hljs-meta">#</span><span class="bash">安装tomcat</span><br>    install_openas &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; || return 1<br><span class="hljs-meta">#</span><span class="bash">设置配置</span> <br>    install_projectName_registry_service  || return 1<br>    #设置tomcat配置<br>    modify_tomcat_config &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; $&#123;local_ip&#125; || return 1<br><span class="hljs-meta">#</span><span class="bash">设置tomcat端口</span><br>    modify_server_xml_port || return 1<br><span class="hljs-meta">#</span><span class="bash">tomcat https相关设置 我们的容器并没有对外暴露，去掉</span><br>    modify_https_license || return 1<br>    #配置服务设置<br>    modify_projectName_registry_service || return 1<br>    #启动服务 去掉，我们使用的是Dockerfild的CMD命令启动，服务必须运行于前台，因为后面要使用k8s等平台来编排。<br>    start_registry || return 1<br>    #增加定时启动任务，防止服务器重启后服务down掉，提高程序健壮性，去掉，我们使用k8s的自愈功能。<br>    add_crontab || return 1<br><br>    LOG &quot;INFO&quot; &quot;------ end install projectName registry root -----&quot;<br>    echo &quot;=======================================================================&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>【注意】如果写完脚本还是运行不了，可以检查下看是不是省略了某些步骤。</p><blockquote><p>此处省略1000字写脚本调试过程….</p></blockquote><p>最终得到的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#####################部署脚本用到的配置#########################################</span></span><br>SCRIPT_NAME=&quot;install_projectName_registry.sh&quot;<br>CUR_DIR=/opt/docker_install<br>SOFT_PATH=$&#123;CUR_DIR&#125;/../../../SoftWarePackage<br>CONF_PATH=$&#123;CUR_DIR&#125;/config<br>JRE_PATH=/opt/JRE<br>common_key=2db799094c8101ded579be4435d5a75d7bb36a57ec8822f35437585551847c788919a5b5e76d92037a6483a5a0be061c<br>tomcat_name=&quot;OpenAS_Tomcat-7.zip&quot;<br><br>REGISTRY_USER_HOME=/data01/registry<br>REGISTRY_USER=registry<br>REGISTRY_USER_GROUP_NAME=projectName<br>projectName_REGISTRY_SERVICE=registry<br>projectName_war_path=$&#123;CUR_DIR&#125;/registry.war<br>projectName_registry_http_port=8022<br>port1=8023<br><br>install_projectName_registry_service()<br>&#123;<br>    echo &quot;INFO&quot; &quot;begin install registry service ...&quot;<br><br>    if [[ ! -f $&#123;projectName_war_path&#125; ]];then<br>        echo &quot;ERROR&quot; &quot;[ file $&#123;projectName_war_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    registry_path=$&#123;REGISTRY_USER_HOME&#125;/tomcat/webapps/$&#123;projectName_REGISTRY_SERVICE&#125;<br>    if [[ ! -d $&#123;registry_path&#125; ]];then<br>        sudo su - $&#123;REGISTRY_USER&#125; -c &quot;mkdir -p $&#123;registry_path&#125;&quot;<br>        if [[ $? -ne 0 ]];then<br>            echo &quot;ERROR&quot; &quot;[ mkdir -p $&#123;registry_path&#125; ] failed&quot;<br>            return 1<br>        fi<br>    fi<br><br>    sudo unzip -q $&#123;projectName_war_path&#125; -d $&#123;registry_path&#125;<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ unzip $&#123;projectName_war_path&#125; ] failed&quot;<br>        return 1<br>    fi<br>  sudo chmod -R 750 $&#123;registry_path&#125;/META-INF<br>    echo &quot;INFO&quot; &quot;end install registry service ...&quot;<br>&#125;<br><br>function modify_server_xml_port<br>&#123;<br>    echo &quot;INFO&quot; &quot;begin modify server.xml port openas ...&quot;<br><br>    sudo su - $&#123;REGISTRY_USER&#125; &lt;&lt;EOF<br>    server_path=$&#123;REGISTRY_USER_HOME&#125;/tomcat/conf/server.xml<br>    if [[ ! -f $&#123;server_path&#125; ]];then<br>        echo &quot;[ file $&#123;server_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br>    #修改端口号<br><br><br>    sed -i -e s/8384/$&#123;port1&#125;/g $&#123;server_path&#125;<br>    # https 端口号<br>    #sed -i -e s/8542/$&#123;projectName_registry_port&#125;/g $&#123;server_path&#125;<br>    # http 端口号<br><br>    sed -i -e s/19998/$&#123;projectName_registry_http_port&#125;/g $&#123;server_path&#125;<br><br>    #sed -i &quot;s#path=\&quot;.*\&quot;\\(.*docBase.*\\)#path=\&quot;\/register\&quot;\\1#g&quot; $&#123;server_path&#125;<br><br>    sed -i &quot;s#docBase=\&quot;.*\&quot;\\(.*reloadable.*\\)#docBase=\&quot;$&#123;projectName_REGISTRY_SERVICE&#125;\&quot;\\1#g&quot; $&#123;server_path&#125;<br>    exit<br>EOF<br><br>    echo &quot;INFO&quot; &quot;successful modify server.xml port openas ...&quot;<br>&#125;<br><br>modify_projectName_registry_service()<br>&#123;<br>echo &quot;INFO&quot; &quot;begin modify registry service ...&quot;<br>    application_common=$&#123;CONF_PATH&#125;/application-common.yml<br>    application_broker=$&#123;CONF_PATH&#125;/application-broker.yml<br>    application_path=$&#123;REGISTRY_USER_HOME&#125;/tomcat/webapps/$&#123;projectName_REGISTRY_SERVICE&#125;/WEB-INF/classes/<br>    sudo cp $&#123;application_common&#125; $&#123;application_path&#125;<br>    sudo cp $&#123;application_broker&#125; $&#123;application_path&#125;<br><br>  file_application_yml=$&#123;REGISTRY_USER_HOME&#125;/tomcat/webapps/$&#123;projectName_REGISTRY_SERVICE&#125;/WEB-INF/classes/application.yml<br>    sudo su - $&#123;REGISTRY_USER&#125; &lt;&lt;EOF<br><br>    if [[ ! -f $&#123;file_application_yml&#125; ]];then<br>        echo &quot;[ file $&#123;file_application_yml&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br>    ## set spring application name<br>    sed -i &quot;s/    name: .*/    name: $&#123;projectName_REGISTRY_SERVICE&#125;/&quot; $&#123;file_application_yml&#125;<br><br>    sed -i &quot;s/  port: .*/  port: $&#123;projectName_registry_http_port&#125;/&quot; $&#123;file_application_yml&#125;<br><br>EOF<br>  sudo chown -R $&#123;REGISTRY_USER&#125;:$&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125;<br>echo &quot;INFO&quot; &quot;successful modify registry service ...&quot;<br><br>&#125;<br><br><br>create_user()<br>&#123;<br>    COMPONENT_NAME=$1<br>    USER_NAME=$2<br>    GROUP_NAME=$3<br>    USER_HOME=$4<br><br>    if [[ &quot;X&quot; == &quot;X$&#123;COMPONENT_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;GROUP_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_HOME&#125;&quot; ]];then<br>        echo &quot;ERROR&quot; &quot;$&#123;COMPONENT_NAME&#125; or $&#123;USER_NAME&#125; or $&#123;GROUP_NAME&#125; or $&#123;USER_HOME&#125;is null,pls check !&quot;<br>        return 1<br>    fi<br><br>echo &quot;INFO&quot; &quot;begin create projectName $&#123;COMPONENT_NAME&#125; user ...&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">判断用户是否存在</span><br>    flag_create=&quot;No&quot;<br>    id $&#123;USER_NAME&#125; &gt; /dev/null 2&gt;&amp;1<br>    if [[ $? -ne 0 ]];then<br>    #用户不存在，需要创建用户<br>        flag_create=&quot;Yes&quot;<br>    fi<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">用户存在,返回</span><br>    if [[ &quot;xYes&quot; != &quot;x$&#123;flag_create&#125;&quot; ]];then<br>        is_shell_matched=$(cat /etc/passwd | grep $&#123;USER_NAME&#125; | awk -F &#x27;:&#x27; &#x27;&#123;print $7&#125;&#x27;| grep -E &#x27;ksh|bash|csh&#x27;)<br>        if [[ &quot;x&quot; == &quot;x$&#123;is_shell_matched&#125;&quot; ]];then<br>            echo &quot;ERROR&quot; &quot;$&#123;USER_NAME&#125; is existed,pls check or change another user name~&quot;<br>            return 1<br>        fi<br><br>        echo &quot;ERROR&quot; &quot;$&#123;USER_NAME&#125; is existed&quot;<br>        return 1<br>    fi<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">判断用户组是否存在，存在直接使用，不存在则重新创建</span><br>    ret=$(cat /etc/group | grep -w &quot;^$&#123;GROUP_NAME&#125;&quot;)<br>    if [[ &quot;x&quot; != &quot;x$&#123;ret&#125;&quot; ]];then<br>        echo &quot;WARN&quot; &quot;[ GROUP_NAME:$&#123;GROUP_NAME&#125; ] is already exist, use it directly!&quot;<br>    else<br>        echo &quot;INFO&quot; &quot;GROUP_NAME:$&#123;GROUP_NAME&#125;&quot;<br><br>        sudo groupadd $&#123;GROUP_NAME&#125;<br>        if [[ $? -ne 0 ]];then<br>            echo &quot;ERROR&quot; &quot;[ groupadd $&#123;GROUP_NAME&#125; ] failed&quot;<br>            return 1<br>        fi<br>    fi<br><br>    user_path=&quot;/data01&quot;<br>    sudo chmod 755 $&#123;user_path&#125;<br><br>    linux_bash=&quot;/bin/bash&quot;<br>    sudo useradd -m -d $&#123;USER_HOME&#125; $&#123;USER_NAME&#125; -s $&#123;linux_bash&#125; -g $&#123;GROUP_NAME&#125; &gt;/dev/null 2&gt;/dev/null<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ useradd -m -d $&#123;USER_HOME&#125; $&#123;USER_NAME&#125; -s $&#123;linux_bash&#125; -g $&#123;GROUP_NAME&#125; ] failed&quot;<br>        return 1<br>    fi<br>    sudo chmod -R 750 $&#123;USER_HOME&#125;<br>    encrypt_user_password $&#123;USER_NAME&#125; || return 1<br><br>    echo &quot;INFO&quot; &quot;successful create projectName $&#123;COMPONENT_NAME&#125; user ...&quot;<br><br>    return 0<br>&#125;<br><br>function encrypt_user_password<br>&#123;<br>    PASSWORD_USER_NAME=$1<br>    passwd_user=$&#123;PASSWORD_USER_NAME&#125;<br>    if [[ &quot;X&quot; == &quot;X$&#123;PASSWORD_USER_NAME&#125;&quot; ]];then<br>        echo &quot;ERROR&quot; &quot;$&#123;PASSWORD_USER_NAME&#125; is null,pls check !&quot;<br>        return 1<br>    fi<br>    echo &quot;INFO&quot; &quot;begin encrypt user password ...&quot;<br><br>    encrypt_user_password=`echo -n &quot;$&#123;passwd_user&#125;&quot; | openssl enc -aes-128-ecb -a -e -pass pass:&quot;indicator&quot; -nosalt`<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;WARN&quot; &quot;[ encrypt user password &#123;openssl enc -aes-128-ecb -a -e -pass pass:&quot;indicator&quot; -nosalt&#125; ] failed&quot;<br>        encrypt_user_password=$&#123;passwd_user&#125;<br>    fi<br><br>    if [[ &quot;x&quot; == &quot;x$&#123;encrypt_user_password&#125;&quot; ]];then<br>        echo &quot;WARN&quot; &quot;[ encrypt user password=$&#123;encrypt_user_password&#125;,it is null~ ] failed&quot;<br>    fi<br><br>    (echo -E &quot;$&#123;encrypt_user_password&#125;&quot;;sleep 1;echo -E &quot;$&#123;encrypt_user_password&#125;&quot;) | sudo passwd &quot;$&#123;PASSWORD_USER_NAME&#125;&quot; &gt;/dev/null 2&gt;/dev/null<br>    if [[ $? -ne 0 ]]; then<br>        echo &quot;WARN&quot; &quot;Failed to change user passwd by aes&quot;<br>    fi<br><br>    echo &quot;INFO&quot; &quot;end encrypt user password ...&quot;<br>&#125;<br><br>function set_env<br>&#123;<br>    COMPONENT_NAME=$1<br>    USER_HOME=$2<br>    USER_NAME=$3<br><br>    if [[ &quot;X&quot; == &quot;X$&#123;COMPONENT_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_HOME&#125;&quot; ]];then<br>        echo &quot;ERROR&quot; &quot;$&#123;COMPONENT_NAME&#125; or $&#123;USER_HOME&#125; is null,pls check !&quot;<br>        return 1<br>    fi<br><br>echo &quot;INFO&quot; &quot;begin set $&#123;COMPONENT_NAME&#125; umask and JDK env ...&quot;<br><br>file_bash=$&#123;USER_HOME&#125;/.bashrc<br>    if [[ ! -f $&#123;file_bash&#125; ]];then<br>        sudo touch $&#123;file_bash&#125;<br>        if [[ $? -ne 0 ]];then<br>            echo &quot;ERROR&quot; &quot;[ touch $&#123;file_bash&#125; ] failed&quot;<br>            return 1<br>        fi<br>        sudo chown $&#123;USER_NAME&#125;:projectName $&#123;file_bash&#125;<br>    fi<br>    sudo su - $&#123;USER_NAME&#125; &lt;&lt;EOF<br>    echo &quot;export APP_HOME=$&#123;USER_HOME&#125;&quot; &gt;&gt; $&#123;file_bash&#125;<br>    echo &quot;export JAVA_HOME=/opt/JRE/jre1.8.0_232&quot; &gt;&gt; $&#123;file_bash&#125;<br>    echo &#x27;export JRE_HOME=\$&#123;JAVA_HOME&#125;&#x27; &gt;&gt; $&#123;file_bash&#125;<br>    echo &#x27;export  PATH=\$JAVA_HOME/bin:\$PATH&#x27; &gt;&gt; $&#123;file_bash&#125;<br>    echo &#x27;export CLASSPATH=\$CLASSPATH:\$JAVA_HOME/lib&#x27; &gt;&gt; $&#123;file_bash&#125;<br>    echo &quot;umask 027&quot; &gt;&gt; $&#123;file_bash&#125;<br>EOF<br><br><br>    if [[ -d $&#123;USER_HOME&#125;/perl5 ]];then<br>          sudo chmod 750 -R $&#123;USER_HOME&#125;/perl5<br>    fi<br><br>    if [[ -d $&#123;USER_HOME&#125;/.local ]];then<br>        sudo chmod 750 -R $&#123;USER_HOME&#125;/.local<br>    fi<br><br>    echo &quot;INFO&quot; &quot;successful set $&#123;COMPONENT_NAME&#125; umask and JDK env ...&quot;<br>&#125;<br><br>install_jdk()<br>&#123;<br>    COMPONENT_NAME=$1<br>    USER_NAME=$2<br>    GROUP_NAME=$3<br>    USER_HOME=$4<br><br>    if [[ &quot;X&quot; == &quot;X$&#123;COMPONENT_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;GROUP_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_HOME&#125;&quot; ]];then<br>        echo &quot;ERROR&quot; &quot;$&#123;COMPONENT_NAME&#125; or $&#123;USER_NAME&#125; or $&#123;GROUP_NAME&#125; or $&#123;USER_HOME&#125; is null,pls check !&quot;<br>        return 1<br>    fi<br><br>echo &quot;INFO&quot; &quot;begin install $&#123;COMPONENT_NAME&#125; JRE ...&quot;<br><br>    sudo chown -R $&#123;USER_NAME&#125;:$&#123;GROUP_NAME&#125; $&#123;JRE_PATH&#125;<br><br>    sudo su - $&#123;USER_NAME&#125; -c &quot;source etc/profile;java -version&quot; &gt;/dev/null 2&gt;/dev/null<br>if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ su - $&#123;USER_NAME&#125; -c \&quot;java -version\&quot; ] failed&quot;<br>        return 1<br>    fi<br>    sudo chmod 750 -R $&#123;JRE_PATH&#125;<br>echo &quot;INFO&quot; &quot;successful install $&#123;COMPONENT_NAME&#125; JDK ...&quot;<br>&#125;<br><br>install_openas()<br>&#123;<br>    COMPONENT_NAME=$1<br>    USER_NAME=$2<br>    GROUP_NAME=$3<br>    USER_HOME=$4<br><br>    if [[ &quot;X&quot; == &quot;X$&#123;COMPONENT_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;GROUP_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_HOME&#125;&quot; ]];then<br>        echo &quot;ERROR&quot; &quot;$&#123;COMPONENT_NAME&#125; or $&#123;USER_NAME&#125; or $&#123;GROUP_NAME&#125; or $&#123;USER_HOME&#125; is null,pls check !&quot;<br>        return 1<br>    fi<br><br>echo &quot;INFO&quot; &quot;begin install $&#123;COMPONENT_NAME&#125; openas ...&quot;<br><br><br>file_openas=$&#123;CUR_DIR&#125;/$&#123;tomcat_name&#125;<br>    if [[ ! -f $&#123;file_openas&#125; ]];then<br>        echo &quot;ERROR&quot; &quot;[ file $&#123;file_openas&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>sudo unzip -q $&#123;file_openas&#125; -d $&#123;USER_HOME&#125;/tomcat<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ unzip $&#123;file_openas&#125; -d $&#123;USER_HOME&#125;/tomcat ] failed&quot;<br>        return 1<br>    fi<br><br> sudo chown -R $&#123;USER_NAME&#125;:$&#123;GROUP_NAME&#125; $&#123;USER_HOME&#125;/tomcat<br>      sudo chmod 750 $&#123;USER_HOME&#125;/tomcat<br>    echo &quot;INFO&quot; &quot;successful install $&#123;COMPONENT_NAME&#125; openas ...&quot;<br><br>&#125;<br><br>function modify_tomcat_config<br>&#123;<br>    COMPONENT_NAME=$1<br>    USER_NAME=$2<br>    GROUP_NAME=$3<br>    USER_HOME=$4<br>    LOCAL_IP=$5<br><br>    if [[ &quot;X&quot; == &quot;X$&#123;COMPONENT_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;GROUP_NAME&#125;&quot; ]] || [[ &quot;X&quot; == &quot;X$&#123;USER_HOME&#125;&quot; ]];then<br>        echo &quot;ERROR&quot; &quot;$&#123;COMPONENT_NAME&#125; or $&#123;USER_NAME&#125; or $&#123;GROUP_NAME&#125; or $&#123;USER_HOME&#125; is null,pls check !&quot;<br>        return 1<br>    fi<br><br>    echo &quot;INFO&quot; &quot;begin modify $&#123;COMPONENT_NAME&#125; server.xml openas ...&quot;<br><br>    server_path=$&#123;USER_HOME&#125;/tomcat/conf/server.xml<br><br><br>    server_path_template=$&#123;CUR_DIR&#125;/config/server.xml<br>    if [[ ! -f $&#123;server_path_template&#125; ]];then<br>        echo &quot;ERROR&quot; &quot;[ file $&#123;server_path_template&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    sudo cp $&#123;server_path_template&#125; $&#123;server_path&#125;<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ cp $&#123;server_path_template&#125; $&#123;server_path&#125;] failed&quot;<br>        return 1<br>    fi<br><br>    #修改https ip地址<br>    sudo su - $&#123;USER_NAME&#125; &lt;&lt;EOF<br><br>    #修改加解密地址<br>    sed -i &quot;s#keystoreFile=\&quot;.*\&quot;\\(.*keystorePass.*\\)#keystoreFile=\&quot;$&#123;USER_HOME&#125;/tls/romaServerKeyStore\&quot;\\1#g&quot; $&#123;server_path&#125;<br>    sed -i &quot;s#truststoreFile=\&quot;.*\&quot;\\(.*truststorePass.*\\)#truststoreFile=\&quot;$&#123;USER_HOME&#125;/tls/romaServerTrustStore\&quot;\\1#g&quot; $&#123;server_path&#125;<br>    sed -i &quot;s#clientAuth=\&quot;.*\&quot;\\(.*keystoreFile.*\\)#clientAuth=\&quot;true\&quot;\\1#g&quot; $&#123;server_path&#125;<br><br>    sed -i &quot;s#keystorePass=\&quot;.*\&quot;\\(.*ciphers.*\\)#keystorePass=\&quot;$&#123;keystorePass&#125;\&quot;\\1#g&quot; $&#123;server_path&#125;<br>    sed -i &quot;s#truststorePass=\&quot;.*\&quot;\\(.*/&gt;.*\\)#truststorePass=\&quot;$&#123;truststorePass&#125;\&quot;\\1#g&quot; $&#123;server_path&#125;<br>    #修改setvmargs.sh java prop<br>    chmod  -R 700 $&#123;USER_HOME&#125;/tomcat/bin<br>    echo &quot;JAVA_OPTS=\&quot;\$JAVA_OPTS -Dapp_home=$&#123;USER_HOME&#125;\&quot;&quot; &gt;&gt; $&#123;USER_HOME&#125;/tomcat/bin/setvmargs.sh<br>    chmod  -R 0550 $&#123;USER_HOME&#125;/tomcat/bin<br>EOF<br><br><br><br>    #copy web.xml to user home openas config<br>    sudo cp $&#123;CONF_PATH&#125;/web.xml $&#123;USER_HOME&#125;/tomcat/conf<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ cp $&#123;CONF_PATH&#125;/web.xml $&#123;USER_HOME&#125;/tomcat/conf ] failed&quot;<br>        return 1<br>    fi<br><br>    #copy catalina.properties to user home openas config<br>    sudo cp $&#123;CONF_PATH&#125;/catalina.properties $&#123;USER_HOME&#125;/tomcat/conf<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ cp $&#123;CONF_PATH&#125;/catalina.properties $&#123;USER_HOME&#125;/tomcat/conf ] failed&quot;<br>        return 1<br>    fi<br><br>    #copy setkidenv.sh to user home openas config<br>    sudo cp $&#123;CONF_PATH&#125;/setkidenv.sh  $&#123;USER_HOME&#125;/tomcat/bin/kiddle/<br>    if [[ $? -ne 0 ]];then<br>        echo &quot;ERROR&quot; &quot;[ cp $&#123;CONF_PATH&#125;/setkidenv.sh  $&#123;USER_HOME&#125;/tomcat/bin/kiddle ] failed&quot;<br>        return 1<br>    fi<br><br>    # modify secretkey.properties<br><br>    secretkey_properties=$&#123;USER_HOME&#125;/tomcat/conf/secretkey.properties<br>    sudo -i sed -i &quot;s#common.key=.*#common.key=$&#123;common_key&#125;#g&quot; $&#123;secretkey_properties&#125;<br><br>    sudo chown -R $&#123;USER_NAME&#125;:$&#123;GROUP_NAME&#125; $&#123;USER_HOME&#125;<br><br>    echo &quot;INFO&quot; &quot;successful modify $&#123;COMPONENT_NAME&#125; server.xml openas ...&quot;<br>&#125;<br><br>main()<br>&#123;<br>    echo &quot;=======================================================================&quot;<br>    echo &quot;INFO&quot; &quot;------ begin build projectName registry image -----&quot;<br><br>    create_user &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; || return 1<br><br>    set_env &quot;registry&quot; $&#123;REGISTRY_USER_HOME&#125; $&#123;REGISTRY_USER&#125; || return 1<br><br>    install_jdk &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; || return 1<br><br>    install_openas &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; || return 1<br><br>    install_projectName_registry_service  || return 1<br><br>    modify_tomcat_config &quot;registry&quot; $&#123;REGISTRY_USER&#125; $&#123;REGISTRY_USER_GROUP_NAME&#125; $&#123;REGISTRY_USER_HOME&#125; $&#123;local_ip&#125; || return 1<br><br>    modify_server_xml_port || return 1<br><br>    modify_projectName_registry_service || return 1<br><br><br>    echo &quot;INFO&quot; &quot;------ end build projectName registry image -----&quot;<br>    echo &quot;=======================================================================&quot;<br>&#125;<br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><p>有了这个脚本，我们docker build还是要手动敲命令，那么再来一个脚本。</p><p><code>build_registry_image.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>CUR_DIR=$(pwd)<br>cdir=$(cd `dirname $0`; pwd)<br>. $&#123;cdir&#125;/comm_lib<br><br>IMAGE_NAME=$&#123;REGISTRY_USER&#125;<br><br>WORK_DIR=$(cd ../DockerFile/projectName_registry;pwd)<br><br>check_dictionary()<br>&#123;<br>    LOG &quot;INFO&quot; &quot;BEGIN CHECK DICTIONARY...&quot;<br><br><br>  if [[ ! -d $&#123;WORK_DIR&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ dictionary $&#123;WORK_DIR&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    LOG &quot;INFO&quot; &quot;DICTIONARY IS READY&quot;<br>&#125;<br><br>check_files()<br>&#123;<br>    LOG &quot;INFO&quot; &quot;BEGIN CHECK FILES...&quot;<br><br>  dockfile_path=$&#123;WORK_DIR&#125;/Dockerfile<br>  if [[ ! -f $&#123;dockfile_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;dockfile_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    tomcat_path=$&#123;WORK_DIR&#125;/OpenAS_Tomcat-7.zip<br>  if [[ ! -f $&#123;tomcat_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;tomcat_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    war_path=$&#123;WORK_DIR&#125;/registry.war<br>  if [[ ! -f $&#123;war_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;war_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br><br>    sh_path=$&#123;WORK_DIR&#125;/install_projectName_registry.sh<br>  if [[ ! -f $&#123;sh_path&#125; ]];then<br>        LOG &quot;ERROR&quot; &quot;[ file $&#123;sh_path&#125; ] is not exist,pls check~&quot;<br>        return 1<br>    fi<br>&#125;<br><br>buildImage()&#123;<br><br>    cd $&#123;WORK_DIR&#125;<br><br>    docker build -t $&#123;IMAGE_NAME&#125; . || return 1<br><br>    if [[ $? -ne 0 ]];then<br>        LOG &quot;ERROR&quot; &quot;$&#123;IMAGE_NAME&#125;Image Build  failed&quot;<br>        return 1<br>    fi<br><br>&#125;<br><br>function main()<br>&#123;<br>    echo &quot;=======================================================================&quot;<br><br>    check_dictionary || return 1<br><br>    check_files || return 1<br><br>    buildImage || return 1<br><br>    echo &quot;=======================================================================&quot;<br>&#125;<br><br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">其中这个镜像名我们配在了common_lib中。</span><br>IMAGE_NAME=$&#123;REGISTRY_USER&#125;<br></code></pre></td></tr></table></figure><p>好了，写了半天，是骡子是，拉出来跑跑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@node02 bin]# cd /opt/projectName/SetupScripts/projectNameScripts/bin/docker/bin<br>[root@node02 bin]# sh build_registry_image.sh<br>=======================================================================<br>[2021-06-28 23:08:39][INFO][][root][BEGIN CHECK DICTIONARY...]<br><br>[2021-06-28 23:08:39][INFO][][root][DICTIONARY IS READY]<br><br>[2021-06-28 23:08:39][INFO][][root][BEGIN CHECK FILES...]<br><br>Sending build context to Docker daemon  52.65MB<br>Step 1/15 : FROM centos7_hwjdk8<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 7addb65ed3f6</span><br>Step 2/15 : ENV INSTALL_HOME=/opt/docker_install<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 436e36f4c713</span><br>Removing intermediate container 436e36f4c713<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 9c6cf4df82f4</span><br>Step 3/15 : ENV SCRIPT_NAME=install_projectName_registry.sh<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 9d47bdf95dc0</span><br>Removing intermediate container 9d47bdf95dc0<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 4457cc6a3b5b</span><br>Step 4/15 : ENV REGISTRY_HOME=/data01/registry<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 1d0573560912</span><br>Removing intermediate container 1d0573560912<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 7a7d94d7b1ad</span><br>Step 5/15 : ENV TOMCATPATH=$&#123;REGISTRY_HOME&#125;/tomcat<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 4318ee1fd9ab</span><br>Removing intermediate container 4318ee1fd9ab<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> f60b711e3fee</span><br>Step 6/15 : RUN mkdir -p $&#123;INSTALL_HOME&#125;/config<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 0bafcf3362ed</span><br>Removing intermediate container 0bafcf3362ed<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 203039be9ed7</span><br>Step 7/15 : COPY OpenAS_Tomcat-7.zip $&#123;INSTALL_HOME&#125;<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> c3dada09286a</span><br>Step 8/15 : COPY registry.war $&#123;INSTALL_HOME&#125;<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 863b6a19f960</span><br>Step 9/15 : COPY $&#123;SCRIPT_NAME&#125; $&#123;INSTALL_HOME&#125;<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 3c9ea6dabbea</span><br>Step 10/15 : COPY config $&#123;INSTALL_HOME&#125;/config<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> b6e1a20d1d6a</span><br>Step 11/15 : RUN sh $&#123;INSTALL_HOME&#125;/$&#123;SCRIPT_NAME&#125;<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 834d4299cb17</span><br>=======================================================================<br>INFO ------ begin build projectName registry image -----<br>INFO begin create projectName registry user ...<br>INFO GROUP_NAME:projectName<br>INFO begin encrypt user password ...<br>INFO end encrypt user password ...<br>INFO successful create projectName registry user ...<br>INFO begin set registry umask and JDK env ...<br>INFO successful set registry umask and JDK env ...<br>INFO begin install registry JRE ...<br>INFO successful install registry JDK ...<br>INFO begin install registry openas ...<br>INFO successful install registry openas ...<br>INFO begin install registry service ...<br>INFO end install registry service ...<br>INFO begin modify registry server.xml openas ...<br>Last login: Tue Jun 29 03:08:50 UTC 2021<br>INFO successful modify registry server.xml openas ...<br>INFO begin modify server.xml port openas ...<br>Last login: Tue Jun 29 03:08:51 UTC 2021<br>INFO successful modify server.xml port openas ...<br>INFO begin modify registry service ...<br>Last login: Tue Jun 29 03:08:51 UTC 2021<br>INFO successful modify registry service ...<br>INFO ------ end build projectName registry image -----<br>=======================================================================<br>Removing intermediate container 834d4299cb17<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 2075f2e83001</span><br>Step 12/15 : RUN rm -rf $&#123;INSTALL_HOME&#125;<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> a51f9db8b758</span><br>Removing intermediate container a51f9db8b758<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 817edeead831</span><br>Step 13/15 : EXPOSE 8022<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 34b9b76c7ba5</span><br>Removing intermediate container 34b9b76c7ba5<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 1c1ee23b204e</span><br>Step 14/15 : USER registry<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 110bc62aca7b</span><br>Removing intermediate container 110bc62aca7b<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> b565e892cca1</span><br>Step 15/15 : CMD [&quot;/data01/registry/tomcat/bin/catalina.sh&quot;,&quot;run&quot;]<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> e0af975e3aa9</span><br>Removing intermediate container e0af975e3aa9<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 82b43c9ecdda</span><br>Successfully built 82b43c9ecdda<br>Successfully tagged registry:latest<br>=======================================================================<br><br>[root@node02 bin]# docker images<br>REPOSITORY                               TAG                 IMAGE ID            CREATED             SIZE<br>registry                       latest              82b43c9ecdda        3 minutes ago       1.1GB<br><br></code></pre></td></tr></table></figure><p>可以看到registry已经构建成功了，我们启动一下试试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@node02 bin]# docker run -it -p 80:8022 --rm registry<br>...<br>2021-06-29 03:14:55.541  INFO 1 --- [      Thread-14] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP<br>2021-06-29 03:14:55.591  INFO 1 --- [      Thread-14] e.s.EurekaServerInitializerConfiguration : Started Eureka Server<br>2021-06-29 03:14:55.764  INFO 1 --- [ost-startStop-1] c.s.j.s.i.a.WebApplicationImpl           : Initiating Jersey application, version &#x27;Jersey: 1.19.1 03/11/2016 02:08 PM&#x27;<br>2021-06-29 03:14:55.875  INFO 1 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON encoding codec LegacyJacksonJson<br>2021-06-29 03:14:55.875  INFO 1 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON decoding codec LegacyJacksonJson<br>2021-06-29 03:14:55.876  INFO 1 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using XML encoding codec XStreamXml<br>2021-06-29 03:14:55.876  INFO 1 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using XML decoding codec XStreamXml<br>2021-06-29 03:14:56,842<br>INFO: Starting ProtocolHandler [&quot;http-nio-8022&quot;]<br>2021-06-29 03:14:56,877<br>INFO: Server startup in 21631 ms<br></code></pre></td></tr></table></figure><p>没有问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@node02 ~]# curl localhost<br>&lt;!doctype html&gt;<br>&lt;!--[if lt IE 7]&gt;      &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;<br>&lt;!--[if IE 7]&gt;         &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt; &lt;![endif]--&gt;<br>&lt;!--[if IE 8]&gt;         &lt;html class=&quot;no-js lt-ie9&quot;&gt; &lt;![endif]--&gt;<br>&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class=&quot;no-js&quot;&gt; &lt;!--&lt;![endif]--&gt;<br>  &lt;head&gt;<br>    &lt;base href=&quot;/&quot;&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;title&gt;Eureka&lt;/title&gt;<br>    &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;<br><br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;eureka/css/wro.css&quot;&gt;<br><br>  &lt;/head&gt;<br><br>  &lt;body id=&quot;one&quot;&gt;<br>&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;navbar-header&quot;&gt;<br>      &lt;a class=&quot;navbar-brand&quot; href=&quot;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/a&gt;<br>      &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt;<br>        &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;<br>...<br><span class="hljs-meta">#</span><span class="bash">node1</span><br>[root@node01 docker]# curl 192.168.60.130<br>&lt;!doctype html&gt;<br>&lt;!--[if lt IE 7]&gt;      &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;<br>&lt;!--[if IE 7]&gt;         &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt; &lt;![endif]--&gt;<br>&lt;!--[if IE 8]&gt;         &lt;html class=&quot;no-js lt-ie9&quot;&gt; &lt;![endif]--&gt;<br>&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class=&quot;no-js&quot;&gt; &lt;!--&lt;![endif]--&gt;<br>  &lt;head&gt;<br>    &lt;base href=&quot;/&quot;&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;title&gt;Eureka&lt;/title&gt;<br>    &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;<br></code></pre></td></tr></table></figure><p>本地访问没有问题,其他节点访问也有问题。（注意关闭防火墙）</p><p>好了，到这里，我们已经完成了registry镜像的初步构建，那么只完成了1/3的工作，这个镜像仍然还无法使用。首先还没有推送到docker仓库里面，其他节点是无法拉取的，也无法通过k8s来进行编排部署。</p><p>其次，我们并没有解决registry集群相互注册的问题。</p><p>由于篇幅限制，带着这些问题，我们下一章再见。</p>]]></content>
    
    
    <categories>
      
      <category>容器化技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器化</tag>
      
      <tag>Docker</tag>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(二)容器化实战--K8s探索</title>
    <link href="/2021/06/04/containerization2-k8s/"/>
    <url>/2021/06/04/containerization2-k8s/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是Kubernates"><a href="#1-什么是Kubernates" class="headerlink" title="1.    什么是Kubernates"></a>1.    什么是Kubernates</h2><p>​    K8s是一个基于Docker容器的PAAS平台。源于Google十多年的容器化实践–Borg。谷歌每周要启动销毁数十亿容器。其合理的抽象、API化的架构等功能广受好评。是目前业界公认的容器化最佳方案。</p><p>我们本次探索的出发点主要2点</p><ol><li>需求驱动，客户要求我们进行容器化部署，那么我们的项目在从传统的部署方式向容器化演进当中到底有哪些挑战，我们又该如何解决呢？</li><li>经验积累，客户要求的是基于PAAS平台的容器化能力，那么基于业界主流解决方案docker和k8s的原生使用的能力能让我们将来更好地适配任何容器化平台。</li></ol><p>我们本次的目标：</p><ul><li>基于docker、k8s原生能力，打造可插拔，松耦合，与开发分支代码0冲突的程序容器化能力，完美兼容原来的部署方式。完善的部署脚本，支持一键部署k8s环境、一键发布应用、推送镜像、页面式运维。</li></ul><h2 id="2-如何搭建一个本地K8s学习测试环境"><a href="#2-如何搭建一个本地K8s学习测试环境" class="headerlink" title="2.    如何搭建一个本地K8s学习测试环境"></a>2.    如何搭建一个本地K8s学习测试环境</h2><h3 id="一、-IAAS准备工作"><a href="#一、-IAAS准备工作" class="headerlink" title="一、    IAAS准备工作"></a>一、    IAAS准备工作</h3><blockquote><p><strong>准备搭建1个master节点 2个node节点的环境。</strong></p></blockquote><h4 id="1-1准备IAAS资源"><a href="#1-1准备IAAS资源" class="headerlink" title="1.1准备IAAS资源"></a>1.1准备IAAS资源</h4><ul><li><p>这里使用VMware本地创建虚拟机。</p><p><a href="https://blog.51cto.com/3241766/2398136">Centos7.6操作系统安装及优化全纪录</a></p></li><li><p>准备4台Linux系统虚拟机或物理机，一台作为Master节点，2台作为node节点,1台作为私有仓库</p><p>这里使用VMware本地创建4台虚拟机</p><p>系统镜像为CentOS7</p><p>修改网络设置，防止虚拟机IP经常变动</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/8d233f592456ad0e8393cc5d8200e018_453x254.png@900-0-90-f.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/2ff1c142f7e34644e983669e52747f14_730x702.png@900-0-90-f.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/b684626c7075be9545f93189f02285dd_730x666.png@900-0-90-f.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/e1f7c035e07a17b3f882cf799304a61b_494x373.png@900-0-90-f.png"></p><table><thead><tr><th align="center">主机名</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">master01</td><td align="center">192.168.60.128</td></tr><tr><td align="center">node01</td><td align="center">192.168.60.134</td></tr><tr><td align="center">node02</td><td align="center">192.168.60.135</td></tr></tbody></table><h4 id="1-2-修改主机名"><a href="#1-2-修改主机名" class="headerlink" title="1.2    修改主机名"></a>1.2    修改主机名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostnamectl set-hostname master01   #分别修改master和node节点<br>[root@master01 /]# more /etc/hostname<br>master01<br></code></pre></td></tr></table></figure><p>修改完后需要重启:    <code>reboot</code></p><h4 id="1-3-修改hosts文件"><a href="#1-3-修改hosts文件" class="headerlink" title="1.3    修改hosts文件"></a>1.3    修改hosts文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]# cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br>192.168.60.128    master01<br>192.168.60.134     node01<br>192.168.60.135     node02<br>EOF<br><br>[root@master01 /]# cat /etc/hosts<br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br>192.168.60.128    master01<br>192.168.60.129     node01<br>192.168.60.130     node02<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">后面由于资源不足  IAAS层已改为</span><br>[root@master01 /]# cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br>192.168.4.114    master01<br>192.168.4.115     node01<br>192.168.4.116     node02<br>192.168.4.117     node03<br>192.168.4.118     storage01<br>EOF<br></code></pre></td></tr></table></figure><h4 id="1-4-验证mac地址与uuid"><a href="#1-4-验证mac地址与uuid" class="headerlink" title="1.4    验证mac地址与uuid"></a>1.4    验证mac地址与uuid</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]# cat /sys/class/net/ens33/address<br>00:0c:29:87:a4:9d<br>[root@master01 /]# cat /sys/class/dmi/id/product_uuid<br>9F064D56-2A45-962C-09AC-D4732487A49D<br></code></pre></td></tr></table></figure><p>确保各节点mac和uuid唯一</p><h4 id="1-5-禁用swap"><a href="#1-5-禁用swap" class="headerlink" title="1.5    禁用swap"></a>1.5    禁用swap</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]# swapoff -a#s\临时禁用<br>[root@master01 /]# sed -i.bak &#x27;/swap/s/^/#/&#x27; /etc/fstab   #重启后也生效---》注释swap<br>[root@master01 /]# cat /etc/fstab<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment"># /etc/fstab</span></span><br><span class="hljs-meta">#</span><span class="bash"> Created by anaconda on Fri Jun 18 07:00:09 2021</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="hljs-meta">#</span><span class="bash"> See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) <span class="hljs-keyword">for</span> more info</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash">/dev/mapper/centos-root /                       xfs     defaults        0 0</span><br>UUID=1977c58c-bd28-4d57-aec2-3ae6329638d9 /boot                   xfs     defaults        0 0<br><span class="hljs-meta">#</span><span class="bash">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br><br></code></pre></td></tr></table></figure><h4 id="1-6-br-netfilter模块加载"><a href="#1-6-br-netfilter模块加载" class="headerlink" title="1.6    br_netfilter模块加载"></a>1.6    br_netfilter模块加载</h4><blockquote><p>centos7用户需要设置路由</p></blockquote><p><strong>查看br_netfilter模块：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# lsmod |grep br_netfilter<br></code></pre></td></tr></table></figure><p>如果系统没有br_netfilter模块则执行下面的新增命令，如有则忽略。</p><p><strong>临时新增br_netfilter模块:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# modprobe br_netfilter<br></code></pre></td></tr></table></figure><p>该方式重启后会失效</p><p><strong>永久新增br_netfilter模块：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# cat &gt; /etc/rc.sysinit &lt;&lt; EOF<br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>for file in /etc/sysconfig/modules/*.modules ; do<br>[ -x $file ] &amp;&amp; $file<br>done<br>EOF<br>[root@master01 ~]# cat &gt; /etc/sysconfig/modules/br_netfilter.modules &lt;&lt; EOF<br>modprobe br_netfilter<br>EOF<br>[root@master01 ~]# chmod 755 /etc/sysconfig/modules/br_netfilter.modules<br>[root@master01 /]# lsmod |grep br_netfilter<br>br_netfilter           22256  0<br>bridge                151336  1 br_netfilter<br></code></pre></td></tr></table></figure><h4 id="1-7-内核参数修改"><a href="#1-7-内核参数修改" class="headerlink" title="1.7    内核参数修改"></a>1.7    内核参数修改</h4><p><strong>临时修改</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]# sysctl net.bridge.bridge-nf-call-iptables=1<br>net.bridge.bridge-nf-call-iptables = 1<br>[root@master01 /]# sysctl net.bridge.bridge-nf-call-iptables=1<br>net.bridge.bridge-nf-call-iptables = 1<br></code></pre></td></tr></table></figure><p><strong>永久修改</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]# cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br>[root@master01 /]# sysctl -p /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br></code></pre></td></tr></table></figure><h4 id="2-免密登录"><a href="#2-免密登录" class="headerlink" title="2.免密登录"></a>2.免密登录</h4><p>配置master01到node01、node02免密登录，本步骤只在master01上执行。</p><h5 id="2-1-创建秘钥"><a href="#2-1-创建秘钥" class="headerlink" title="2.1    创建秘钥"></a>2.1    创建秘钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# ssh-keygen -t rsa<br><br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa):<br>Created directory &#x27;/root/.ssh&#x27;.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /root/.ssh/id_rsa.<br>Your public key has been saved in /root/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:judqqhhvCscqRnBFEwKTACUK7F8W3ZTIu+xnHEUK0aE root@master01<br>The key&#x27;s randomart image is:<br>+---[RSA 2048]----+<br>|@+o.+.o.*oo      |<br>|++ ..o =.+ .     |<br>|o  .  .Eo o      |<br>|...  o . . .     |<br>|... o . S .      |<br>| o .   = .       |<br>|+ o   o + .      |<br>|oB.   .+ +       |<br>|*oo..o..+        |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><h5 id="2-2-将秘钥同步至node01、node02"><a href="#2-2-将秘钥同步至node01、node02" class="headerlink" title="2 .2    将秘钥同步至node01、node02"></a>2 .2    将秘钥同步至node01、node02</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.60.134<br>/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;<br>The authenticity of host &#x27;192.168.60.134 (192.168.60.134)&#x27; can&#x27;t be established.<br>ECDSA key fingerprint is SHA256:gb1k/wlKIeRuRh79sGI26DxKRAzM+uu52mVRMOCVGRc.<br>ECDSA key fingerprint is MD5:5d:80:79:e6:fe:3b:8d:10:47:cc:85:5b:79:af:69:29.<br>Are you sure you want to continue connecting (yes/no)? yes<br>/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed<br>/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys<br>root@192.168.60.134&#x27;s password:<br><br>Number of key(s) added: 1<br><br>Now try logging into the machine, with:   &quot;ssh &#x27;root@192.168.60.134&#x27;&quot;<br>and check to make sure that only the key(s) you wanted were added.<br><br><br>[root@master01 ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.60.135<br>/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;<br>The authenticity of host &#x27;192.168.60.135 (192.168.60.135)&#x27; can&#x27;t be established.<br>ECDSA key fingerprint is SHA256:yWCykmYj1RPf5XMyQDwVPMYbMWwUJceME83vXjiIMII.<br>ECDSA key fingerprint is MD5:a9:7a:4a:f5:70:1c:b0:47:ad:a5:3f:30:62:ee:c6:d1.<br>Are you sure you want to continue connecting (yes/no)? yes<br>/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed<br>/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys<br>root@192.168.60.135&#x27;s password:<br><br>Number of key(s) added: 1<br><br>Now try logging into the machine, with:   &quot;ssh &#x27;root@192.168.60.135&#x27;&quot;<br>and check to make sure that only the key(s) you wanted were added.<br><br></code></pre></td></tr></table></figure><h5 id="2-3-免密登录测试"><a href="#2-3-免密登录测试" class="headerlink" title="2.3    免密登录测试"></a>2.3    免密登录测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]# ssh node01<br>The authenticity of host &#x27;node01 (192.168.60.134)&#x27; can&#x27;t be established.<br>ECDSA key fingerprint is SHA256:nHfATQ3qdPDhXIYUolQZ08ln0NHNJfr1ul7qwQM3DvU.<br>ECDSA key fingerprint is MD5:5a:18:ac:bd:40:c0:a6:ce:66:1b:0b:c3:64:a9:30:db.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added &#x27;node01&#x27; (ECDSA) to the list of known hosts.<br>Last login: Fri Jun 18 01:11:31 2021 from 192.168.60.1<br>[root@node01 ~]# exit<br>logout<br>Connection to node01 closed.<br></code></pre></td></tr></table></figure><p>master01可以直接登录node01、node02，不需要输入密码。</p><h3 id="二、-搭建Kubernates集群环境"><a href="#二、-搭建Kubernates集群环境" class="headerlink" title="二、    搭建Kubernates集群环境"></a>二、    搭建Kubernates集群环境</h3><h4 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.    Docker安装"></a>1.    Docker安装</h4><blockquote><p>control plane和work节点都执行本部分操作</p></blockquote><h4 id="2-K8s安装"><a href="#2-K8s安装" class="headerlink" title="2.    K8s安装"></a>2.    K8s安装</h4><h5 id="2-1-配置k8s源"><a href="#2-1-配置k8s源" class="headerlink" title="2.1    配置k8s源"></a>2.1    配置k8s源</h5><blockquote><p>这里为了速度，设置为阿里源，需要官方源可在官网查询 <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm">链接</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]#  cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">更新缓存</span><br>[root@master01 ~]# yum clean all<br>[root@master01 ~]# yum -y makecache<br></code></pre></td></tr></table></figure><h5 id="安装kubelet、kubeadm和kubectl"><a href="#安装kubelet、kubeadm和kubectl" class="headerlink" title="安装kubelet、kubeadm和kubectl"></a>安装kubelet、kubeadm和kubectl</h5><blockquote><p>你需要在每台机器上安装以下的软件包：</p><ul><li><code>kubeadm</code>：用来初始化集群的指令。</li><li><code>kubelet</code>：在集群中的每个节点上用来启动 Pod 和容器等。</li><li><code>kubectl</code>：用来与集群通信的命令行工具。</li></ul><p>kubeadm <strong>不能</strong> 帮你安装或者管理 <code>kubelet</code> 或 <code>kubectl</code>，所以你需要 确保它们与通过 kubeadm 安装的控制平面的版本相匹配。 如果不这样做，则存在发生版本偏差的风险，可能会导致一些预料之外的错误和问题。 然而，控制平面与 kubelet 间的相差一个次要版本不一致是支持的，但 kubelet 的版本不可以超过 API 服务器的版本。 例如，1.7.0 版本的 kubelet 可以完全兼容 1.8.0 版本的 API 服务器，反之则不可以。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum安装k8s工具</span><br>yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes<br><span class="hljs-meta">#</span><span class="bash"> 或指定版本安装</span><br>yum install -y kubelet-1.19.2 kubeadm-1.19.2 kubectl-1.19.2  --disableexcludes=kubernetes<br></code></pre></td></tr></table></figure><h5 id="2-2-启动kubelet并设置开启自启动"><a href="#2-2-启动kubelet并设置开启自启动" class="headerlink" title="2.2    启动kubelet并设置开启自启动"></a>2.2    启动kubelet并设置开启自启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# systemctl enable --now kubelet<br></code></pre></td></tr></table></figure><h5 id="2-3-设置kubelet命令补全"><a href="#2-3-设置kubelet命令补全" class="headerlink" title="2.3    设置kubelet命令补全"></a>2.3    设置kubelet命令补全</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# yum install -y bash-completion <br>source /usr/share/bash-completion/bash_completion<br>source &lt;(kubectl completion bash)<br>echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h4 id="3-创建K8s集群"><a href="#3-创建K8s集群" class="headerlink" title="3.    创建K8s集群"></a>3.    创建K8s集群</h4><ul><li><h4 id="Master端"><a href="#Master端" class="headerlink" title="Master端"></a>Master端</h4><p><strong>拉取镜像</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">默认为google镜像，这里采用速度快的阿里镜像</span><br>[root@master01 /]# vim image.sh <br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>url=registry.aliyuncs.com/google_containers<br>version=v1.19.2<br>images=(`kubeadm config images list --kubernetes-version=$version|awk -F &#x27;/&#x27; &#x27;&#123;print $2&#125;&#x27;`)<br>for imagename in $&#123;images[@]&#125; ; do<br>  docker pull $url/$imagename<br>  docker tag $url/$imagename k8s.gcr.io/$imagename<br>  docker rmi -f $url/$imagename<br>done<br><span class="hljs-meta">#</span><span class="bash">运行脚本文件</span><br>[root@master01 /]# sh image.sh<br>[root@master01 /]# docker images<br>REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE<br>hello-world                          latest              d1165f221234        3 months ago        13.3kB<br>k8s.gcr.io/kube-proxy                v1.19.2             d373dd5a8593        9 months ago        118MB<br>k8s.gcr.io/kube-apiserver            v1.19.2             607331163122        9 months ago        119MB<br>k8s.gcr.io/kube-controller-manager   v1.19.2             8603821e1a7a        9 months ago        111MB<br>k8s.gcr.io/kube-scheduler            v1.19.2             2f32d66b884f        9 months ago        45.7MB<br>k8s.gcr.io/etcd                      3.4.13-0            0369cf4303ff        9 months ago        253MB<br>k8s.gcr.io/coredns                   1.7.0               bfe3a36ebd25        12 months ago       45.2MB<br>k8s.gcr.io/pause <br></code></pre></td></tr></table></figure><h5 id="3-1-初始化Master节点"><a href="#3-1-初始化Master节点" class="headerlink" title="3.1    初始化Master节点"></a>3.1    初始化Master节点</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 /]# kubeadm init --apiserver-advertise-address=192.168.60.128 --kubernetes-version v1.19.2 --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16<br><br>W0618 11:08:09.040687   46771 configset.go:348] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]<br>[init] Using Kubernetes version: v1.19.2<br>[preflight] Running pre-flight checks<br>[preflight] Pulling images required for setting up a Kubernetes cluster<br>[preflight] This might take a minute or two, depending on the speed of your internet connection<br>[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;<br>[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;<br>[certs] Generating &quot;ca&quot; certificate and key<br>[certs] Generating &quot;apiserver&quot; certificate and key<br>[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local master01] and IPs [10.1.0.1 192.168.60.128]<br>[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key<br>[certs] Generating &quot;front-proxy-ca&quot; certificate and key<br>[certs] Generating &quot;front-proxy-client&quot; certificate and key<br>[certs] Generating &quot;etcd/ca&quot; certificate and key<br>[certs] Generating &quot;etcd/server&quot; certificate and key<br>[certs] etcd/server serving cert is signed for DNS names [localhost master01] and IPs [192.168.60.128 127.0.0.1 ::1]<br>[certs] Generating &quot;etcd/peer&quot; certificate and key<br>[certs] etcd/peer serving cert is signed for DNS names [localhost master01] and IPs [192.168.60.128 127.0.0.1 ::1]<br>[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key<br>[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key<br>[certs] Generating &quot;sa&quot; key and public key<br>[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;<br>[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file<br>[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file<br>[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file<br>[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file<br>[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;<br>[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;<br>[kubelet-start] Starting the kubelet<br>[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;<br>[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;<br>[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;<br>[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;<br>[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;<br>[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s<br>[apiclient] All control plane components are healthy after 16.041657 seconds<br>[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace<br>[kubelet] Creating a ConfigMap &quot;kubelet-config-1.19&quot; in namespace kube-system with the configuration for the kubelets in the cluster<br>[upload-certs] Skipping phase. Please see --upload-certs<br>[mark-control-plane] Marking the node master01 as control-plane by adding the label &quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot;<br>[mark-control-plane] Marking the node master01 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]<br>[bootstrap-token] Using token: qn63oc.jgql71fc6p7tu4bi<br>[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<br>[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes<br>[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials<br>[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<br>[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster<br>[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace<br>[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key<br>[addons] Applied essential addon: CoreDNS<br>[addons] Applied essential addon: kube-proxy<br><br>Your Kubernetes control-plane has initialized successfully!<br><br>To start using your cluster, you need to run the following as a regular user:<br><br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>You should now deploy a pod network to the cluster.<br>Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:<br>  https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>Then you can join any number of worker nodes by running the following on each as root:<br><span class="hljs-meta">#</span><span class="bash">记住下面命令，用于纳管node节点</span><br>kubeadm join 192.168.60.128:6443 --token qn63oc.jgql71fc6p7tu4bi \<br>    --discovery-token-ca-cert-hash sha256:96a72722626fcc40bae0ab1b6bda78065d6a765cf77ce67e5f8bd07b2bd8b992<br></code></pre></td></tr></table></figure><p>​    如果初始化失败，需要reset后再执行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubeadm reset<br>[root@master01 ~]# rm -rf $HOME/.kube/config<br></code></pre></td></tr></table></figure><h5 id="3-2-加载环境变量"><a href="#3-2-加载环境变量" class="headerlink" title="3.2    加载环境变量"></a>3.2    加载环境变量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile<br>[root@master01 ~]# source .bash_profile<br></code></pre></td></tr></table></figure><h5 id="3-3-安装flannel网络"><a href="#3-3-安装flannel网络" class="headerlink" title="3.3    安装flannel网络"></a>3.3    安装flannel网络</h5><blockquote><p>国内无法访问<a href="https://raw.githubusercontent.com/">https://raw.githubusercontent.com</a> 改为其他方式获得kube-flannel.yml</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在本地生成kube-flannel.yml 在同级目录下执行</span><br>[root@master01 opt]# kubectl apply -f kube-flannel.yml<br>podsecuritypolicy.policy/psp.flannel.unprivileged created<br>Warning: rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole<br>clusterrole.rbac.authorization.k8s.io/flannel created<br>Warning: rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding<br>clusterrolebinding.rbac.authorization.k8s.io/flannel created<br>serviceaccount/flannel created<br>configmap/kube-flannel-cfg created<br>daemonset.apps/kube-flannel-ds-amd64 created<br>daemonset.apps/kube-flannel-ds-arm64 created<br>daemonset.apps/kube-flannel-ds-arm created<br>daemonset.apps/kube-flannel-ds-ppc64le created<br>daemonset.apps/kube-flannel-ds-s390x created<br></code></pre></td></tr></table></figure><h5 id="3-4-查看Master是否部署成功"><a href="#3-4-查看Master是否部署成功" class="headerlink" title="3.4    查看Master是否部署成功"></a>3.4    查看Master是否部署成功</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 opt]# kubectl get pods -n kube-system<br>NAME                               READY   STATUS    RESTARTS   AGE<br>coredns-f9fd979d6-kh2fc            1/1     Running   0          37m<br>coredns-f9fd979d6-lrc27            1/1     Running   0          37m<br>etcd-master01                      1/1     Running   0          37m<br>kube-apiserver-master01            1/1     Running   0          37m<br>kube-controller-manager-master01   1/1     Running   0          37m<br>kube-flannel-ds-amd64-ppp6k        1/1     Running   0          116s<br>kube-proxy-slfk9                   1/1     Running   0          37m<br>kube-scheduler-master01            1/1     Running   0          37m<br>[root@master01 opt]# kubectl get node<br>NAME       STATUS   ROLES    AGE   VERSION<br>master01   Ready    master   37m   v1.19.2<br></code></pre></td></tr></table></figure><h5 id="3-5-纳管node节点"><a href="#3-5-纳管node节点" class="headerlink" title="3.5    纳管node节点"></a>3.5    纳管node节点</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">由于国内网络有墙，会导致部分镜像拉取失败，因此手动拉取镜像</span><br><span class="hljs-meta">#</span><span class="bash">安装镜像</span><br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.19.2<br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">修改镜像tag</span><br>docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.19.2  k8s.gcr.io/kube-proxy:v1.19.2<br>docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2  k8s.gcr.io/pause:3.2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">删除旧的镜像</span><br>docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.19.2<br>docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在需要纳管的节点上输入之前生成的join口令</span><br>kubeadm join 192.168.60.128:6443 --token qn63oc.jgql71fc6p7tu4bi \<br>    --discovery-token-ca-cert-hash sha256:96a72722626fcc40bae0ab1b6bda78065d6a765cf77ce67e5f8bd07b2bd8b992<br></code></pre></td></tr></table></figure><h5 id="3-6-检查集群状态"><a href="#3-6-检查集群状态" class="headerlink" title="3.6    检查集群状态"></a>3.6    检查集群状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">检查下集群的状态：<br>[root@master01 manifests]# kubectl get cs<br>Warning: v1 ComponentStatus is deprecated in v1.19+<br>NAME                 STATUS    MESSAGE             ERROR<br>etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;<br>controller-manager   Healthy   ok<br>scheduler            Healthy   ok<br>[root@master01 manifests]# kubectl get node<br>NAME       STATUS   ROLES    AGE   VERSION<br>master01   Ready    master   82m   v1.19.2<br>node01     Ready    &lt;none&gt;   30m   v1.19.2<br>node02     Ready    &lt;none&gt;   30m   v1.19.2<br>[root@master01 manifests]# kubectl get pod  --all-namespaces<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-f9fd979d6-kh2fc            1/1     Running   0          82m<br>kube-system   coredns-f9fd979d6-lrc27            1/1     Running   0          82m<br>kube-system   etcd-master01                      1/1     Running   0          82m<br>kube-system   kube-apiserver-master01            1/1     Running   0          82m<br>kube-system   kube-controller-manager-master01   1/1     Running   0          4m55s<br>kube-system   kube-flannel-ds-amd64-ppp6k        1/1     Running   0          46m<br>kube-system   kube-flannel-ds-amd64-xq9jb        1/1     Running   1          31m<br>kube-system   kube-flannel-ds-amd64-zfdxg        1/1     Running   0          31m<br>kube-system   kube-proxy-5dg4c                   1/1     Running   0          31m<br>kube-system   kube-proxy-lzjzc                   1/1     Running   0          31m<br>kube-system   kube-proxy-slfk9                   1/1     Running   0          82m<br>kube-system   kube-scheduler-master01            1/1     Running   0          3m56s <br></code></pre></td></tr></table></figure><h5 id="3-7-问题处理"><a href="#3-7-问题处理" class="headerlink" title="3.7    问题处理"></a>3.7    问题处理</h5><p><strong>问题1：</strong>执行完kubeadm join后在master节点执行kubectl get nodes 发现node节点状态为NotReady</p><p><strong>解决方法：</strong>在node节点查看日志，或者journalctl -f -u kubelet发现有报错日志如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized<br><span class="hljs-meta">#</span><span class="bash">通过日志可以看出是网络组件出现的问题，然后在node节点上执行docker images，查看到flannel组件的镜像没有拉取到，如没有可用手动拉取</span><br></code></pre></td></tr></table></figure><p><strong>问题2：</strong>在我们正常安装kubernetes1.19.2之后，可能会出现以下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master manifests]# kubectl get cs<br>NAME                 STATUS      MESSAGE                                                                                     ERROR<br>scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused<br>controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused<br>etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;<br></code></pre></td></tr></table></figure><p><strong>解决方法：</strong>出现这种情况，是/etc/kubernetes/manifests下的kube-controller-manager.yaml和kube-scheduler.yaml设置的默认端口是0，在文件中注释掉就可以了。</p><p>kube-controller-manager.yaml文件修改：注释掉27行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>  2 kind: Pod<br>  3 metadata:<br>  4   creationTimestamp: null<br>  5   labels:<br>  6     component: kube-controller-manager<br>  7     tier: control-plane<br>  8   name: kube-controller-manager<br>  9   namespace: kube-system<br> 10 spec:<br> 11   containers:<br> 12   - command:<br> 13     - kube-controller-manager<br> 14     - --allocate-node-cidrs=true<br> 15     - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf<br> 16     - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf<br> 17     - --bind-address=127.0.0.1<br> 18     - --client-ca-file=/etc/kubernetes/pki/ca.crt<br> 19     - --cluster-cidr=10.244.0.0/16<br> 20     - --cluster-name=kubernetes<br> 21     - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt<br> 22     - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key<br> 23     - --controllers=*,bootstrapsigner,tokencleaner<br> 24     - --kubeconfig=/etc/kubernetes/controller-manager.conf<br> 25     - --leader-elect=true<br> 26     - --node-cidr-mask-size=24<br> 27   #  - --port=0<br> 28     - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt<br> 29     - --root-ca-file=/etc/kubernetes/pki/ca.crt<br> 30     - --service-account-private-key-file=/etc/kubernetes/pki/sa.key<br> 31     - --service-cluster-ip-range=10.1.0.0/16<br> 32     - --use-service-account-credentials=true<br></code></pre></td></tr></table></figure><p>kube-scheduler.yaml配置修改：注释掉19行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 apiVersion: v1<br>  2 kind: Pod<br>  3 metadata:<br>  4   creationTimestamp: null<br>  5   labels:<br>  6     component: kube-scheduler<br>  7     tier: control-plane<br>  8   name: kube-scheduler<br>  9   namespace: kube-system<br> 10 spec:<br> 11   containers:<br> 12   - command:<br> 13     - kube-scheduler<br> 14     - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf<br> 15     - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf<br> 16     - --bind-address=127.0.0.1<br> 17     - --kubeconfig=/etc/kubernetes/scheduler.conf<br> 18     - --leader-elect=true<br> 19   #  - --port=0<br></code></pre></td></tr></table></figure><p>然后三台机器均重启kubelet即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@master01]#</span><span class="bash"> systemctl restart kubelet.service</span><br></code></pre></td></tr></table></figure><h5 id="3-8-部署Dashboard"><a href="#3-8-部署Dashboard" class="headerlink" title="3.8    部署Dashboard"></a>3.8    部署Dashboard</h5><blockquote><p>如果国内无法访问raw.githubusercontent.com，需要在hosts里配置一下。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 opt]# vim /etc/hosts<br><span class="hljs-meta">#</span><span class="bash">在最后一行添加（添加前先ping下IP看是不是通的）</span><br>199.232.96.133     raw.githubusercontent.com<br></code></pre></td></tr></table></figure><blockquote><p>注意版本配套关系，这里我们的K8s采用的是1.19.2版本，在<a href="https://github.com/kubernetes/dashboard/releases%EF%BC%8C%E4%B8%8A%E5%8F%AF%E6%9F%A5%E5%88%B0%E9%85%8D%E5%A5%97%E5%85%B3%E7%B3%BB%E4%B8%BAv2.0.4%E3%80%82">https://github.com/kubernetes/dashboard/releases，上可查到配套关系为v2.0.4。</a> </p><table><thead><tr><th>Kubernetes version</th><th>1.16</th><th>1.17</th><th>1.18</th><th>1.19</th></tr></thead><tbody><tr><td>Compatibility</td><td>?</td><td>?</td><td>?</td><td>✓</td></tr></tbody></table></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">下载recommended.yaml 配置文件</span><br><span class="hljs-meta">[root@master01]#</span><span class="bash"> wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.4/aio/deploy/recommended.yaml</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">DashBoard默认为ClusterIP访问，为了方便，改为通过NodeIP浏览器访问。修改recommended.yaml中Service部分</span><br>-----------------------------------<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: kubernetes-dashboard<br>  namespace: kubernetes-dashboard<br>spec:<br>  type: NodePort<br>  ports:<br>    - port: 443<br>      targetPort: 8443<br>      nodePort: 30443<br>  selector:<br>    k8s-app: kubernetes-dashboard<br>-----------------------------------<br><span class="hljs-meta">#</span><span class="bash">启动Dashboard</span><br><span class="hljs-meta">[root@master01]#</span><span class="bash"> kubectl apply -f recommended.yaml</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">这里通过token方式登录，我们先创建管理员账号</span><br>[root@master01 opt]# cat &gt; dashboard-adminuser.yaml &lt;&lt; EOF<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: admin-user<br>  namespace: kubernetes-dashboard<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: admin-user<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-admin<br>subjects:<br>- kind: ServiceAccount<br>  name: admin-user<br>  namespace: kubernetes-dashboard<br>EOF<br>[root@master01 opt]# kubectl apply -f dashboard-adminuser.yaml<br>serviceaccount/admin-user created<br>clusterrolebinding.rbac.authorization.k8s.io/admin-user created<br><span class="hljs-meta">#</span><span class="bash">获取登录token</span><br>[root@master01 opt]# kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &#x27;&#123;print $1&#125;&#x27;)<br>Name:         admin-user-token-w27xh<br>Namespace:    kubernetes-dashboard<br>Labels:       &lt;none&gt;<br>Annotations:  kubernetes.io/service-account.name: admin-user<br>              kubernetes.io/service-account.uid: c1e55fd6-a07c-4920-9ca6-a359db8994de<br><br>Type:  kubernetes.io/service-account-token<br><br>Data<br>====<br>ca.crt:     1066 bytes<br>namespace:  20 bytes<br>token:      eyJhbGciOiJSUzI1NiIsImtpZCI6InFyX0QwcEQxMTVFVU4zaDk5c0xTYVoxZkJRQnBNUy1OSUxwR3kwNmFnaDgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXcyN3hoIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJjMWU1NWZkNi1hMDdjLTQ5MjAtOWNhNi1hMzU5ZGI4OTk0ZGUiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.nGEpnZmSQoUTqdLE9NWVIumVxqRh-AFkoLQPLUzWyHQwMPhc1XrTyW8CEDSSqWWgFWOihKEFmPY5WtNjew-p3RZheT2Gj2nBmj84Bzv7FD0JgYw8WLw_Uvjt_c90tq18qwqe9KAT-ameqthdIEVxEAcYIywuMujZrDeR346HLo2vvXSrZHe8ELlwJdyg_VoSlzRc9f15Qt5h8EvyBULdYx5ssSqeJXXWVDhysxl99IBNkrFmU_CqOA42fydVn_S5p1cJDWgAw9YcQ8ub7D3g-98uw6RR2hjDpV8Q-ciUiH321tI1xvuvJX2DC_nSvB85b52r03tzosydfNe5hTmWbQ<br></code></pre></td></tr></table></figure><p>输入<a href="https://anynodeip:30443/">https://AnyNodeIp:30443</a> 输入token登录即可</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/37f6d6a87a27477236dd925641ee3130_1073x442.png@900-0-90-f.png"></p><h3 id="三、-部署应用"><a href="#三、-部署应用" class="headerlink" title="三、    部署应用"></a>三、    部署应用</h3><h3 id="四、-常用K8s命令"><a href="#四、-常用K8s命令" class="headerlink" title="四、    常用K8s命令"></a>四、    常用K8s命令</h3><hr><blockquote><p>常用参数：</p><p>-n    ：指定命名空间，缺省值为default</p><p>-A    ：查看所有资源</p></blockquote><h4 id="查看资源"><a href="#查看资源" class="headerlink" title="查看资源"></a>查看资源</h4><h5 id="查看有哪些对象在命名空间里面"><a href="#查看有哪些对象在命名空间里面" class="headerlink" title="查看有哪些对象在命名空间里面"></a>查看有哪些对象在命名空间里面</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl api-resources --namespaced=true<br>NAME                        SHORTNAMES   APIGROUP                    NAMESPACED   KIND<br>bindings                                                             true         Binding<br>configmaps                  cm                                       true         ConfigMap<br>endpoints                   ep                                       true         Endpoints<br>events                      ev                                       true         Event<br>limitranges                 limits                                   true         LimitRange<br>persistentvolumeclaims      pvc                                      true         PersistentVolumeClaim<br>pods                        po                                       true         Pod<br>podtemplates                                                         true         PodTemplate<br>replicationcontrollers      rc                                       true         ReplicationController<br>resourcequotas              quota                                    true         ResourceQuota<br>......<br></code></pre></td></tr></table></figure><hr><h5 id="查看命名空间下游哪些资源"><a href="#查看命名空间下游哪些资源" class="headerlink" title="查看命名空间下游哪些资源"></a>查看命名空间下游哪些资源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n projectName<br></code></pre></td></tr></table></figure><h5 id="查看有哪些命名空间（namespace）"><a href="#查看有哪些命名空间（namespace）" class="headerlink" title="查看有哪些命名空间（namespace）"></a>查看有哪些命名空间（namespace）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl get namespace<br>NAME                   STATUS   AGE<br>default                Active   15h<br>kube-node-lease        Active   15h<br>kube-public            Active   15h<br>kube-system            Active   15h<br>kubernetes-dashboard   Active   3h46m<br></code></pre></td></tr></table></figure><h5 id="通过describe即查看所有细节"><a href="#通过describe即查看所有细节" class="headerlink" title="通过describe即查看所有细节"></a>通过describe即查看所有细节</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl describe statefulset/registry -n projectName<br>Name:               registry<br>Namespace:          projectName<br>CreationTimestamp:  Mon, 28 Jun 2021 11:08:37 -0400<br>Selector:           app=registry<br>Labels:             &lt;none&gt;<br>Annotations:        &lt;none&gt;<br>Replicas:           3 desired | 3 total<br>Update Strategy:    RollingUpdate<br>  Partition:        0<br>Pods Status:        3 Running / 0 Waiting / 0 Succeeded / 0 Failed<br>Pod Template:<br>  Labels:  app=registry<br>  Containers:<br>   registry:<br>    Image:      192.168.60.128:5000/registry:1.0.0<br>    Port:       8022/TCP<br>    Host Port:  0/TCP<br>    Environment:<br>      MY_POD_NAME:                (v1:metadata.name)<br>      EUREKA_SERVER:             http://registry-0.registry-service:8022/eureka,http://eureka-1.eureka-headless:8761/eureka<br>      EUREKA_INSTANCE_HOSTNAME:  $&#123;MY_POD_NAME&#125;.eureka-headless<br>    Mounts:                      &lt;none&gt;<br>  Volumes:                       &lt;none&gt;<br>Volume Claims:                   &lt;none&gt;<br>Events:                          &lt;none&gt;<br></code></pre></td></tr></table></figure><h5 id="追踪部署情况"><a href="#追踪部署情况" class="headerlink" title="追踪部署情况"></a>追踪部署情况</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl rollout status statefulset/registry -n projectNamepartitioned roll out complete: 3 new pods have been updated...<br></code></pre></td></tr></table></figure><h5 id="查看statefulset"><a href="#查看statefulset" class="headerlink" title="查看statefulset"></a>查看statefulset</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl get statefulsets -n projectNameNAME                 READY   AGEregistry   3/3     33h<br></code></pre></td></tr></table></figure><h5 id="查看service"><a href="#查看service" class="headerlink" title="查看service"></a>查看service</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl get svc -ANAMESPACE              NAME                        TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                  AGEdefault                kubernetes                  ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP                  11dkube-system            kube-dns                    ClusterIP   10.1.0.10     &lt;none&gt;        53/UDP,53/TCP,9153/TCP   11dkubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.1.159.53   &lt;none&gt;        8000/TCP                 10dkubernetes-dashboard   kubernetes-dashboard        NodePort    10.1.241.91   &lt;none&gt;        443:30306/TCP            10dprojectName              registry-service            ClusterIP   None          &lt;none&gt;        8022/TCP                 33h<br></code></pre></td></tr></table></figure><h5 id="查看所有POD信息"><a href="#查看所有POD信息" class="headerlink" title="查看所有POD信息"></a>查看所有POD信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl get pods -A -o wideNAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE   IP               NODE       NOMINATED NODE   READINESS GATESkube-system            coredns-f9fd979d6-kh2fc                      1/1     Running   2          11d   10.244.0.7       master01   &lt;none&gt;           &lt;none&gt;kube-system            coredns-f9fd979d6-lrc27                      1/1     Running   2          11d   10.244.0.6       master01   &lt;none&gt;           &lt;none&gt;kube-system            etcd-master01                                1/1     Running   4          11d   192.168.60.128   master01   &lt;none&gt;           &lt;none&gt;kube-system            kube-apiserver-master01                      1/1     Running   4          11d   192.168.60.128   master01   &lt;none&gt;           &lt;none&gt;kube-system            kube-controller-manager-master01             1/1     Running   19         10d   192.168.60.128   master01   &lt;none&gt;           &lt;none&gt;kube-system            kube-flannel-ds-amd64-ppp6k                  1/1     Running   3          10d   192.168.60.128   master01   &lt;none&gt;           &lt;none&gt;kube-system            kube-flannel-ds-amd64-xq9jb                  1/1     Running   2          10d   192.168.60.130   node02     &lt;none&gt;           &lt;none&gt;kube-system            kube-flannel-ds-amd64-zfdxg                  1/1     Running   1          10d   192.168.60.129   node01     &lt;none&gt;           &lt;none&gt;kube-system            kube-proxy-5dg4c                             1/1     Running   2          10d   192.168.60.130   node02     &lt;none&gt;           &lt;none&gt;kube-system            kube-proxy-lzjzc                             1/1     Running   2          10d   192.168.60.129   node01     &lt;none&gt;           &lt;none&gt;kube-system            kube-proxy-slfk9                             1/1     Running   3          11d   192.168.60.128   master01   &lt;none&gt;           &lt;none&gt;kube-system            kube-scheduler-master01                      1/1     Running   24         10d   192.168.60.128   master01   &lt;none&gt;           &lt;none&gt;kubernetes-dashboard   dashboard-metrics-scraper-7b59f7d4df-cslj5   1/1     Running   2          10d   10.244.2.4       node02     &lt;none&gt;           &lt;none&gt;kubernetes-dashboard   kubernetes-dashboard-665f4c5ff-wc2t6         1/1     Running   25         10d   10.244.1.3       node01     &lt;none&gt;           &lt;none&gt;projectName              registry-0                         1/1     Running   0          15h   10.244.1.12      node01     &lt;none&gt;           &lt;none&gt;projectName              registry-1                         1/1     Running   0          15h   10.244.1.11      node01     &lt;none&gt;           &lt;none&gt;projectName              registry-2                         1/1     Running   3          15h   10.244.2.7       node02     &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><h4 id="操作资源"><a href="#操作资源" class="headerlink" title="操作资源"></a>操作资源</h4><h5 id="部署service"><a href="#部署service" class="headerlink" title="部署service"></a>部署service</h5><p>服务的暴露需要Service，它是Pod的抽象代理</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-service</span><br><span class="hljs-attr">spec:</span><br> <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br> <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br> <span class="hljs-attr">selector:</span><br> <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br> <span class="hljs-attr">ports:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br> <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30080</span><br></code></pre></td></tr></table></figure><ul><li>kind：Service代表是一个服务</li><li>type：NodePort k8s将会在每个Node上打开一个端口并且每个Node的端口都是一样的，通过<NodeIP>:NodePort的方式Kubernetes集群外部的程序可以访问Service。</li><li>selector：哪个服务需要暴露</li><li>port：service暴露的端口</li><li>TargetPort：pod的端口</li><li>nodePort：对外暴露的端口，不设置会默认分配，范围：30000－32767</li><li>转发逻辑是：<br><NodeIP>:<nodeport> =&gt; <ServiceVIP>:<port>=&gt; <PodIP>:<targetport></li></ul><p>部署service服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">yaml</span>]<span class="hljs-comment"># kubectl create -f nginx-service.yaml </span><br>service <span class="hljs-string">&quot;nginx-service&quot;</span> created<br></code></pre></td></tr></table></figure><p>可看到启动了一个svc</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">NAME</span> <span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">CLUSTER</span>-IP <span class="hljs-keyword">EXTERNAL</span>-IP PORT(S) AGE<br>svc/kubernetes ClusterIP <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> &lt;<span class="hljs-keyword">none</span>&gt; <span class="hljs-number">443</span>/TCP <span class="hljs-number">1</span>d<br></code></pre></td></tr></table></figure><h5 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -n 命名空间</span><br>[root@master01 ~]# kubectl exec -it registry-1 -n projectName /bin/bash<br></code></pre></td></tr></table></figure><h5 id="进入crash容器进行Debug"><a href="#进入crash容器进行Debug" class="headerlink" title="进入crash容器进行Debug"></a>进入crash容器进行Debug</h5><p>在 <a href="https://snippets.aktagon.com/snippets/871-how-to-debug-crashloopbackoff">How to debug CrashLoopBackOff</a> 找到了解决方法：修改 pod 部署配置文件，将容器启动入口命令修改为 sleep 命令</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">yyy/xxx:1.0.0</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">xxx-service</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;sh&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;sleep 10000&quot;</span><br></code></pre></td></tr></table></figure><h5 id="更新Deployment"><a href="#更新Deployment" class="headerlink" title="更新Deployment"></a>更新Deployment</h5><p>假设我们想把nginx从1.7.9更新到1.9.1</p><h6 id="方式1：直接set命令设置变更的部分"><a href="#方式1：直接set命令设置变更的部分" class="headerlink" title="方式1：直接set命令设置变更的部分"></a>方式1：直接set命令设置变更的部分</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1<br>deployment &quot;nginx-deployment&quot; image updated<br></code></pre></td></tr></table></figure><p>以上命令会自动回滚更改Pods，即停止一定量的老的，新建新的，直到来的终止完，新的启动完</p><h6 id="方式2：通过直接修改线上的配置修改"><a href="#方式2：通过直接修改线上的配置修改" class="headerlink" title="方式2：通过直接修改线上的配置修改"></a>方式2：通过直接修改线上的配置修改</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl edit deployment/nginx-deployment<br></code></pre></td></tr></table></figure><p>会打开一个编辑器，修改指定的部分即可，这里是.spec.template.spec.containers[0].image</p><h6 id="方式3：修改yaml文件，通过apply重新部署"><a href="#方式3：修改yaml文件，通过apply重新部署" class="headerlink" title="方式3：修改yaml文件，通过apply重新部署"></a>方式3：修改yaml文件，通过apply重新部署</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master yaml]# kubectl apply -f nginx-deployment.yaml<br></code></pre></td></tr></table></figure><h5 id="回滚Deployment"><a href="#回滚Deployment" class="headerlink" title="回滚Deployment"></a>回滚Deployment</h5><p>有时需要回滚的操作，比如更新错误，手误等一系列问题</p><p>比如上面的操作更新了一个不存在或者错误的版本1.0.1时</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master yaml]# kubectl <span class="hljs-builtin-name">set</span> image statefulset/registry -n projectName <span class="hljs-attribute">app</span>=registry:1.0.1statefulset <span class="hljs-string">&quot;registry&quot;</span> image updated<br></code></pre></td></tr></table></figure><p>追踪状态</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># kubectl rollout status statefulset/registry -n projectNameWaiting for 1 pods to be ready...</span><br></code></pre></td></tr></table></figure><p>可见卡住不动了， Ctrl+C终止，查看rs如下</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># kubectl get statefulsets -ANAMESPACE   NAME                 READY   AGEprojectName   registry   2/3     33h</span><br></code></pre></td></tr></table></figure><p>新的rs只启动了Pod但没有处于READY状态</p><p>查看Pods</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@master01</span> <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-operator">-</span>ANAMESPACE              NAME                                         READY   STATUS             RESTARTS   AGE...projectName              registry<span class="hljs-number">-0</span>                         <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>            <span class="hljs-number">1</span>          <span class="hljs-number">24</span>hprojectName              registry<span class="hljs-number">-1</span>                         <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>            <span class="hljs-number">1</span>          <span class="hljs-number">24</span>hprojectName              registry<span class="hljs-number">-2</span>                         <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     ImagePullBackOff   <span class="hljs-number">0</span>          <span class="hljs-number">49</span>s<br></code></pre></td></tr></table></figure><p>可发现ImagePullBackOff，实际就是镜像不存在</p><p>要修复这个，我们就需要rollback到前一个ok的版本</p><p>查看操作历史</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">[root@master01 ~]# kubectl rollout <span class="hljs-keyword">history</span> statefulset/<span class="hljs-keyword">registry</span> -n projectName<br>statefulset.apps/<span class="hljs-keyword">registry</span><br>REVISION<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>要查看每个版本的详细情况，指定–revision</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master yaml]<span class="hljs-meta"># kubectl rollout history deployment/nginx-deployment --revision=2</span><br>deployments <span class="hljs-string">&quot;nginx-deployment&quot;</span> with revision <span class="hljs-meta">#2</span><br>Pod Template:<br><span class="hljs-symbol"> Labels:</span> app=nginx<br> pod-template-hash=<span class="hljs-number">2710681425</span><br><span class="hljs-symbol"> Annotations:</span> kubernetes.io/change-cause=kubectl edit deployment/nginx-deployment<br><span class="hljs-symbol"> Containers:</span><br><span class="hljs-symbol"> nginx:</span><br><span class="hljs-symbol"> Image:</span> nginx:<span class="hljs-number">1.9</span><span class="hljs-number">.1</span><br><span class="hljs-symbol"> Port:</span> <span class="hljs-number">80</span>/TCP<br><span class="hljs-symbol"> Environment:</span> <span class="hljs-params">&lt;none&gt;</span><br><span class="hljs-symbol"> Mounts:</span> <span class="hljs-params">&lt;none&gt;</span><br><span class="hljs-symbol"> Volumes:</span> <span class="hljs-params">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><p>接下来进行回滚的操作</p><p>不指定版本，默认回滚到上一个版本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@master01 ~]<span class="hljs-comment"># kubectl rollout undo statefulset/registry -n projectName</span><br>statefulset.apps/registry rolled <span class="hljs-keyword">back</span><br></code></pre></td></tr></table></figure><p>指定版本，通过–to-revision指定</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@master01 ~]<span class="hljs-comment"># kubectl rollout undo statefulset/registry -n projectName --to-revision=2</span><br>statefulset.apps/registry rolled <span class="hljs-keyword">back</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl describe deployment/nginx-deployment<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>略<br>Events:<br> FirstSeen LastSeen Count <span class="hljs-keyword">From</span> SubobjectPath<span class="hljs-built_in"> Type </span>Reason Message<br> --------- -------- ----- ---- ------------- -------- ------ -------<br><br> 30m 30m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled up replica <span class="hljs-builtin-name">set</span> nginx-deployment-2035384211 <span class="hljs-keyword">to</span> 3<br> 29m 29m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled up replica <span class="hljs-builtin-name">set</span> nginx-deployment-1564180365 <span class="hljs-keyword">to</span> 1<br> 29m 29m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled down replica <span class="hljs-builtin-name">set</span> nginx-deployment-2035384211 <span class="hljs-keyword">to</span> 2<br> 29m 29m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled up replica <span class="hljs-builtin-name">set</span> nginx-deployment-1564180365 <span class="hljs-keyword">to</span> 2<br> 29m 29m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled down replica <span class="hljs-builtin-name">set</span> nginx-deployment-2035384211 <span class="hljs-keyword">to</span> 0<br> 29m 29m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled up replica <span class="hljs-builtin-name">set</span> nginx-deployment-3066724191 <span class="hljs-keyword">to</span> 2<br> 29m 29m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled up replica <span class="hljs-builtin-name">set</span> nginx-deployment-3066724191 <span class="hljs-keyword">to</span> 1<br> 29m 29m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled down replica <span class="hljs-builtin-name">set</span> nginx-deployment-1564180365 <span class="hljs-keyword">to</span> 2<br> 2m 2m 1 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled down replica <span class="hljs-builtin-name">set</span> nginx-deployment-3066724191 <span class="hljs-keyword">to</span> 0<br> 2m 2m 1 &#123;deployment-controller &#125; Normal DeploymentRollback Rolled back deployment <span class="hljs-string">&quot;nginx-deployment&quot;</span> <span class="hljs-keyword">to</span> revision 2<br> 29m 2m 2 &#123;deployment-controller &#125; Normal ScalingReplicaSet Scaled up replica <span class="hljs-builtin-name">set</span> nginx-deployment-1564180365 <span class="hljs-keyword">to</span> 3<br></code></pre></td></tr></table></figure><p>可看到有DeploymentRollback Reason的事件</p><h5 id="删除Deployment-这里是Statefulset"><a href="#删除Deployment-这里是Statefulset" class="headerlink" title="删除Deployment(这里是Statefulset)"></a>删除Deployment(这里是Statefulset)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 k8s-projectName]# kubectl delete -f registry-sts.yml<br>namespace &quot;projectName&quot; deleted<br>statefulset.apps &quot;registry&quot; deleted<br>service &quot;registry-service&quot; deleted<br></code></pre></td></tr></table></figure><blockquote><p>至此，一个完整的K8s本地学习测试环境就搭建好了，如果细心一点会发现，我们的集群还面临高可用性、性能调优、日志挂载等问题，这个我们留下一个疑问，在后面的博文中在深入探讨。下面我们将进行微服务的改造、部署。</p></blockquote><h2 id="3-如何发布应用"><a href="#3-如何发布应用" class="headerlink" title="3.    如何发布应用"></a>3.    如何发布应用</h2><h3 id="3-1-构建镜像"><a href="#3-1-构建镜像" class="headerlink" title="3.1    构建镜像"></a>3.1    构建镜像</h3><p>容器化需要对我们的部署包进行改造，以前我们使用maven打成jar包 java -jar或 war包放在tomcat的webapps中来方式来部署我们的应用。现在我们需要把我们的应用层、所有的配置信息、日志的挂载卷统统打包成一个docker镜像，这个镜像包可以运行在任何一个docker运行时之上。其中具体的操作步骤就不在此细谈，我们放到另外一个帖子中。</p><h3 id="3-2-配置文件"><a href="#3-2-配置文件" class="headerlink" title="3.2    配置文件"></a>3.2    配置文件</h3><h4 id="3-2-1-命名空间"><a href="#3-2-1-命名空间" class="headerlink" title="3.2.1    命名空间"></a>3.2.1    命名空间</h4><p>k8s 的隔离机制是使用命名空间进行隔离，不同的命名空间网络是不通的。创建一个命名空间，把应用相关的所有资源放在一个命名空间下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#Namespace</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">namespace</span><br>   <span class="hljs-attr">labels:</span><br>     <span class="hljs-attr">name:</span> <span class="hljs-string">namespace</span><br></code></pre></td></tr></table></figure><h4 id="3-2-2-MicroService"><a href="#3-2-2-MicroService" class="headerlink" title="3.2.2    MicroService"></a>3.2.2    MicroService</h4><p><strong>StatefulSet</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 有状态pod，会自动根据metadata.name及实例数量生产xxx-0,xxx-1的pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">registry</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">projectName</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">eureka-headless</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">registry</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">registry</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">registry</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.60</span><span class="hljs-number">.128</span><span class="hljs-string">:5000/registry:1.0.0</span> <span class="hljs-comment"># 配置镜像路径，也就是我们刚才push好的镜像</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8022</span><br>          <span class="hljs-attr">env:</span> <span class="hljs-comment"># 环境变量设置</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAME</span> <br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span> <span class="hljs-comment"># 取值metadata.name，这里注意，statefulset类型的对象取到的是有-0,-1序号后缀的</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">EUREKA_SERVER</span> <span class="hljs-comment">#环境变量，这个变量在我们项目的配置文件中有配置,作用是配置eureka集群的所有地址，注意相同namespace底下使用dns访问时，不需要配置全路径（全路径为podname.headless-name.namespace.cluster.svc.local),只要到podname.headless-name</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;http://eureka-0.eureka-headless:8761/eureka,http://eureka-1.eureka-headless:8761/eureka&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">EUREKA_INSTANCE_HOSTNAME</span> <span class="hljs-comment">#环境变量，这个变量在我们项目的配置文件中有配置，作用是指定注册到eureka集群中的hostname</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;MY_POD_NAME&#125;.eureka-headless</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">&quot;Parallel&quot;</span> <span class="hljs-comment"># 以并行方式创建pod，默认是串行的</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># headless service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">registry-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">projectName</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">registry</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8022</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">registry-svc-port</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8022</span> <br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">registry</span><br></code></pre></td></tr></table></figure><p><strong>进入容器内检查</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl exec -it registry-0 -n projectName /bin/bash<br>[registry@registry-0 /]$ hostname<br>registry-0<br>[registry@registry-0 /]$ cat /etc/resolv.conf<br>nameserver 10.1.0.10<br>search projectName.svc.cluster.local svc.cluster.local cluster.local localdomain<br>options ndots:5<br><span class="hljs-meta">#</span><span class="bash">检查环境变量是否生效</span><br>[registry@registry-0 /]$ printenv<br>...<br>INSTALL_HOME=/opt/docker_install<br>HOSTNAME=registry-0<br>EUREKA_SERVER=http://registry-0.registry-service:8022/eureka,http://eureka-1.eureka-headless:8761/eureka<br>KUBERNETES_PORT_443_TCP_PORT=443<br>KUBERNETES_PORT=tcp://10.1.0.1:443<br>TERM=xterm<br>KUBERNETES_SERVICE_PORT=443<br>KUBERNETES_SERVICE_HOST=10.1.0.1<br>JRE_HOME=/opt/JRE/jre1.8.0_232<br>SCRIPT_NAME=install_projectName_registry.sh<br>EUREKA_INSTANCE_HOSTNAME=$&#123;MY_POD_NAME&#125;.eureka-headless<br>TOMCATPATH=/data01/registry/tomcat<br>PATH=/opt/JRE/jre1.8.0_232/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br>MY_POD_NAME=registry-0<br>PWD=/<br>JAVA_HOME=/opt/JRE/jre1.8.0_232<br>APP_HOME=/data01/registry<br>SHLVL=1<br>HOME=/data01/registry<br>KUBERNETES_PORT_443_TCP_PROTO=tcp<br>KUBERNETES_SERVICE_PORT_HTTPS=443<br>CLASSPATH=:/opt/JRE/jre1.8.0_232/lib<br>REGISTRY_HOME=/data01/registry<br>KUBERNETES_PORT_443_TCP_ADDR=10.1.0.1<br>KUBERNETES_PORT_443_TCP=tcp://10.1.0.1:443<br>_=/usr/bin/printenv<br>...<br><br></code></pre></td></tr></table></figure><p>​    <strong>检查podDNS地址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 ~]# kubectl run -i --tty --image=busybox:1.27 -n projectName dns-test --restart=Never --rm<br>If you don&#x27;t see a command prompt, try pressing enter.<br>/ # nslookup registry-service   #注意nslookup 后面跟的是服务名<br>Server:    10.1.0.10<br>Address 1: 10.1.0.10 kube-dns.kube-system.svc.cluster.local<br><br>Name:      registry-service<br>Address 1: 10.244.1.4 registry-1.registry-service.projectName.svc.cluster.local<br>Address 2: 10.244.2.6 registry-2.registry-service.projectName.svc.cluster.local<br>Address 3: 10.244.2.5 registry-0.registry-service.projectName.svc.cluster.local<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">可以查看到各POD的DNS信息</span><br></code></pre></td></tr></table></figure><h3 id="3-3-模型组网设计"><a href="#3-3-模型组网设计" class="headerlink" title="3.3 模型组网设计"></a>3.3 模型组网设计</h3><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104175811014.png"></p><h2 id="4-模板文件"><a href="#4-模板文件" class="headerlink" title="4.模板文件"></a>4.模板文件</h2><h3 id="4-1-deployment-yaml文件详解（集群pod管理，自动伸缩相关）"><a href="#4-1-deployment-yaml文件详解（集群pod管理，自动伸缩相关）" class="headerlink" title="4.1 deployment.yaml文件详解（集群pod管理，自动伸缩相关）"></a>4.1 deployment.yaml文件详解（集群pod管理，自动伸缩相关）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span>   <span class="hljs-comment">#接口版本   #查看api接口命令kubectl api-version</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>                 <span class="hljs-comment">#接口类型</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cango-demo</span>               <span class="hljs-comment">#Deployment名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">cango-prd</span>           <span class="hljs-comment">#命名空间</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">cango-demo</span>              <span class="hljs-comment">#标签</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span>  <span class="hljs-comment">##由于replicas为3,则整个升级,pod个数在2-4个之间</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span>      <span class="hljs-comment">#滚动升级时会先启动1个pod</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#滚动升级时允许的最大Unavailable的pod个数</span><br>  <span class="hljs-attr">template:</span>         <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span>             <span class="hljs-comment"># matchLabels一样匹配下面的pods标签</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">cango-demo</span>  <span class="hljs-comment">#模板名称必填</span><br>    <span class="hljs-attr">sepc:</span> <span class="hljs-comment">#定义容器模板，该模板可以包含多个容器</span><br>      <span class="hljs-attr">containers:</span>                                                                   <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cango-demo</span>                                                           <span class="hljs-comment">#镜像名称</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">swr.cn-east-2.myhuaweicloud.com/cango-prd/cango-demo:0.0.1-SNAPSHOT</span> <span class="hljs-comment">#镜像地址</span><br>          <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;cat /etc/config/path/to/special-key&quot;</span> ]    <span class="hljs-comment">#启动命令</span><br>          <span class="hljs-attr">args:</span>                                                                <span class="hljs-comment">#启动参数</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-storage.local.retention=$(STORAGE_RETENTION)&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-storage.local.memory-chunks=$(STORAGE_MEMORY_CHUNKS)&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-config.file=/etc/prometheus/prometheus.yml&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-alertmanager.url=http://alertmanager:9093/alertmanager&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;-web.external-url=$(EXTERNAL_URL)&#x27;</span><br>    <span class="hljs-comment">#如果command和args均没有写，那么用Docker默认的配置。</span><br>    <span class="hljs-comment">#如果command写了，但args没有写，那么Docker默认的配置会被忽略而且仅仅执行.yaml文件的command（不带任何参数的）。</span><br>    <span class="hljs-comment">#如果command没写，但args写了，那么Docker默认配置的ENTRYPOINT的命令行会被执行，但是调用的参数是.yaml中的args。</span><br>    <span class="hljs-comment">#如果如果command和args都写了，那么Docker默认的配置被忽略，使用.yaml的配置。</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>  <span class="hljs-comment">#如果不存在则拉取</span><br>          <span class="hljs-attr">livenessProbe:</span>       <span class="hljs-comment">#表示container是否处于live状态。如果LivenessProbe失败，LivenessProbe将会通知kubelet对应的container不健康了。随后kubelet将kill掉container，并根据RestarPolicy进行进一步的操作。默认情况下LivenessProbe在第一次检测之前初始化值为Success，如果container没有提供LivenessProbe，则也认为是Success；</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span> <span class="hljs-comment">#如果没有心跳检测接口就为/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>              <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span> <span class="hljs-comment">##启动后延时多久开始运行检测</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>            <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span> <span class="hljs-comment">#如果没有心跳检测接口就为/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>              <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span> <span class="hljs-comment">##启动后延时多久开始运行检测</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>            <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">resources:</span>              <span class="hljs-comment">##CPU内存限制</span><br>            <span class="hljs-attr">requests:</span>             <span class="hljs-comment">##资源请求</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>          <span class="hljs-attr">env:</span>                    <span class="hljs-comment">##通过环境变量的方式，直接传递pod=自定义Linux OS环境变量</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LOCAL_KEY</span>     <span class="hljs-comment">#本地Key</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">value</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CONFIG_MAP_KEY</span>  <span class="hljs-comment">#局策略可使用configMap的配置Key，</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span>   <span class="hljs-comment">#configmap中找到name为special-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">special.type</span>      <span class="hljs-comment">#找到name为special-config里data下的key</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span> <span class="hljs-comment">#对service暴露端口</span><br>          <span class="hljs-attr">volumeMounts:</span>     <span class="hljs-comment">#挂载volumes中定义的磁盘</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">log-cache</span><br>            <span class="hljs-attr">mount:</span> <span class="hljs-string">/tmp/log</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sdb</span>       <span class="hljs-comment">#普通用法，该卷跟随容器销毁，挂载一个目录</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/media</span>    <br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span>    <span class="hljs-comment">#直接挂载硬盘方法，如挂载下面的nfs目录到/mnt/nfs</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt/nfs</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">example-volume-config</span>  <span class="hljs-comment">#高级用法第1种，将ConfigMap的log-script,backup-script分别挂载到/etc/config目录下的一个相对路径path/to/...下，如果存在同名文件，直接覆盖。</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span>       <br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-pvc</span>                <span class="hljs-comment">#高级用法第2中，挂载PVC(PresistentVolumeClaim)</span><br> <br><span class="hljs-comment">#使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容，</span><br>  <span class="hljs-attr">volumes:</span>  <span class="hljs-comment"># 定义磁盘给上面volumeMounts挂载</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">log-cache</span><br>    <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sdb</span>  <span class="hljs-comment">#挂载宿主机上面的目录</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/any/path/it/will/be/replaced</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">example-volume-config</span>  <span class="hljs-comment"># 供ConfigMap文件内容到指定路径使用</span><br>    <span class="hljs-attr">configMap:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">example-volume-config</span>  <span class="hljs-comment">#ConfigMap中名称</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">log-script</span>           <span class="hljs-comment">#ConfigMap中的Key</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">path/to/log-script</span>  <span class="hljs-comment">#指定目录下的一个相对路径path/to/log-script</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">backup-script</span>        <span class="hljs-comment">#ConfigMap中的Key</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">path/to/backup-script</span>  <span class="hljs-comment">#指定目录下的一个相对路径path/to/backup-script</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span>         <span class="hljs-comment">#供挂载NFS存储类型</span><br>    <span class="hljs-attr">nfs:</span><br>      <span class="hljs-attr">server:</span> <span class="hljs-number">10.42</span><span class="hljs-number">.0</span><span class="hljs-number">.55</span>          <span class="hljs-comment">#NFS服务器地址</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/public</span>           <span class="hljs-comment">#showmount -e 看一下路径</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-pvc</span>                 <span class="hljs-comment">#挂载PVC磁盘</span><br>    <span class="hljs-attr">persistentVolumeClaim:</span><br>      <span class="hljs-attr">claimName:</span> <span class="hljs-string">rbd-pvc1</span>         <span class="hljs-comment">#挂载已经申请的pvc磁盘</span><br>      <br><br></code></pre></td></tr></table></figure><h3 id="4-2-Pod-yaml文件详解（池子，容器服务运行在其中，资源隔离限制）"><a href="#4-2-Pod-yaml文件详解（池子，容器服务运行在其中，资源隔离限制）" class="headerlink" title="4.2    Pod yaml文件详解（池子，容器服务运行在其中，资源隔离限制）"></a>4.2    Pod yaml文件详解（池子，容器服务运行在其中，资源隔离限制）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># yaml格式的pod定义文件完整内容：</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>       <span class="hljs-comment">#必选，版本号，例如v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>       <span class="hljs-comment">#必选，Pod</span><br><span class="hljs-attr">metadata:</span>       <span class="hljs-comment">#必选，元数据</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>       <span class="hljs-comment">#必选，Pod名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#必选，Pod所属的命名空间</span><br>  <span class="hljs-attr">labels:</span>      <span class="hljs-comment">#自定义标签</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#自定义标签名字</span><br>  <span class="hljs-attr">annotations:</span>       <span class="hljs-comment">#自定义注释列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">spec:</span>         <span class="hljs-comment">#必选，Pod中容器的详细定义</span><br>  <span class="hljs-attr">containers:</span>      <span class="hljs-comment">#必选，Pod中容器列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#必选，容器名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#必选，容器的镜像名称</span><br>    <span class="hljs-attr">imagePullPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">IfNotPresent</span>] <span class="hljs-comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]    <span class="hljs-comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">string</span>]     <span class="hljs-comment">#容器的启动命令参数列表</span><br>    <span class="hljs-attr">workingDir:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#容器的工作目录</span><br>    <span class="hljs-attr">volumeMounts:</span>    <span class="hljs-comment">#挂载到容器内部的存储卷配置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#存储卷在容器内mount的绝对路径，应少于512字符</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-string">boolean</span>    <span class="hljs-comment">#是否为只读模式</span><br>    <span class="hljs-attr">ports:</span>       <span class="hljs-comment">#需要暴露的端口库号列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#端口号名称</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-string">int</span>   <span class="hljs-comment">#容器需要监听的端口号</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-string">int</span>    <span class="hljs-comment">#容器所在主机需要监听的端口号，默认与Container相同</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#端口协议，支持TCP和UDP，默认TCP</span><br>    <span class="hljs-attr">env:</span>       <span class="hljs-comment">#容器运行前需设置的环境变量列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#环境变量名称</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#环境变量的值</span><br>    <span class="hljs-attr">resources:</span>       <span class="hljs-comment">#资源限制和请求的设置</span><br>      <span class="hljs-attr">limits:</span>      <span class="hljs-comment">#资源限制的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br>      <span class="hljs-attr">requests:</span>      <span class="hljs-comment">#资源请求的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#Cpu请求，容器启动的初始可用数量</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#内存清楚，容器启动的初始可用数量</span><br>    <span class="hljs-attr">livenessProbe:</span>     <span class="hljs-comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span><br>      <span class="hljs-attr">exec:</span>      <span class="hljs-comment">#对Pod容器内检查方式设置为exec方式</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]  <span class="hljs-comment">#exec方式需要制定的命令或脚本</span><br>      <span class="hljs-attr">httpGet:</span>       <span class="hljs-comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">HttpHeaders:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">tcpSocket:</span>     <span class="hljs-comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span><br>         <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>       <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">0</span>  <span class="hljs-comment">#容器启动完成后首次探测的时间，单位为秒</span><br>       <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">0</span>   <span class="hljs-comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span><br>       <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">0</span>    <span class="hljs-comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span><br>       <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">securityContext:</span><br>         <span class="hljs-string">privileged:false</span><br>    <span class="hljs-attr">restartPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">OnFailure</span>]<span class="hljs-comment">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span><br>    <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">obeject</span>  <span class="hljs-comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定 #这一步需要先在node节点上先定义标签，最好唯一</span><br>    <span class="hljs-attr">imagePullSecrets:</span>    <span class="hljs-comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>    <span class="hljs-string">hostNetwork:false</span>      <span class="hljs-comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span><br>    <span class="hljs-attr">volumes:</span>       <span class="hljs-comment">#在该pod上定义共享存储卷列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#共享存储卷名称 （volumes类型有很多种）</span><br>      <span class="hljs-attr">emptyDir:</span> &#123;&#125;     <span class="hljs-comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span><br>      <span class="hljs-attr">hostPath:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span><br>      <span class="hljs-attr">secret:</span>      <span class="hljs-comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span><br>        <span class="hljs-attr">scretname:</span> <span class="hljs-string">string</span>  <br>        <span class="hljs-attr">items:</span>     <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">configMap:</span>     <span class="hljs-comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">items:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br></code></pre></td></tr></table></figure><h3 id="4-3-Service-yaml文件详解（真实运行在pod里的服务配置）"><a href="#4-3-Service-yaml文件详解（真实运行在pod里的服务配置）" class="headerlink" title="4.3 Service yaml文件详解（真实运行在pod里的服务配置）"></a>4.3 Service yaml文件详解（真实运行在pod里的服务配置）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">matadata:</span>                                <span class="hljs-comment">#元数据</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>                           <span class="hljs-comment">#service的名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span>                      <span class="hljs-comment">#命名空间  </span><br>  <span class="hljs-attr">labels:</span>                                <span class="hljs-comment">#自定义标签属性列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">annotations:</span>                           <span class="hljs-comment">#自定义注解属性列表  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">spec:</span>                                    <span class="hljs-comment">#详细描述</span><br>  <span class="hljs-attr">selector:</span> []                           <span class="hljs-comment">#label selector配置，将选择具有label标签的Pod作为管理 </span><br>                                         <span class="hljs-comment">#范围</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span>                           <span class="hljs-comment">#service的类型，指定service的访问方式，默认为 </span><br>                                         <span class="hljs-comment">#clusterIp</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">string</span>                      <span class="hljs-comment">#虚拟服务地址      </span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">string</span>                <span class="hljs-comment">#是否支持session</span><br>  <span class="hljs-attr">ports:</span>                                 <span class="hljs-comment">#service需要暴露的端口列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>                         <span class="hljs-comment">#端口名称</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span>                     <span class="hljs-comment">#端口协议，支持TCP和UDP，默认TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">int</span>                            <span class="hljs-comment">#服务监听的端口号</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">int</span>                      <span class="hljs-comment">#需要转发到后端Pod的端口号</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-string">int</span>                        <span class="hljs-comment">#当type = NodePort时，指定映射到物理机的端口号</span><br>  <span class="hljs-attr">status:</span>                                <span class="hljs-comment">#当spce.type=LoadBalancer时，设置外部负载均衡器的地址</span><br>    <span class="hljs-attr">loadBalancer:</span>                        <span class="hljs-comment">#外部负载均衡器    </span><br>      <span class="hljs-attr">ingress:</span>                           <span class="hljs-comment">#外部负载均衡器 </span><br>        <span class="hljs-attr">ip:</span> <span class="hljs-string">string</span>                       <span class="hljs-comment">#外部负载均衡器的Ip地址值</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">string</span>                 <span class="hljs-comment">#外部负载均衡器的主机名</span><br></code></pre></td></tr></table></figure><blockquote><p>引用资料如下</p><p><a href="https://blog.csdn.net/weixin_34268753/article/details/89586977">k8s使用篇</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>容器化技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器化</tag>
      
      <tag>Kubernates</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(一)容器化实战--docker探索</title>
    <link href="/2021/06/04/containerization1-docker/"/>
    <url>/2021/06/04/containerization1-docker/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近日，某甲方爸爸心血来潮，要求项目使用某PAAS采用容器化方式部署，没办法只能开整。大概看了一眼，这个PAAS是基于Kubernates之上进行了一层封装，由于之前对容器化方面经验并不是很多。经过2个月左右的学习与探索，总算一个人把传统项目给进行了容器化改造。这里也准备用一个小系列将这个过程记录下来，方便将来复盘与研究。</p><p><strong>注：由于原文在项目组内部发表，本系列已经过脱敏，行文润色不周之处请谅解。</strong></p><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><blockquote><p>容器化技术采用Docker+Kubernates</p><p>项目抽象为一个典型的微服务项目</p><p>前后端分离Nginx+Tomcat</p><p>注册中心Eureka</p><p>网关Zuul</p><p>数据库 Mysql+Redis</p><p>2B项目，并发量不大。</p><p>待改造的节点大致如下</p><table><thead><tr><th>微服务</th><th>数据库</th><th>前端</th></tr></thead><tbody><tr><td>Registry（eureka）</td><td>Mysql</td><td>Front-end</td></tr><tr><td>Core(zuul)</td><td>Redis</td><td></td></tr><tr><td>SM（系统管理微服务）</td><td></td><td></td></tr></tbody></table></blockquote><h2 id="1-Docker是什么？"><a href="#1-Docker是什么？" class="headerlink" title="1.Docker是什么？"></a>1.Docker是什么？</h2><p>Docker是一种容器化技术,也是目前业界运行时主流的选择。从它的两句口号便可理解它的思想。</p><blockquote><h4 id="Build-ship-and-run"><a href="#Build-ship-and-run" class="headerlink" title="Build,ship and run."></a><strong>Build,ship and run.</strong></h4><h4 id="Build-once-run-anywhere"><a href="#Build-once-run-anywhere" class="headerlink" title="Build once,run anywhere."></a><strong>Build once,run anywhere.</strong></h4></blockquote><p>它可以看做一个超轻量级的虚拟机。把系统资源与应用打包成了一个镜像，大大降低了部署的难度。解决了软件与IAAS层耦合严重的问题，docker可以让开发工程师可以更专注于软件开发，而无须关注硬件层面问题。它还具有分层构建镜像、文件挂载等优秀特性。</p><p>关于Docker的优秀特性这里就不再赘述，同学们可以自行研究。<a href="https://www.docker.com/">https://www.docker.com/</a></p><h2 id="2-安装Docker"><a href="#2-安装Docker" class="headerlink" title="2.    安装Docker"></a>2.    安装Docker</h2><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1    环境准备"></a>2.1    环境准备</h3><p>安装了Centos7的Linux</p><p>推荐安装DVD以上的版本，小版本容易缺少组件导致报错。</p><p>环境查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">系统内核是3.10以上的</span><br>[root@localhost /]# uname -r<br>3.10.0-327.el7.x86_64<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">系统版本</span><br>[root@localhost /]# cat /etc/os-release<br>NAME=&quot;CentOS Linux&quot;<br>VERSION=&quot;7 (Core)&quot;<br>ID=&quot;centos&quot;<br>ID_LIKE=&quot;rhel fedora&quot;<br>VERSION_ID=&quot;7&quot;<br>PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;<br>ANSI_COLOR=&quot;0;31&quot;<br>CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;<br>HOME_URL=&quot;https://www.centos.org/&quot;<br>BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;<br><br>CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;<br>CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;<br>REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;<br>REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;<br></code></pre></td></tr></table></figure><h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2    安装"></a>2.2    安装</h3><h4 id="2-2-1-联网安装docker"><a href="#2-2-1-联网安装docker" class="headerlink" title="2.2.1 联网安装docker"></a>2.2.1 联网安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1、卸载docker</span><br>yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br><span class="hljs-meta">#</span><span class="bash">删除资源</span> <br>rm -rf /var/lib/docker<br><span class="hljs-meta">#</span><span class="bash"> /var/lib/docker 是docker的默认工作路径！</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 2、安装脚本工具</span><br>yum install -y yum-utils<br><span class="hljs-meta">#</span><span class="bash"> 3、设置镜像仓库</span><br>yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br><span class="hljs-meta">#</span><span class="bash"> 上述配置默认是国外docker官方的，速度慢不推荐</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">推荐使用国内的如阿里的</span><br>yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">更新yum软件包索引</span><br>yum makecache fast<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">查看docker版本清单</span><br>yum list docker-ce --showduplicates|sort -r<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 4、安装docker 有CE社区版和EE企业版之分，这里使用ce版即可</span><br><span class="hljs-meta">#</span><span class="bash"> 指定安装版本</span><br>yum install docker-ce-18.06.0.ce docker-ce-cli-18.06.0.ce containerd.io -y<br><span class="hljs-meta">#</span><span class="bash"> 安装最新版</span><br>yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 5、启动docker&amp;设置开机自启动</span><br>systemctl start docker &amp; systemctl enable docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 6、使用docker version查看是否安装成功</span><br>docker version<br>[root@master01 /]# docker version<br>Client:<br> Version:           18.06.0-ce<br> API version:       1.38<br> Go version:        go1.10.3<br> Git commit:        0ffa825<br> Built:             Wed Jul 18 19:08:18 2018<br> OS/Arch:           linux/amd64<br> Experimental:      false<br><br>Server:<br> Engine:<br>  Version:          18.06.0-ce<br>  API version:      1.38 (minimum version 1.12)<br>  Go version:       go1.10.3<br>  Git commit:       0ffa825<br>  Built:            Wed Jul 18 19:10:42 2018<br>  OS/Arch:          linux/amd64<br>  Experimental:     false<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 7、配置docker 使用阿里云镜像加速</span><br>[root@master01 ~]# mkdir -p /etc/docker<br>[root@master01 ~]# tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://v16stybc.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><span class="hljs-meta">#</span><span class="bash"> 如果安装K8s 为了与高版本兼容顺便设置cgroup driver</span><br>cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://v16stybc.mirror.aliyuncs.com&quot;],<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;log-driver&quot;: &quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;<br>    &quot;max-size&quot;: &quot;100m&quot;<br>  &#125;,<br>  &quot;storage-driver&quot;: &quot;overlay2&quot;<br>&#125;<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">重载配置文件&amp;重启服务</span><br>[root@master01 ~]# systemctl daemon-reload &amp;&amp; systemctl restart docker<br></code></pre></td></tr></table></figure><h4 id="2-2-2-离线安装Docker"><a href="#2-2-2-离线安装Docker" class="headerlink" title="2.2.2    离线安装Docker"></a>2.2.2    离线安装Docker</h4><p>下载离线安装包</p><p><a href="https://download.docker.com/linux/static/stable/x86_64/">https://download.docker.com/linux/static/stable/x86_64/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1、解压上传的压缩包，解压后当前路径会生成一个docker目录，命令如下：</span><br><br>[root@118 install]# tar -zxvf docker-19.03.4.tgz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">2、将docker服务注册为service</span><br><br>[root@118 install]# cp docker/* /usr/bin/<br><br>[root@118 install]# vim /etc/systemd/system/docker.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">将如下内容粘贴到docker.service</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">ps：需要root权限，如果权限被限制，可以通过ln -s 软连接指到 /etc/systemd/system/docker.service一样可以</span><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br><br>Description=Docker Application Container Engine<br><br>Documentation=https://docs.docker.com<br><br>After=network-online.target firewalld.service<br><br>Wants=network-online.target<br><br>[Service]<br><br>Type=notify<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> the default is not to use systemd <span class="hljs-keyword">for</span> cgroups because the delegate issues still</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> exists and systemd currently does not support the cgroup feature <span class="hljs-built_in">set</span> required</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> containers run by docker</span><br><br>ExecStart=/usr/bin/dockerd<br><br>ExecReload=/bin/kill -s HUP $MAINPID<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> the kernel. We recommend using cgroups to <span class="hljs-keyword">do</span> container-local accounting.</span><br><br>LimitNOFILE=infinity<br><br>LimitNPROC=infinity<br><br>LimitCORE=infinity<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Uncomment TasksMax <span class="hljs-keyword">if</span> your systemd version supports it.</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Only systemd 226 and above support this version.</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">TasksMax=infinity</span><br><br>TimeoutStartSec=0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">set</span> delegate yes so that systemd does not reset the cgroups of docker containers</span><br><br>Delegate=yes<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">kill</span> only the docker process, not all processes <span class="hljs-keyword">in</span> the cgroup</span><br><br>KillMode=process<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> restart the docker process <span class="hljs-keyword">if</span> it exits prematurely</span><br><br>Restart=on-failure<br><br>StartLimitBurst=3<br><br>StartLimitInterval=60s<br><br> <br><br>[Install]<br><br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">4、启动</span><br><br>[root@118 install]# chmod +x /etc/systemd/system/docker.service             #添加文件权限并启动docker<br><br>[root@118 install]# systemctl daemon-reload                                                       #重载unit配置文件<br><br>[root@118 install]# systemctl start docker                                                             #启动Docker<br><br>[root@118 install]# systemctl enable docker.service                                           #设置开机自启<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">5、验证</span><br><br>[root@118 install]# docker version                                                         #查看Docker版本<br></code></pre></td></tr></table></figure><h3 id="2-3-运行helloworld镜像"><a href="#2-3-运行helloworld镜像" class="headerlink" title="2.3    运行helloworld镜像"></a>2.3    运行helloworld镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试helloworld</span><br>[root@localhost ~]# docker run hello-world<br>Unable to find image &#x27;hello-world:latest&#x27; locally<br>latest: Pulling from library/hello-world<br>b8dfde127a29: Already exists<br>Digest: sha256:5122f6204b6a3596e048758cabba3c46b1c937a46b5be6225b835d091b90e46c<br>Status: Downloaded newer image for hello-world:latest<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image which runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, which sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br><span class="hljs-meta"> $</span><span class="bash"> docker run -it ubuntu bash</span><br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><h3 id="2-4-卸载Docker"><a href="#2-4-卸载Docker" class="headerlink" title="2.4    卸载Docker"></a>2.4    卸载Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1、卸载docker</span><br>yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br><span class="hljs-meta">#</span><span class="bash">删除资源</span> <br>rm -rf /var/lib/docker<br><span class="hljs-meta">#</span><span class="bash"> /var/lib/docker 是docker的默认工作路径！</span><br></code></pre></td></tr></table></figure><h2 id="3-使用Docker构建镜像"><a href="#3-使用Docker构建镜像" class="headerlink" title="3.    使用Docker构建镜像"></a>3.    使用Docker构建镜像</h2><blockquote><p>这里我们的公共镜像层设计如下</p><p>系统镜像：OS</p><p>Tomcat镜像：OS+JDK1.8+Tomcat</p><p>数据库镜像：OS+Mysql、OS+Redis</p><p>前端镜像：OS+Nginx</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/image-20211104174847655.png"></p><h3 id="3-1-下载系统镜像层"><a href="#3-1-下载系统镜像层" class="headerlink" title="3.1    下载系统镜像层"></a>3.1    下载系统镜像层</h3><h3 id="3-2-构建基础镜像"><a href="#3-2-构建基础镜像" class="headerlink" title="3.2    构建基础镜像"></a>3.2    构建基础镜像</h3><p>这里以构建centos+jdk+tomcat为例，Docker registry 地址为192.168.60.128:5000</p><p>把压缩包上传至/home/docker 目录</p><p>解压缩并重命名文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/jackey-l/blog_static@master/img/965a6ca74ca2ce615c100e72517acd91_274x183.png@900-0-90-f.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">拉取centos7镜像</span><br>[root@master01 docker]# docker pull centos:7<br>[root@master01 docker]# docker build -t 192.168.60.128:5000/centos-jdk-tomcat:0.0.1 .<br><span class="hljs-meta">#</span><span class="bash">参数-t name为设置标签名,格式为 仓库/标签名：版本</span><br><span class="hljs-meta">#</span><span class="bash">最后需要加上<span class="hljs-string">&quot;.&quot;</span>表示使用当前目录下的Dockerfile</span><br>Sending build context to Docker daemon    355MB<br>Step 1/11 : FROM centos:7<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 8652b9f0cb4c</span><br>Step 2/11 : MAINTAINER Vincent &quot;vicentlee@email.com&quot;<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> bf344a418629</span><br>Removing intermediate container bf344a418629<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 117e4ac1e435</span><br>Step 3/11 : RUN mkdir -p /opt/java/jre1.8.0_232<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 0b56b3cf1adc</span><br>Removing intermediate container 0b56b3cf1adc<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> c7730a840847</span><br>Step 4/11 : ADD jdk /opt/java/_jre1.8.0_232<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> f03745da59bd</span><br>Step 5/11 : RUN mkdir -p /opt/java/OpenAS_Tomcat_7<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 2924c5125a05</span><br>Removing intermediate container 2924c5125a05<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> ddac7fd13ad6</span><br>Step 6/11 : ADD tomcat /opt/java/OpenAS_Tomcat_7<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 0f83265f4f3d</span><br>Step 7/11 : ENV JAVA_HOME /opt/java/_jre1.8.0_232<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> c66572d4a875</span><br>Removing intermediate container c66572d4a875<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 560f2e8a82cb</span><br>Step 8/11 : ENV CATALINA_HOME /opt/java/OpenAS_Tomcat_7<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> c626d143b379</span><br>Removing intermediate container c626d143b379<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 2253de1e357b</span><br>Step 9/11 : ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 310b6924ab32</span><br>Removing intermediate container 310b6924ab32<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 89dd4d21f44a</span><br>Step 10/11 : EXPOSE 8080<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> c876584c135d</span><br>Removing intermediate container c876584c135d<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 23fe401b8e9e</span><br>Step 11/11 : CMD [&quot;/opt/java/OpenAS_Tomcat_7/bin/catalina.sh&quot;,&quot;run&quot;]<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 3f7ecde682c5</span><br>Removing intermediate container 3f7ecde682c5<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 6a569cbc874c</span><br>Successfully built 6a569cbc874c<br>Successfully tagged 192.168.60.128:5000/centos-jdk-tomcat:0.0.1<br></code></pre></td></tr></table></figure><h3 id="3-3-DockerFile构建镜像"><a href="#3-3-DockerFile构建镜像" class="headerlink" title="3.3    DockerFile构建镜像"></a>3.3    DockerFile构建镜像</h3><p>微服务镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">基于Tomcat:alpine</span><br>FROM tomcat:alpine<br><span class="hljs-meta">#</span><span class="bash">作者</span><br>MAINTAINER young&lt;yyggmmshen@foxmail.com&gt;<br><span class="hljs-meta">#</span><span class="bash">声明变量</span><br>ENV TOMCATPATH /usr/local/tomcat<br><span class="hljs-meta">#</span><span class="bash">设置工作目录</span><br>WORKDIR $&#123;TOMCATPATH&#125;/webapps<br><span class="hljs-meta">#</span><span class="bash">删除ROOT目录里的所有文件</span><br>RUN rm -rf *<br><span class="hljs-meta">#</span><span class="bash">导入war包</span><br>COPY hello.war ./hello.war<br><span class="hljs-meta">#</span><span class="bash">创建ROOT目录</span><br>RUN mkdir ROOT<br><span class="hljs-meta">#</span><span class="bash">将war包解压到ROOT目录下</span><br>RUN unzip ./hello.war -d ./ROOT<br><span class="hljs-meta">#</span><span class="bash">删除war包</span><br>RUN rm -rf hello.war<br><span class="hljs-meta">#</span><span class="bash">暴露接口</span><br>EXPOSE 8080<br><span class="hljs-meta">#</span><span class="bash">启动Tomcat</span><br>CMD [&quot;../bin/catalina.sh&quot;,&quot;run&quot;]<br><br></code></pre></td></tr></table></figure><h3 id="3-4-使用DockerHub"><a href="#3-4-使用DockerHub" class="headerlink" title="3.4    使用DockerHub"></a>3.4    使用DockerHub</h3><p>假设注册DockerHub账号为tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">注册或拉取私人镜像都需要登录</span><br>[root@node02 ~]# docker login<br>Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.<br>Username: tom<br>Password:<br>WARNING! Your password will be stored unencrypted in /root/.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https://docs.docker.com/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">镜像tag需要按照  用户名/镜像名：版本号的格式命名</span><br>[root@node01 ~]# docker tag hello-world pperfectt/helloworld_m<br><span class="hljs-meta">#</span><span class="bash">push 镜像</span><br>[root@node01 ~]# docker push tom/helloworld_m<br>The push refers to repository [docker.io/pperfectt/helloworld_m]<br>f22b99068db9: Mounted from library/hello-world<br>latest: digest: sha256:1b26826f602946860c279fce658f31050cff2c596583af237d971f4629b57792 size: 525<br><span class="hljs-meta">#</span><span class="bash">在另一节点docker login之后拉取镜像</span><br>[root@node02 ~]# docker pull tom/helloworld_m:latest<br>latest: Pulling from pperfectt/helloworld_m<br>Digest: sha256:1b26826f602946860c279fce658f31050cff2c596583af237d971f4629b57792<br>Status: Downloaded newer image for pperfectt/helloworld_m:latest<br></code></pre></td></tr></table></figure><h2 id="4-搭建私仓Docker-Registry"><a href="#4-搭建私仓Docker-Registry" class="headerlink" title="4.    搭建私仓Docker Registry"></a>4.    搭建私仓Docker Registry</h2><p>实际情况中，大多数项目并不会将自己的镜像放在docker官方镜像仓，这种情况，我们需要搭建自己的镜像私仓。</p><h4 id="4-1-获取registry镜像"><a href="#4-1-获取registry镜像" class="headerlink" title="4.1    获取registry镜像"></a>4.1    获取registry镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 docker]# docker pull registry:2<br></code></pre></td></tr></table></figure><h4 id="4-2-运行registry容器"><a href="#4-2-运行registry容器" class="headerlink" title="4.2    运行registry容器"></a>4.2    运行registry容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@dockerA ~]# docker run  -itd --name registry --restart=always  -p 5000:5000 -v /opt/registry:/var/lib/registry registry:2<br><br>//创建一个registry容器来运行registry服务；<br>//-p：端口映射（前面是宿主机端口：后面是容器暴露的端口）；<br>//-v：挂载目录（前面是宿主机的目录：后面的是容器的目录）自动创建宿主机的目录；<br>//--restart=always：随docker服务的启动而启动！<br></code></pre></td></tr></table></figure><h4 id="4-3-验证"><a href="#4-3-验证" class="headerlink" title="4.3    验证"></a>4.3    验证</h4><p>往私仓上推送镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">按照规则重命名要推送的镜像，</span><br><span class="hljs-meta">#</span><span class="bash">注：私有仓库镜像的命名规则：192.168.45.129:5000/XXX（宿主机的IP:5000端口/镜像名称:版本）</span><br>[root@master01 docker]# docker tag nginx:latest 192.168.60.128:5000/my_nginx:1.0<br><span class="hljs-meta">#</span><span class="bash">推送</span><br>[root@master01 docker]# docker push 192.168.60.128:5000/my_nginx<br><span class="hljs-meta">#</span><span class="bash">查看私藏镜像清单</span><br>[root@master01 docker]# curl -XGET http://192.168.60.128:5000/v2/_catalog<br>&#123;&quot;repositories&quot;:[&quot;my_hello&quot;,&quot;my_nginx&quot;]&#125;<br></code></pre></td></tr></table></figure><p>在其他客户端下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@node02 ~]# docker pull 192.168.60.128:5000/my_nginx<br>Using default tag: latest<br>Error response from daemon: Get https://192.168.60.128:5000/v2/: http: server gave HTTP response to HTTPS client<br><span class="hljs-meta">#</span><span class="bash">报错https请求错误，设置跳过https验证</span><br>[root@master01 docker]# cat /etc/docker/daemon.json<br>&#123;<br>  &quot;insecure-registries&quot;:[&quot;192.168.60.128:5000&quot;],<br>  &quot;registry-mirrors&quot;: [&quot;http://192.168.60.128:5000&quot;],<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;log-driver&quot;: &quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;<br>    &quot;max-size&quot;: &quot;100m&quot;<br>  &#125;,<br>  &quot;storage-driver&quot;: &quot;overlay2&quot;<br>&#125;<br>[root@node02 ~]# systemctl daemon-reload &amp;&amp; systemctl restart docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">成功拉取</span><br>[root@node02 ~]# docker pull 192.168.60.128:5000/my_nginx:1.0<br>1.0: Pulling from my_nginx<br>Digest: sha256:61191087790c31e43eb37caa10de1135b002f10c09fdda7fa8a5989db74033aa<br>Status: Downloaded newer image for 192.168.60.128:5000/my_nginx:1.0<br><br></code></pre></td></tr></table></figure><h4 id="4-4-删除Docker-Registry"><a href="#4-4-删除Docker-Registry" class="headerlink" title="4.4    删除Docker Registry"></a>4.4    删除Docker Registry</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master01 docker]# docker container stop registry &amp;&amp; docker container rm -v registry<br>registry<br></code></pre></td></tr></table></figure><h2 id="5-Docker常用命令"><a href="#5-Docker常用命令" class="headerlink" title="5.    Docker常用命令"></a>5.    Docker常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs she">docker version#显示docker的版本<br>docker info#显示docker的系统信息，包括镜像和容器的数量<br>docker --help#帮助命令<br></code></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="查看所有本地的主机上的镜像"><a href="#查看所有本地的主机上的镜像" class="headerlink" title="查看所有本地的主机上的镜像"></a>查看所有本地的主机上的镜像</h4><p><strong>docker images</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs she">[root@localhost ~]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    d1165f221234   2 months ago   13.3kB<br>[root@localhost ~]#<br><br>#解释<br>REPOSITORY镜像的仓库源<br>TAG镜像的标签<br>IMAGE ID镜像的id<br>CREATED 镜像的创建时间<br>SIZE镜像的大小<br><br>#可选项<br>Options:<br>  -a, --all             # 列出所有镜像<br>  -f, --filter filter   # 过滤镜像<br>  -q, --quiet          只显示镜像ID<br>  <br>#显示所有镜像的ID<br>[root@localhost ~]# docker images -aq<br>d1165f221234<br><br></code></pre></td></tr></table></figure><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><p>DockerHub <a href="https://www.docker.com/products/docker-hub">https://www.docker.com/products/docker-hub</a></p><p><strong>docker search</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker search mysql<br>NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql                             MySQL is a widely used, open-source relation…   10921     [OK]<br>mariadb                           MariaDB Server is a high performing open sou…   4125      [OK]<br>mysql/mysql-server                Optimized MySQL Server Docker images. Create…   810                  [OK]<br>percona                           Percona Server is a fork of the MySQL relati…   539  <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> --filter=STARS=3000 <span class="hljs-comment">#过滤，搜索出来的镜像收藏STARS数量大于3000的</span></span><br>Options:<br>  -f, --filter filter   Filter output based on conditions provided<br>      --format string   Pretty-print search using a Go template<br>      --limit int       Max number of search results (default 25)<br>      --no-trunc        Don&#x27;t truncate output<br>      <br>[root@iz2zeak7sgj6i7hrb2g862z ~]# docker search mysql --filter=STARS=3000<br>NAME        DESCRIPTION         STARS            OFFICIAL        AUTOMATED<br>mysql       MySQL IS ...        9520             [OK]                <br>mariadb     MariaDB IS ...      3456             [OK] <br></code></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p><strong>docker pull</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span><br>➜ ~ docker pull tomcat:8<br>8: Pulling from library/tomcat #如果不写tag，默认就是latest<br>90fe46dd8199: Already exists #分层下载： docker image 的核心 联合文件系统<br>35a4f1977689: Already exists<br>bbc37f14aded: Already exists<br>74e27dc593d4: Already exists<br>93a01fbfad7f: Already exists<br>1478df405869: Pull complete<br>64f0dd11682b: Pull complete<br>68ff4e050d11: Pull complete<br>f576086003cf: Pull complete<br>3b72593ce10e: Pull complete<br>Digest: sha256:0c6234e7ec9d10ab32c06423ab829b32e3183ba5bf2620ee66de866df640a027<br><span class="hljs-meta">#</span><span class="bash"> 签名 防伪</span><br>Status: Downloaded newer image for tomcat:8<br>docker.io/library/tomcat:8 #真实地址<br><span class="hljs-meta">#</span><span class="bash">等价于</span><br>docker pull tomcat:8<br>docker pull docker.io/library/tomcat:8<br><br></code></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t test .<br></code></pre></td></tr></table></figure><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -dit -p 80:8022 --rm test<br><span class="hljs-meta">#</span><span class="bash"> -dit 后台运行容器 -it 容器启动后进入容器</span><br><span class="hljs-meta">#</span><span class="bash"> --rm 容器停止后删除容器</span><br><span class="hljs-meta">#</span><span class="bash"> -p 宿主端口号：容器端口号 映射宿主机与容器端口</span><br></code></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p><strong>docker rmi</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker rmi -f 镜像id # 删除指定镜像<br>[root@localhost ~]# docker rmi -f 镜像id 镜像id 镜像id # 删除指定镜像<br>[root@localhost ~]# docker rmi -f $(docker images -aq)镜像id # 删除符合条件镜像（全部）<br></code></pre></td></tr></table></figure><h4 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@storage01 tmp]# docker save -o centos.tar centos:7<br></code></pre></td></tr></table></figure><h4 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@storage01 tmp]# docker load -i centos.tar<br></code></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run 镜像id 新建容器并启动<br>docker ps 列出所有运行的容器 docker container list<br>docker rm 容器id 删除指定容器<br>docker start 容器id #启动容器<br>docker restart容器id #重启容器<br>docker stop 容器id #停止当前正在运行的容器<br>docker kill 容器id #强制停止当前容器<br></code></pre></td></tr></table></figure><blockquote><p>说明：我们有了镜像才可以创建容器，Linux，下载centos镜像来学习</p></blockquote><h4 id="容器生命周期管理命令"><a href="#容器生命周期管理命令" class="headerlink" title="容器生命周期管理命令"></a>容器生命周期管理命令</h4><h5 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker create<br></code></pre></td></tr></table></figure><h5 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start<br></code></pre></td></tr></table></figure><h5 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [可选参数] image | docker container run [可选参数] image <br><span class="hljs-meta">#</span><span class="bash">参数说明</span><br>--name=&quot;Name&quot;#容器名字 tomcat01 tomcat02 用来区分容器<br>-d#后台方式运行<br>-it #使用交互方式运行，进入容器查看内容<br>-p#指定容器的端口 -p 8080(宿主机):8080(容器)<br>-p ip:主机端口:容器端口<br>-p 主机端口:容器端口(常用)<br>-p 容器端口<br>容器端口<br>-P(大写) 随机指定端口<br><span class="hljs-meta">#</span><span class="bash">创建一个nginx容器</span><br>[root@localhost ~]# docker run -d -p 80:80 --name nginx1 nginx<br>60d8cc8576ab56239eab28d106ff09758430fa4aeab2ad240dc23472ade9ebe3<br>[root@localhost ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES<br>60d8cc8576ab   nginx     &quot;/docker-entrypoint.…&quot;   16 seconds ago   Up 14 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx1<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">验证</span><br>[root@localhost ~]# curl localhost<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br>    body &#123;<br>        width: 35em;<br>        margin: 0 auto;<br>        font-family: Tahoma, Verdana, Arial, sans-serif;<br>    &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.&lt;/p&gt;<br><br>&lt;p&gt;For online documentation and support please refer to<br>&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>Commercial support is available at<br>&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h5 id="停止一个运行的容器"><a href="#停止一个运行的容器" class="headerlink" title="停止一个运行的容器"></a>停止一个运行的容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop<br></code></pre></td></tr></table></figure><h5 id="删除一个处于终止状态的容器"><a href="#删除一个处于终止状态的容器" class="headerlink" title="删除一个处于终止状态的容器"></a>删除一个处于终止状态的容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm<br></code></pre></td></tr></table></figure><h5 id="杀死容器进程"><a href="#杀死容器进程" class="headerlink" title="杀死容器进程"></a>杀死容器进程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker kill<br></code></pre></td></tr></table></figure><h4 id="查询容器"><a href="#查询容器" class="headerlink" title="查询容器"></a>查询容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps [可选参数]<br><br>Options:<br>  -a, --all             列出所有容器<br>  -f, --filter filter   筛选过滤<br>  -n, --last int        列出最后创建的n个容器，包括所有状态的<br>  -l, --latest          列出最后创建的容器<br>  -q, --quiet           仅显示容器id<br>  -s, --size            显示文件大小<br>  <br>[root@localhost ~]# docker ps -a<br>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMES<br>60d8cc8576ab   nginx     &quot;/docker-entrypoint.…&quot;   8 minutes ago   Up 8 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx1<br></code></pre></td></tr></table></figure><h4 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h4><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">进入容器方法1 attach命令，直接进入已启动的容器终端，不会启动新的进程。</span><br>docker attach [OPTIONS]CONTAINER<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">进入容器方法2 <span class="hljs-built_in">exec</span>命令，在容器中打开新的终端</span><br>docker exec [OPTIONS]CONTAINER COMMAND[ARG...]<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">如果报错无法进入，一般的容器都可以执行/bin/bash，但也有部分容器没有，那么我们可以用sh来代替</span><br>[root@master01 docker]# docker exec -it 933cb70e96c6 /bin/bash<br>OCI runtime exec failed: exec failed: container_linux.go:348: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;: unknown<br><br>[root@master01 docker]# docker exec -it 933cb70e96c6 sh<br>/ # ls<br></code></pre></td></tr></table></figure><h4 id="从容器内拷贝文件到宿主机上"><a href="#从容器内拷贝文件到宿主机上" class="headerlink" title="从容器内拷贝文件到宿主机上"></a>从容器内拷贝文件到宿主机上</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp &lt;containerId&gt;:/file/path/within/container /host/path/target<br></code></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f [容器ID] <br>docker rm -f b2c70821b7aa <br><span class="hljs-meta">#</span><span class="bash">-f 强制删除</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 清楚镜像缓存</span><br>docker system prune<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>容器化技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器化</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
