{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/img/JVM.png","path":"img/JVM.png","modified":0,"renderable":0},{"_id":"source/img/code_rain.jpg","path":"img/code_rain.jpg","modified":0,"renderable":0},{"_id":"source/img/cloud.png","path":"img/cloud.png","modified":0,"renderable":0},{"_id":"source/img/geek.jpeg","path":"img/geek.jpeg","modified":0,"renderable":0},{"_id":"source/img/girl01.jpg","path":"img/girl01.jpg","modified":0,"renderable":0},{"_id":"source/img/start.jpg","path":"img/start.jpg","modified":0,"renderable":0},{"_id":"source/img/watch.PNG","path":"img/watch.PNG","modified":0,"renderable":0},{"_id":"source/img/background/bg1.jpg","path":"img/background/bg1.jpg","modified":0,"renderable":0},{"_id":"source/img/background/illidan.jpg","path":"img/background/illidan.jpg","modified":0,"renderable":0},{"_id":"source/img/background/vilige.jpg","path":"img/background/vilige.jpg","modified":0,"renderable":0},{"_id":"source/img/background/bg2.jpg","path":"img/background/bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/background/wp4979803-scenery-anime-aesthetic-wallpapers.png","path":"img/background/wp4979803-scenery-anime-aesthetic-wallpapers.png","modified":0,"renderable":0},{"_id":"source/img/background/wp5089612-scenery-anime-wallpapers.jpg","path":"img/background/wp5089612-scenery-anime-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/background/wp5250028-anime-white-and-purple-landscape-wallpapers.jpg","path":"img/background/wp5250028-anime-white-and-purple-landscape-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/background/wp5298648-anime-scenery-4k-wallpapers.jpg","path":"img/background/wp5298648-anime-scenery-4k-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/background/sky.jpeg","path":"img/background/sky.jpeg","modified":0,"renderable":0},{"_id":"source/img/background/wp5475501-anime-scenery-4k-wallpapers.jpg","path":"img/background/wp5475501-anime-scenery-4k-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/background/wp5475508-anime-scenery-4k-wallpapers.jpg","path":"img/background/wp5475508-anime-scenery-4k-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/background/wp5475530-anime-scenery-4k-wallpapers.jpg","path":"img/background/wp5475530-anime-scenery-4k-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/background/wp5475522-anime-scenery-4k-wallpapers.jpg","path":"img/background/wp5475522-anime-scenery-4k-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/background/wp5475527-anime-scenery-4k-wallpapers.jpg","path":"img/background/wp5475527-anime-scenery-4k-wallpapers.jpg","modified":0,"renderable":0},{"_id":"source/img/spring.jpg","path":"img/spring.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"dc3de814db5877c074e810f7d04cdb0882f886dc","modified":1632789956770},{"_id":"source/_posts/038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png","hash":"519976950d0f34ebf1a485e9cbe5f44f8186b5eb","modified":1632791865750},{"_id":"source/_posts/20160917151428497.PNG","hash":"fa71f9b9f586ffd104b1c752e22bcaf45031799a","modified":1632788868611},{"_id":"source/_posts/2021-09-28-ntp.md","hash":"a951991de5da0d06507d1970b9d4dc42ff8c5720","modified":1632812139986},{"_id":"source/_posts/31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png","hash":"1075a4ece1d842d96b8c26d1ac00709a63d04361","modified":1632791865523},{"_id":"source/_posts/43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png","hash":"daf5bc1145eaa9798d4866df251d56776c6cf2e4","modified":1632791865659},{"_id":"source/_posts/58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png","hash":"2cde159e5c976081fb0f412fb3744cd1f032c09b","modified":1632791865700},{"_id":"source/_posts/70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png","hash":"0e1cd6a3c4507f18c2a75fc360056b2ff24bab46","modified":1632791865348},{"_id":"source/_posts/5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png","hash":"251af066d3d455397dc0c8e64424ec9e1838c4c0","modified":1632791865527},{"_id":"source/_posts/737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png","hash":"bc9163bf1fa166d93c9b14a7c304b8c0d52c39c8","modified":1632791865747},{"_id":"source/_posts/8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png","hash":"1acc9a73ce130ff763fdce3e82736e1d896d26e2","modified":1632791865898},{"_id":"source/_posts/2021-09-28-application-yml.md","hash":"dfe0a3d3196070417771d08c91d7e6dc8243f07e","modified":1632792272175},{"_id":"source/_posts/915691-20171013002936340-1631273268.png","hash":"c6c0690c37e0766d9e81543863b26ba9badf0866","modified":1632788868597},{"_id":"source/_posts/915691-20171013010729637-1391262052.png","hash":"c0ef0e846f3737ec25c683bcf57da63a72610be6","modified":1632788868604},{"_id":"source/_posts/915691-20171013131052840-421840461.png","hash":"810bc850c5b8db9292f5a3b70f3d9a7cfcf69c96","modified":1632788868604},{"_id":"source/_posts/915691-20171013131031496-1095710777.png","hash":"a6b9cca77f36012723cb906f10d8d7198a04c670","modified":1632788868597},{"_id":"source/_posts/2021-09-28-spring-source.md","hash":"1db0b10de7fa7c88aeac0932e00d884726b237df","modified":1632812585879},{"_id":"source/_posts/915691-20171013005125324-1966406641.png","hash":"ac0164e38b09e62d102272309eb014bb16f207c6","modified":1632788868610},{"_id":"source/_posts/915691-20171013131330184-1857767541.png","hash":"8b04a82944d6da9c812dd5d65e07c39193379216","modified":1632788868604},{"_id":"source/_posts/915691-20200929232515753-1829091402.png","hash":"f4c7c44daadc5525881893e0543e3f95c7f6cd1f","modified":1632788868611},{"_id":"source/_posts/938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png","hash":"e3bbaac01921172c520eb0710e5f163e254668c9","modified":1632791865900},{"_id":"source/_posts/9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png","hash":"78ed5e6849619ebb8d09fb5a4b9e61ce0c9c6328","modified":1632791865746},{"_id":"source/_posts/9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png","hash":"bd4df47a073bfaff3e59800467262d6f9c368fe8","modified":1632791865897},{"_id":"source/_posts/b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png","hash":"dd6a39b08cf3dbab0fd2aa056dc199aee942c279","modified":1632791865702},{"_id":"source/_posts/c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png","hash":"313174b5169fec5387cc88c324df0c5590216d28","modified":1632791865896},{"_id":"source/_posts/ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png","hash":"e9358e4b8fbeeed0f6ca3fb23863d1be6bd3ac85","modified":1632791865742},{"_id":"source/_posts/image-20210803145617104.png","hash":"cec409df2618e887fba788360b1b0eca08c31297","modified":1632791642211},{"_id":"source/_posts/JVM调优(一).md","hash":"e9346cc29b137174fa57d033bdeeb5cd70a112ac","modified":1632478276201},{"_id":"source/_posts/image-20210923163027954.png","hash":"241776d838e9fa8935e542c51bf63f56e37ef0c8","modified":1632444746742},{"_id":"source/_posts/image-20210923135927456.png","hash":"799c30bf2ef257c95d2f95092edd1c8f0d99bfcc","modified":1632444746736},{"_id":"source/_posts/image-20210923161704099.png","hash":"f283c9353fd593d9abe3f38e460af01a6dcbf27f","modified":1632444746741},{"_id":"source/_posts/image-20210923163132389.png","hash":"6ff28769057cb48e1531fe5b0ba27048cb1968f9","modified":1632444746743},{"_id":"source/_posts/image-20210923163549140.png","hash":"27b72a605bd0cb2261a458667ab71c7e3fddaf5d","modified":1632444746745},{"_id":"source/_posts/image-20210923163347853.png","hash":"46c6f1efee96e5cf6322a3c8e9e5c9bac19f973e","modified":1632444746744},{"_id":"source/_posts/image-20210923163638670.png","hash":"3bc7e94382e1b874f835cec9d6670fe24b991b46","modified":1632444746746},{"_id":"source/_posts/image-20210923165424944.png","hash":"86e3acfc5c7f91b98574011f72223f91fcaa5bf8","modified":1632444746751},{"_id":"source/_posts/image-20210923164143750.png","hash":"a36dd38f13535a8307c9a8a9c2dd373450331e44","modified":1632444746750},{"_id":"source/_posts/image-20210923165520445.png","hash":"3613cb566e84a895f8dd553407d5bb7fe6d40817","modified":1632444746752},{"_id":"source/_posts/image-20210923163843553.png","hash":"1936b7303268b4365ac7c40a0c2ea46013c26416","modified":1632444746748},{"_id":"source/_posts/随笔01.md","hash":"5a1903728bec028f212cdb73eece204b0b59c948","modified":1632475113791},{"_id":"source/img/JVM.png","hash":"5f534839ed59b4b33d95f8cc0ec13d6e7c741f55","modified":1632468510349},{"_id":"source/img/cloud.png","hash":"ff8fedd562190999b2d9893163853db235a43e39","modified":1632474280211},{"_id":"source/img/girl01.jpg","hash":"37180aa627c2c554b5c65565e592dae52b79c31f","modified":1632470211407},{"_id":"source/_posts/2021-09-28-application-yml/image-20210803145617104.png","hash":"cec409df2618e887fba788360b1b0eca08c31297","modified":1632791642211},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013002936340-1631273268.png","hash":"c6c0690c37e0766d9e81543863b26ba9badf0866","modified":1632788868597},{"_id":"source/_posts/2021-09-28-ntp/20160917151428497.PNG","hash":"fa71f9b9f586ffd104b1c752e22bcaf45031799a","modified":1632788868611},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013005125324-1966406641.png","hash":"ac0164e38b09e62d102272309eb014bb16f207c6","modified":1632788868610},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013010729637-1391262052.png","hash":"c0ef0e846f3737ec25c683bcf57da63a72610be6","modified":1632788868604},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013131052840-421840461.png","hash":"810bc850c5b8db9292f5a3b70f3d9a7cfcf69c96","modified":1632788868604},{"_id":"source/_posts/2021-09-28-spring-source/038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png","hash":"519976950d0f34ebf1a485e9cbe5f44f8186b5eb","modified":1632791865750},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013131031496-1095710777.png","hash":"a6b9cca77f36012723cb906f10d8d7198a04c670","modified":1632788868597},{"_id":"source/_posts/2021-09-28-ntp/915691-20200929232515753-1829091402.png","hash":"f4c7c44daadc5525881893e0543e3f95c7f6cd1f","modified":1632788868611},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013131330184-1857767541.png","hash":"8b04a82944d6da9c812dd5d65e07c39193379216","modified":1632788868604},{"_id":"source/_posts/2021-09-28-spring-source/31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png","hash":"1075a4ece1d842d96b8c26d1ac00709a63d04361","modified":1632791865523},{"_id":"source/_posts/2021-09-28-spring-source/5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png","hash":"251af066d3d455397dc0c8e64424ec9e1838c4c0","modified":1632791865527},{"_id":"source/_posts/2021-09-28-spring-source/43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png","hash":"daf5bc1145eaa9798d4866df251d56776c6cf2e4","modified":1632791865659},{"_id":"source/_posts/2021-09-28-spring-source/70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png","hash":"0e1cd6a3c4507f18c2a75fc360056b2ff24bab46","modified":1632791865348},{"_id":"source/_posts/2021-09-28-spring-source/737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png","hash":"bc9163bf1fa166d93c9b14a7c304b8c0d52c39c8","modified":1632791865747},{"_id":"source/_posts/2021-09-28-spring-source/8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png","hash":"1acc9a73ce130ff763fdce3e82736e1d896d26e2","modified":1632791865898},{"_id":"source/_posts/2021-09-28-spring-source/938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png","hash":"e3bbaac01921172c520eb0710e5f163e254668c9","modified":1632791865900},{"_id":"source/_posts/2021-09-28-spring-source/58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png","hash":"2cde159e5c976081fb0f412fb3744cd1f032c09b","modified":1632791865700},{"_id":"source/_posts/2021-09-28-spring-source/9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png","hash":"78ed5e6849619ebb8d09fb5a4b9e61ce0c9c6328","modified":1632791865746},{"_id":"source/_posts/2021-09-28-spring-source/b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png","hash":"dd6a39b08cf3dbab0fd2aa056dc199aee942c279","modified":1632791865702},{"_id":"source/_posts/2021-09-28-spring-source/9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png","hash":"bd4df47a073bfaff3e59800467262d6f9c368fe8","modified":1632791865897},{"_id":"source/_posts/JVM调优(一)/image-20210923135927456.png","hash":"799c30bf2ef257c95d2f95092edd1c8f0d99bfcc","modified":1632444746736},{"_id":"source/_posts/2021-09-28-spring-source/c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png","hash":"313174b5169fec5387cc88c324df0c5590216d28","modified":1632791865896},{"_id":"source/_posts/2021-09-28-spring-source/ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png","hash":"e9358e4b8fbeeed0f6ca3fb23863d1be6bd3ac85","modified":1632791865742},{"_id":"source/_posts/JVM调优(一)/image-20210923161704099.png","hash":"f283c9353fd593d9abe3f38e460af01a6dcbf27f","modified":1632444746741},{"_id":"source/_posts/JVM调优(一)/image-20210923163132389.png","hash":"6ff28769057cb48e1531fe5b0ba27048cb1968f9","modified":1632444746743},{"_id":"source/_posts/JVM调优(一)/image-20210923163027954.png","hash":"241776d838e9fa8935e542c51bf63f56e37ef0c8","modified":1632444746742},{"_id":"source/_posts/JVM调优(一)/image-20210923163347853.png","hash":"46c6f1efee96e5cf6322a3c8e9e5c9bac19f973e","modified":1632444746744},{"_id":"source/_posts/JVM调优(一)/image-20210923163549140.png","hash":"27b72a605bd0cb2261a458667ab71c7e3fddaf5d","modified":1632444746745},{"_id":"source/_posts/JVM调优(一)/image-20210923163638670.png","hash":"3bc7e94382e1b874f835cec9d6670fe24b991b46","modified":1632444746746},{"_id":"source/_posts/JVM调优(一)/image-20210923163843553.png","hash":"1936b7303268b4365ac7c40a0c2ea46013c26416","modified":1632444746748},{"_id":"source/img/background/bg1.jpg","hash":"b1f2e91885f3a453970054c0ca4b454e5a348af0","modified":1632472867051},{"_id":"source/_posts/JVM调优(一)/image-20210923164143750.png","hash":"a36dd38f13535a8307c9a8a9c2dd373450331e44","modified":1632444746750},{"_id":"source/_posts/JVM调优(一)/image-20210923165520445.png","hash":"3613cb566e84a895f8dd553407d5bb7fe6d40817","modified":1632444746752},{"_id":"source/_posts/JVM调优(一)/image-20210923165424944.png","hash":"86e3acfc5c7f91b98574011f72223f91fcaa5bf8","modified":1632444746751},{"_id":"source/_posts/e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png","hash":"49a078a8282e392883482e9bc4e47a2205325c87","modified":1632791865894},{"_id":"source/_posts/image-20210923140858686.png","hash":"f42e4d90bfd4e7df479ecfc972d03b7fe8d5f46e","modified":1632444746739},{"_id":"source/_posts/test1.png","hash":"6090bd54fd675cc6bf0a93ce9122be30461e7c18","modified":1632788868604},{"_id":"source/img/start.jpg","hash":"3ba2c0c30856e583c42dc976b50f048636353441","modified":1632472361678},{"_id":"source/_posts/2021-09-28-ntp/test1.png","hash":"6090bd54fd675cc6bf0a93ce9122be30461e7c18","modified":1632788868604},{"_id":"source/_posts/2021-09-28-spring-source/e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png","hash":"49a078a8282e392883482e9bc4e47a2205325c87","modified":1632791865894},{"_id":"source/_posts/JVM调优(一)/image-20210923140858686.png","hash":"f42e4d90bfd4e7df479ecfc972d03b7fe8d5f46e","modified":1632444746739},{"_id":"source/img/background/bg2.jpg","hash":"d6f318bf6760210400b5922ea9d8ca457a609f6d","modified":1632474856306},{"_id":"source/img/background/wp5475522-anime-scenery-4k-wallpapers.jpg","hash":"2fd08be3b76ae92b645f570830d09beff4ae6fc7","modified":1632473421720},{"_id":"source/img/code_rain.jpg","hash":"d781c5c8a598dbe5a41426626dbf3bb48a4b599b","modified":1632474309764},{"_id":"source/img/background/wp5298648-anime-scenery-4k-wallpapers.jpg","hash":"593325832587a60c1e066fb00cf6e396e0c0af25","modified":1632473323843},{"_id":"source/img/background/wp5475530-anime-scenery-4k-wallpapers.jpg","hash":"55898f7129e4f07a6c982122b8627fd9bef1ddb3","modified":1632473440468},{"_id":"source/img/background/wp5250028-anime-white-and-purple-landscape-wallpapers.jpg","hash":"692ba5b479d1c5937e2be5eb1639370379ab88f6","modified":1632473372404},{"_id":"source/img/background/vilige.jpg","hash":"352c12c96cf372b5692e8542101800f142418235","modified":1632473534958},{"_id":"source/img/background/wp5475501-anime-scenery-4k-wallpapers.jpg","hash":"71f19d96fe0610295de4d010df67fd25fba18a0d","modified":1632473390857},{"_id":"source/img/geek.jpeg","hash":"d8141439fec799dc568d988f8964e16305a23285","modified":1632474346549},{"_id":"source/img/background/wp4979803-scenery-anime-aesthetic-wallpapers.png","hash":"7ff1dec1880c26543012c7e6ae23c981d7743049","modified":1632473410533},{"_id":"source/img/background/illidan.jpg","hash":"db0385138c2ef1b2e86e86175cf2c284e5e6e9e8","modified":1632471817608},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632444743320},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632444743325},{"_id":"source/img/background/wp5089612-scenery-anime-wallpapers.jpg","hash":"1a613dad884121951714cf681d5d56ef621d7db2","modified":1632473402824},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1632444743248},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1632444743249},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1632444743249},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"694fb3659a4331dd752bd92e4248623bff8617cd","modified":1632444743256},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"bc8ed55dc5514cd790274bd41440d816e77d1d01","modified":1632444743257},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"2b47ed68ec888dcc34fa6aad9ce95aeba6744fec","modified":1632444743258},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"8b6640fe2d7e71900bf708b977074f621b2e7a8a","modified":1632444743289},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"be3b9776e63c0f6b308f23aa5eb01efc4de9dfc3","modified":1632790339567},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1632444743264},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"93e2bd4a4f1902e7a4c99ae3ebfa6420fd906c1b","modified":1632444743260},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"5b6de01c82b14834ab1e67f0a803612f5855f064","modified":1632444743282},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"4255c27c8f31fbcc12ec3a973fe73b7a3a35782f","modified":1632444743283},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7a1e19dec37804927f0d331d7e6c80ed03becd61","modified":1632444743282},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"dd2bd15cbd811d6ea973b6e6a17d99e36151e274","modified":1632444743284},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"32a6c84b4690ecf8505ca786bc80aa90530b1534","modified":1632444743284},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"a8342733553ce3368a8520e6f430666070f7d8dc","modified":1632444743285},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"b282e8888cd844bb24b31677a32feb444ecc4144","modified":1632444743286},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"3a9296eb7181e8b3fb0cdc60cbafc815b98d6f51","modified":1632444743288},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"f867e69e563b8ad83054714f73d9173ea050d93b","modified":1632444743286},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"edfeb655895027d15334d009324d27a29926cc94","modified":1632444743287},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1632444743288},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"288f649c2c2314eb610693b18853ee74f0541e87","modified":1632444743260},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1632444743261},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1632444743263},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1632444743262},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"53d9f79b4a3b71d2e89872fa138bc09611862ee4","modified":1632444743266},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"04957fcd5c9025da54d593652b51939e54056827","modified":1632444743273},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"7d780309e12c437c2f8a246dd2fd0c272b8636ce","modified":1632444743265},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"de9b7e729d72eee9327671c3d5df0a607c4c3257","modified":1632444743264},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"2c1c481d9af116e79fe55a0aa0bdbb143a97f559","modified":1632444743262},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"585bb98a23ced3cfbbff6d73d48fdbcd4a87577a","modified":1632444743273},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"48944e12d95dc46137f9f270629296cfd2a8dd22","modified":1632444743276},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1632444743276},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3f16de8c40d87c7d23eba121dd8061757c3f9a58","modified":1632444743280},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"8e29e7ddbda1555c0f9d0d4b5d4550975fec7537","modified":1632444743274},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1632444743295},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"1d8349b7d26271e08cee592aa66f9c79ec41c3c0","modified":1632444743280},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1632444743281},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"76e6bc368cf46d4103ea9514699e10ec0b9a4b56","modified":1632444743281},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"cb72e5acfba882a6eacd6cae8db3238bb078737a","modified":1632444743296},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"c72a7373c19b730e926b476eb528f651617ac4f2","modified":1632444743298},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"91defe82d50a317903411f0b260da0f140f43dc4","modified":1632444743290},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1632444743299},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1632444743297},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1632444743302},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1632444743281},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1632444743302},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1632444743304},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1632444743304},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"1664f8faa028898bd6f91d6db61c7dbf7463ee01","modified":1632444743299},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1632444743305},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"da6144ee040fed0a9b9f45da3478bc33087b5ac9","modified":1632444743301},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"4acb213f90f1e7ba3696ef08d894a2a84807b669","modified":1632444743300},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1632444743303},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"beb3474d6f65c1e56700ba872c6a0d0836d4168e","modified":1632444743251},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1632444743252},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"78ce211415d502c5a4398d786d5c697d34d868b9","modified":1632444743251},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1632444743253},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1632444743252},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1632444743297},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1632444743306},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1632444743254},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1632444743306},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1632444743255},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"4c04caa5ca20bbcbf0934bb7adba4d2cd8a26da2","modified":1632444743256},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1632444743329},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1632444743328},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"5264c0d2eb73b4948ee6bcb1bd847a924d906088","modified":1632444743333},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1632444743335},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"2840108a36b1e9a02cd2ed25adcffde08c42e1cc","modified":1632444743334},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"2c40be98f3471427626b9130fd231bc7e9a66d03","modified":1632444743334},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1632444743329},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"3b9322b6b669c870360db468446b00f53bd1b44c","modified":1632444743336},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"ca82e71e31d3d5ef7fe9487756af06d4e27d9b53","modified":1632444743335},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"1afcd1ca415edc994ae813d6f5d54dd3d1888bc4","modified":1632444743337},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"f20aa828122fce9a76c03b07c7da142704edc8c0","modified":1632444743338},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1632444743330},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1632444743332},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1632444743331},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1632444743340},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"b13e69e555ddec2a71710e07178793e7e13319e7","modified":1632444743267},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1632444743332},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1632444743267},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"7a35381478328b65c9d81827504c4e031bc76a86","modified":1632444743268},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1632444743268},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1632444743270},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1632444743269},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"c3297931cf5d3d1bc53d988b74cbc54dd06ebbd7","modified":1632444743270},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"d6f6620fbc6cf3df5a52322378c0d703b7e1fcf9","modified":1632444743272},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"d1e86754c9560f7346200b2aa9a7f715a3fac82b","modified":1632444743271},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"caae3f692523275b8ca1c56c009a6aeb9c7fdc03","modified":1632444743271},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"1a262c15896663dba773a1796f637f6484f3e524","modified":1632444743292},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"c0da20f9adca2761d370cc6dda013ec1ecbb7710","modified":1632444743291},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1632444743292},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"5eec946182fd537a4d75f15bdf7a09453cc00d83","modified":1632444743293},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"3f2dba4959b27466521de97eff692815650c02b7","modified":1632444743294},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"00a4876e9c37b77fed619138b8bd9ad88ea1e9f3","modified":1632444743294},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1632444743277},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"a49a0064b55cf6d8f2a61abfecd41f0083757e04","modified":1632444743278},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1632444743278},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"c57817ceaee868d416558e56d2a8d0d418c64a2d","modified":1632444743279},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1632444743278},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1632444743326},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1632444743308},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1632444743309},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"64fa8c328dc93432ec822de2818aef21a4f63b29","modified":1632444743339},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"47235d222812e2f829e9bde039fa719bbced9325","modified":1632444743310},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1632444743311},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"d555a4c9df7b49250c1747c2fbd8353f2d822775","modified":1632444743327},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"33d237014f22324a034ae463857ce2af72a0d65e","modified":1632444743317},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"2dd6f1a8470f5bd10ed53cfcba6811197c79d487","modified":1632444743318},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1632444743319},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"6f2a3b8af2793dd831f661c6db0ccbe0a62ccc48","modified":1632444743318},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"c628894ec5afab5b3e6f4633390f2b403bf6678f","modified":1632444743319},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1632444743320},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"83694b28209c548ef38bee78e473b02e90cbcf9f","modified":1632444743322},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"5775fd234c62a2f3520b34b2a66fe181cc2d4ea3","modified":1632444743321},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1632444743326},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"88939a09d1ab73a2b96a6b8b08c96ad03d402728","modified":1632444743324},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"c189a52dbc6eb554d1da3f2636920813b3b7e4fb","modified":1632444743323},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"da823846f0896f16b21c7430f047f7222a89cd10","modified":1632444743312},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"c398892fba1494dd6fd417415076458ed321d34d","modified":1632444743314},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1632444743313},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"dbd0a3518e5bfca92851490b34654f46bb5cfc76","modified":1632444743314},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1632444743315},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"d29064ed8bdf62d5cf4eac32ebdb5d0c7075ebbd","modified":1632444743316},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"f770c5c3ee89421e9e3f1313ca5bd07a2448f400","modified":1632444743315},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1632444743317},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e568f308df26465e0432197e8b57384707470f54","modified":1632444743316},{"_id":"source/img/background/wp5475508-anime-scenery-4k-wallpapers.jpg","hash":"62007e00917d8c1de4b3d6ac8af78e8934a27327","modified":1632473397929},{"_id":"source/img/watch.PNG","hash":"89c6bbccb0559bef659ff93aff9851fdcbc2e78d","modified":1632789695967},{"_id":"source/img/background/sky.jpeg","hash":"b239fb9d5c6bcf5d7c564fec484a99c379fe6ce4","modified":1632453218730},{"_id":"source/img/background/wp5475527-anime-scenery-4k-wallpapers.jpg","hash":"cb0014088361986e6c49c3a3cefde9fd76d7b7b9","modified":1632473433904},{"_id":"public/local-search.xml","hash":"fb891a1d0596da9de2eeada4d915cd30c74b626d","modified":1632812193502},{"_id":"public/about/index.html","hash":"764dded401aac7ea47943ea775938d63ce4ab809","modified":1632812193502},{"_id":"public/2021/09/21/随笔01/index.html","hash":"237763f01dfae977e235048db39884f64429fe71","modified":1632812193502},{"_id":"public/tags/Spring/index.html","hash":"f5f3ebce21dfb9905b7a4aa3f8301c9f0b512271","modified":1632812193502},{"_id":"public/tags/配置/index.html","hash":"4f8d76a478e77f446ca35572ee6d33612f08d2cf","modified":1632812193502},{"_id":"public/tags/JAVA/index.html","hash":"cd0f63f4d65cc690f60833c75f3ac7f2285058f0","modified":1632812193502},{"_id":"public/tags/NTP/index.html","hash":"c1dc3ed7026e9524e116a6a36b42f8b2d1e3ebed","modified":1632812193502},{"_id":"public/tags/Linux/index.html","hash":"9e1d008038c2404e8c78d6c0d2ff91cd467bc047","modified":1632812193502},{"_id":"public/tags/JVM/index.html","hash":"e02ec0a0f5effedb59757d1d04fea935efb4dda2","modified":1632812193502},{"_id":"public/tags/Tomcat/index.html","hash":"d78eb9edad98ee84dc57781a381cb0f7ff2c4e4c","modified":1632812193502},{"_id":"public/tags/调优/index.html","hash":"917c8d26f283fd3ea23bb71ef41362f9c868e976","modified":1632812193502},{"_id":"public/tags/随笔/index.html","hash":"1265afbec2f3a0850ef1dcce9e70c188fc4bcc61","modified":1632812193502},{"_id":"public/archives/index.html","hash":"40cacee415659aa145db868e30a617de74f0e87b","modified":1632812193502},{"_id":"public/archives/2021/index.html","hash":"40cacee415659aa145db868e30a617de74f0e87b","modified":1632812193502},{"_id":"public/archives/2021/06/index.html","hash":"00462ee86fd139ab839aa80f3838c8de0a6214a7","modified":1632812193502},{"_id":"public/archives/2021/09/index.html","hash":"6d5228f678fd09dbad4aab558e48ca6ff8dcd375","modified":1632812193502},{"_id":"public/categories/JAVA/index.html","hash":"822c3693a222f8727638b243bc7fb8b011ba9848","modified":1632812193502},{"_id":"public/categories/Linux/index.html","hash":"9551a21842af01ec1623c5b426f5a6bcd439a6ff","modified":1632812193502},{"_id":"public/categories/JVM/index.html","hash":"032b00d0fcb4fa6bc55328924c7d87ccad276ff8","modified":1632812193502},{"_id":"public/categories/随笔/index.html","hash":"c02217148a108624149a5a9bd13c80f4cfec41ce","modified":1632812193502},{"_id":"public/tags/index.html","hash":"b28d3f5d1a70b0da8d8249fa0e1b41ace7460686","modified":1632812193502},{"_id":"public/404.html","hash":"025a3f34048ba6c0f6ced2edf03aa4eb63977ef0","modified":1632812193502},{"_id":"public/categories/index.html","hash":"3e25d8c459f9509f97e5a9bfe3ac80d9ceeb36ae","modified":1632812193502},{"_id":"public/2021/09/28/ntp/index.html","hash":"61030ea414db736df18a7c69533e46da387a516f","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/index.html","hash":"fe055ed01c06d1be120064da73fe4fa30b051af0","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/index.html","hash":"374e0e2b5abc4d8bfdd0728ddc17c703498a5525","modified":1632812193502},{"_id":"public/2021/06/20/application-yml/index.html","hash":"26709a586dd5677c5c77339aa1a46f35563b04c1","modified":1632812193502},{"_id":"public/index.html","hash":"a7c0712cb5bbbea26542216614336fa6eac0d6e4","modified":1632812193502},{"_id":"public/links/index.html","hash":"b738f532a9db13c1789d69d9ad3450de0edf7436","modified":1632812193502},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1632812193502},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1632812193502},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1632812193502},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1632812193502},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1632812193502},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1632812193502},{"_id":"public/img/JVM.png","hash":"5f534839ed59b4b33d95f8cc0ec13d6e7c741f55","modified":1632812193502},{"_id":"public/img/girl01.jpg","hash":"37180aa627c2c554b5c65565e592dae52b79c31f","modified":1632812193502},{"_id":"public/img/cloud.png","hash":"ff8fedd562190999b2d9893163853db235a43e39","modified":1632812193502},{"_id":"public/img/background/bg1.jpg","hash":"b1f2e91885f3a453970054c0ca4b454e5a348af0","modified":1632812193502},{"_id":"public/2021/06/20/application-yml/image-20210803145617104.png","hash":"cec409df2618e887fba788360b1b0eca08c31297","modified":1632812193502},{"_id":"public/2021/09/28/ntp/20160917151428497.PNG","hash":"fa71f9b9f586ffd104b1c752e22bcaf45031799a","modified":1632812193502},{"_id":"public/2021/09/28/ntp/915691-20171013005125324-1966406641.png","hash":"ac0164e38b09e62d102272309eb014bb16f207c6","modified":1632812193502},{"_id":"public/2021/09/28/ntp/915691-20171013002936340-1631273268.png","hash":"c6c0690c37e0766d9e81543863b26ba9badf0866","modified":1632812193502},{"_id":"public/2021/09/28/ntp/915691-20171013010729637-1391262052.png","hash":"c0ef0e846f3737ec25c683bcf57da63a72610be6","modified":1632812193502},{"_id":"public/2021/09/28/ntp/915691-20171013131031496-1095710777.png","hash":"a6b9cca77f36012723cb906f10d8d7198a04c670","modified":1632812193502},{"_id":"public/2021/09/28/ntp/915691-20171013131052840-421840461.png","hash":"810bc850c5b8db9292f5a3b70f3d9a7cfcf69c96","modified":1632812193502},{"_id":"public/2021/09/28/ntp/915691-20171013131330184-1857767541.png","hash":"8b04a82944d6da9c812dd5d65e07c39193379216","modified":1632812193502},{"_id":"public/2021/09/28/ntp/915691-20200929232515753-1829091402.png","hash":"f4c7c44daadc5525881893e0543e3f95c7f6cd1f","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png","hash":"519976950d0f34ebf1a485e9cbe5f44f8186b5eb","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png","hash":"1075a4ece1d842d96b8c26d1ac00709a63d04361","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png","hash":"daf5bc1145eaa9798d4866df251d56776c6cf2e4","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png","hash":"251af066d3d455397dc0c8e64424ec9e1838c4c0","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png","hash":"2cde159e5c976081fb0f412fb3744cd1f032c09b","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png","hash":"bc9163bf1fa166d93c9b14a7c304b8c0d52c39c8","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png","hash":"0e1cd6a3c4507f18c2a75fc360056b2ff24bab46","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png","hash":"1acc9a73ce130ff763fdce3e82736e1d896d26e2","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png","hash":"e3bbaac01921172c520eb0710e5f163e254668c9","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png","hash":"78ed5e6849619ebb8d09fb5a4b9e61ce0c9c6328","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png","hash":"bd4df47a073bfaff3e59800467262d6f9c368fe8","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png","hash":"dd6a39b08cf3dbab0fd2aa056dc199aee942c279","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png","hash":"313174b5169fec5387cc88c324df0c5590216d28","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923135927456.png","hash":"799c30bf2ef257c95d2f95092edd1c8f0d99bfcc","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png","hash":"e9358e4b8fbeeed0f6ca3fb23863d1be6bd3ac85","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923161704099.png","hash":"f283c9353fd593d9abe3f38e460af01a6dcbf27f","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923163027954.png","hash":"241776d838e9fa8935e542c51bf63f56e37ef0c8","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923163347853.png","hash":"46c6f1efee96e5cf6322a3c8e9e5c9bac19f973e","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923163132389.png","hash":"6ff28769057cb48e1531fe5b0ba27048cb1968f9","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923163549140.png","hash":"27b72a605bd0cb2261a458667ab71c7e3fddaf5d","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923163843553.png","hash":"1936b7303268b4365ac7c40a0c2ea46013c26416","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923163638670.png","hash":"3bc7e94382e1b874f835cec9d6670fe24b991b46","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923164143750.png","hash":"a36dd38f13535a8307c9a8a9c2dd373450331e44","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923165424944.png","hash":"86e3acfc5c7f91b98574011f72223f91fcaa5bf8","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923165520445.png","hash":"3613cb566e84a895f8dd553407d5bb7fe6d40817","modified":1632812193502},{"_id":"public/img/start.jpg","hash":"3ba2c0c30856e583c42dc976b50f048636353441","modified":1632812193502},{"_id":"public/img/background/bg2.jpg","hash":"d6f318bf6760210400b5922ea9d8ca457a609f6d","modified":1632812193502},{"_id":"public/img/background/wp5475522-anime-scenery-4k-wallpapers.jpg","hash":"2fd08be3b76ae92b645f570830d09beff4ae6fc7","modified":1632812193502},{"_id":"public/2021/09/28/ntp/test1.png","hash":"6090bd54fd675cc6bf0a93ce9122be30461e7c18","modified":1632812193502},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1632812193502},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1632812193502},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1632812193502},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1632812193502},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1632812193502},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1632812193502},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1632812193502},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1632812193502},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1632812193502},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1632812193502},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1632812193502},{"_id":"public/2021/06/28/spring-source/e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png","hash":"49a078a8282e392883482e9bc4e47a2205325c87","modified":1632812193502},{"_id":"public/2021/09/24/JVM调优-一/image-20210923140858686.png","hash":"f42e4d90bfd4e7df479ecfc972d03b7fe8d5f46e","modified":1632812193502},{"_id":"public/img/code_rain.jpg","hash":"d781c5c8a598dbe5a41426626dbf3bb48a4b599b","modified":1632812193502},{"_id":"public/img/background/wp5298648-anime-scenery-4k-wallpapers.jpg","hash":"593325832587a60c1e066fb00cf6e396e0c0af25","modified":1632812193502},{"_id":"public/img/background/wp5475530-anime-scenery-4k-wallpapers.jpg","hash":"55898f7129e4f07a6c982122b8627fd9bef1ddb3","modified":1632812193502},{"_id":"public/img/background/wp5250028-anime-white-and-purple-landscape-wallpapers.jpg","hash":"692ba5b479d1c5937e2be5eb1639370379ab88f6","modified":1632812193502},{"_id":"public/img/background/vilige.jpg","hash":"352c12c96cf372b5692e8542101800f142418235","modified":1632812193502},{"_id":"public/img/background/wp5475501-anime-scenery-4k-wallpapers.jpg","hash":"71f19d96fe0610295de4d010df67fd25fba18a0d","modified":1632812193502},{"_id":"public/img/geek.jpeg","hash":"d8141439fec799dc568d988f8964e16305a23285","modified":1632812193502},{"_id":"public/img/background/wp4979803-scenery-anime-aesthetic-wallpapers.png","hash":"7ff1dec1880c26543012c7e6ae23c981d7743049","modified":1632812193502},{"_id":"public/img/background/illidan.jpg","hash":"db0385138c2ef1b2e86e86175cf2c284e5e6e9e8","modified":1632812193502},{"_id":"public/img/background/wp5089612-scenery-anime-wallpapers.jpg","hash":"1a613dad884121951714cf681d5d56ef621d7db2","modified":1632812193502},{"_id":"public/img/background/wp5475508-anime-scenery-4k-wallpapers.jpg","hash":"62007e00917d8c1de4b3d6ac8af78e8934a27327","modified":1632812193502},{"_id":"public/img/watch.PNG","hash":"89c6bbccb0559bef659ff93aff9851fdcbc2e78d","modified":1632812193502},{"_id":"public/img/background/sky.jpeg","hash":"b239fb9d5c6bcf5d7c564fec484a99c379fe6ce4","modified":1632812193502},{"_id":"public/img/background/wp5475527-anime-scenery-4k-wallpapers.jpg","hash":"cb0014088361986e6c49c3a3cefde9fd76d7b7b9","modified":1632812193502},{"_id":"source/img/spring.jpg","hash":"ab87430b564f13f6c1659940b04432005f072510","modified":1632812564349}],"Category":[{"name":"JAVA","_id":"cku3q80kd000358fghw9y16lq"},{"name":"Linux","_id":"cku3q80kl000858fgdjl1eiwn"},{"name":"JVM","_id":"cku3q80kq000d58fg214v1wf3"},{"name":"随笔","_id":"cku3q80kt000j58fggub5auzv"}],"Data":[],"Page":[{"title":"关于","layout":"about","_content":"\n爱生活，爱编码\n","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: about\n---\n\n爱生活，爱编码\n","date":"2021-09-28T00:45:56.770Z","updated":"2021-09-28T00:45:56.770Z","path":"about/index.html","comments":1,"_id":"cku3q80k0000058fgdf4x540x","content":"<p>爱生活，爱编码</p>\n","site":{"data":{}},"excerpt":"","more":"<p>爱生活，爱编码</p>\n"}],"Post":[{"title":"application.yml配置文件优先级","comments":1,"index_img":"/img/girl01.jpg","banner_img":"/img/background/vilige.jpg","date":"2021-06-20T01:12:32.000Z","updated":"2021-09-28T01:12:32.000Z","_content":"\n在我们的微服务资源文件夹下，用于解耦配置信息的有多个`application.yml`文件，如\n\n```shell\napplication.yml\napplication-common.yml\napplication-broker.yml\napplication-dev.yml\napplication-sit.yml\napplication-uat.yml\napplication-prod.yml\n```\n\n那么他们之间有什么区别？各文件的生效优先级又是怎么样的呢？\n\n首先我们来了解一下各环境的定义\n\n>dev：本地开发环境，主要供开发人员使用\n>\n>sit：测试环境，主要供测试人员使用\n>\n>uat：用户测试环境，一般使用部分生产数据，模拟生产环境，测试人员为真实用户\n>\n>prod：生产环境，商用环境，用户正在使用的环境。\n\n环境分层以后，我们软件的交付流程、研发人员的职责也更加清晰。\n\n如果有多个环境，那么可以通过让程序读取不同的配置文件来做到环境、资源隔离，如开发环境数小二连接的是开发本地的数据库、调用的开发环境ABM，不会影响测试环境及测试人员的工作。\n\n从设计模式上来看，也可以用其他自定义后缀如`application-common.yml`文件来抽象公共的配置，如\n\n```yml\n#feign 与ribbon 超时等设置\nfeign:\n  hystrix:\n    enabled: true\nribbon:\n  OkToRetryOnAllOperations: true\n  ConnectTimeout: 2000\n  ReadTimeout: 8000\n  MaxAutoRetriesNextServer: 0\n  MaxAutoRetries: 0\n  eager-load:\n    enabled: true #开启饥饿加载\n    clients: asset,as,sm,core\n#其他需要生效的application-XXX.yml文件\nspring:\n  profiles:\n    active: common,broker\n```\n\n那么怎么怎么使这些文件协调地工作，key相同时value不冲突并且达到我们想要的效果呢。\n\n我们需要指定生效的规则\n\n```yml\n#其他需要生效的application-XXX.yml文件\nspring:\n  profiles:\n    active: common,broker\n```\n\n\n\n我们使用一个简单的SpringBoot Demo来验证一下\n\n![](image-20210803145617104.png)\n\n3个配置文件\n\n`application.yml`\n\n```yml\nenv: origin\n```\n\n`application-sit.yml`\n\n```yml\nenv: sit\nattr1: sit\n```\n\n`application-prod.yml`\n\n```yml\nenv: prod\nattr1: prod\nattr2: prod\n```\n\n\n\n```java\n//controller类\n...\n@RestController\nclass controller {\n\t//这种方式可以读取到配置文件中key为env的value\n    @Value(\"${env}\")\n    String env;\n\t//\":\"后跟的是缺省值\n    @Value(\"${attr1:none1}\")\n    String attr1;\n\n    @Value(\"${attr2:none2}\")\n    String attr2;\n\n    @RequestMapping(\"/test\")\n    public String test() {\n        System.out.println(\"env:\"+env);\n        System.out.println(\"attr1:\"+attr1);\n        System.out.println(\"attr2:\"+attr2);\n        return env;\n\n    }\n}\n```\n\n执行后控制台打印\n\n```java\nenv:origin\nattr1:none1\nattr2:none2\n```\n\n可以看出，`application-sit.yml`与`application-prod.yml`中定义的值并没有生效。\n\n因为我们设置spring读取其他后缀的文件，因此只有`application,yml`文件生效了。\n\n我们在`application,yml`中添加\n\n```yml\nspring:\n  profiles:\n   active: sit\n```\n\n控制台输出\n\n```java\nenv:sit\nattr1:sit\nattr2:none2\n```\n\n`application.yml`的env值被sit中覆盖了,attr1也由缺省值变为了sit。\n\n修改为\n\n```yml\nspring:\n  profiles:\n   active: sit,prod\n```\n\n控制台输出\n\n```java\nenv:prod\nattr1:prod\nattr2:prod\n```\n\nprod文件覆盖了其他所有的文件的值\n\n调整下active value的顺序\n\n```yml\nspring:\n  profiles:\n   active: prod,sit\n```\n\n控制台输出\n\n```java\nenv:sit\nattr1:sit\nattr2:prod\n```\n\n可以看出，active中写的顺序越靠后，覆盖的优先级越高。\n\n\n\n#### **结论**：\n\n在值没有冲突的情况下，需要在spring.profiles.active中指定文件后缀来使对应配置生效。\n\n在值有冲突的情况下，active中书写顺序越靠后的优先级越高。\n\n\n\n\n\n","source":"_posts/2021-09-28-application-yml.md","raw":"---\ntitle: application.yml配置文件优先级\ncomments: true\nindex_img: /img/girl01.jpg\nbanner_img: /img/background/vilige.jpg\ndate: 2021-06-20 09:12:32\nupdated: 2021-09-28 09:12:32\ntags: [Spring,配置,JAVA]\ncategories: JAVA\n---\n\n在我们的微服务资源文件夹下，用于解耦配置信息的有多个`application.yml`文件，如\n\n```shell\napplication.yml\napplication-common.yml\napplication-broker.yml\napplication-dev.yml\napplication-sit.yml\napplication-uat.yml\napplication-prod.yml\n```\n\n那么他们之间有什么区别？各文件的生效优先级又是怎么样的呢？\n\n首先我们来了解一下各环境的定义\n\n>dev：本地开发环境，主要供开发人员使用\n>\n>sit：测试环境，主要供测试人员使用\n>\n>uat：用户测试环境，一般使用部分生产数据，模拟生产环境，测试人员为真实用户\n>\n>prod：生产环境，商用环境，用户正在使用的环境。\n\n环境分层以后，我们软件的交付流程、研发人员的职责也更加清晰。\n\n如果有多个环境，那么可以通过让程序读取不同的配置文件来做到环境、资源隔离，如开发环境数小二连接的是开发本地的数据库、调用的开发环境ABM，不会影响测试环境及测试人员的工作。\n\n从设计模式上来看，也可以用其他自定义后缀如`application-common.yml`文件来抽象公共的配置，如\n\n```yml\n#feign 与ribbon 超时等设置\nfeign:\n  hystrix:\n    enabled: true\nribbon:\n  OkToRetryOnAllOperations: true\n  ConnectTimeout: 2000\n  ReadTimeout: 8000\n  MaxAutoRetriesNextServer: 0\n  MaxAutoRetries: 0\n  eager-load:\n    enabled: true #开启饥饿加载\n    clients: asset,as,sm,core\n#其他需要生效的application-XXX.yml文件\nspring:\n  profiles:\n    active: common,broker\n```\n\n那么怎么怎么使这些文件协调地工作，key相同时value不冲突并且达到我们想要的效果呢。\n\n我们需要指定生效的规则\n\n```yml\n#其他需要生效的application-XXX.yml文件\nspring:\n  profiles:\n    active: common,broker\n```\n\n\n\n我们使用一个简单的SpringBoot Demo来验证一下\n\n![](image-20210803145617104.png)\n\n3个配置文件\n\n`application.yml`\n\n```yml\nenv: origin\n```\n\n`application-sit.yml`\n\n```yml\nenv: sit\nattr1: sit\n```\n\n`application-prod.yml`\n\n```yml\nenv: prod\nattr1: prod\nattr2: prod\n```\n\n\n\n```java\n//controller类\n...\n@RestController\nclass controller {\n\t//这种方式可以读取到配置文件中key为env的value\n    @Value(\"${env}\")\n    String env;\n\t//\":\"后跟的是缺省值\n    @Value(\"${attr1:none1}\")\n    String attr1;\n\n    @Value(\"${attr2:none2}\")\n    String attr2;\n\n    @RequestMapping(\"/test\")\n    public String test() {\n        System.out.println(\"env:\"+env);\n        System.out.println(\"attr1:\"+attr1);\n        System.out.println(\"attr2:\"+attr2);\n        return env;\n\n    }\n}\n```\n\n执行后控制台打印\n\n```java\nenv:origin\nattr1:none1\nattr2:none2\n```\n\n可以看出，`application-sit.yml`与`application-prod.yml`中定义的值并没有生效。\n\n因为我们设置spring读取其他后缀的文件，因此只有`application,yml`文件生效了。\n\n我们在`application,yml`中添加\n\n```yml\nspring:\n  profiles:\n   active: sit\n```\n\n控制台输出\n\n```java\nenv:sit\nattr1:sit\nattr2:none2\n```\n\n`application.yml`的env值被sit中覆盖了,attr1也由缺省值变为了sit。\n\n修改为\n\n```yml\nspring:\n  profiles:\n   active: sit,prod\n```\n\n控制台输出\n\n```java\nenv:prod\nattr1:prod\nattr2:prod\n```\n\nprod文件覆盖了其他所有的文件的值\n\n调整下active value的顺序\n\n```yml\nspring:\n  profiles:\n   active: prod,sit\n```\n\n控制台输出\n\n```java\nenv:sit\nattr1:sit\nattr2:prod\n```\n\n可以看出，active中写的顺序越靠后，覆盖的优先级越高。\n\n\n\n#### **结论**：\n\n在值没有冲突的情况下，需要在spring.profiles.active中指定文件后缀来使对应配置生效。\n\n在值有冲突的情况下，active中书写顺序越靠后的优先级越高。\n\n\n\n\n\n","slug":"application-yml","published":1,"layout":"post","photos":[],"link":"","_id":"cku3q80k6000158fg7nfpgn7u","content":"<p>在我们的微服务资源文件夹下，用于解耦配置信息的有多个<code>application.yml</code>文件，如</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">application.yml<br>application-common.yml<br>application-broker.yml<br>application-dev.yml<br>application-sit.yml<br>application-uat.yml<br>application-prod.yml<br></code></pre></td></tr></table></figure>\n\n<p>那么他们之间有什么区别？各文件的生效优先级又是怎么样的呢？</p>\n<p>首先我们来了解一下各环境的定义</p>\n<blockquote>\n<p>dev：本地开发环境，主要供开发人员使用</p>\n<p>sit：测试环境，主要供测试人员使用</p>\n<p>uat：用户测试环境，一般使用部分生产数据，模拟生产环境，测试人员为真实用户</p>\n<p>prod：生产环境，商用环境，用户正在使用的环境。</p>\n</blockquote>\n<p>环境分层以后，我们软件的交付流程、研发人员的职责也更加清晰。</p>\n<p>如果有多个环境，那么可以通过让程序读取不同的配置文件来做到环境、资源隔离，如开发环境数小二连接的是开发本地的数据库、调用的开发环境ABM，不会影响测试环境及测试人员的工作。</p>\n<p>从设计模式上来看，也可以用其他自定义后缀如<code>application-common.yml</code>文件来抽象公共的配置，如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#feign 与ribbon 超时等设置</span><br><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">hystrix:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">ribbon:</span><br>  <span class=\"hljs-attr\">OkToRetryOnAllOperations:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">ConnectTimeout:</span> <span class=\"hljs-number\">2000</span><br>  <span class=\"hljs-attr\">ReadTimeout:</span> <span class=\"hljs-number\">8000</span><br>  <span class=\"hljs-attr\">MaxAutoRetriesNextServer:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">MaxAutoRetries:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">eager-load:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#开启饥饿加载</span><br>    <span class=\"hljs-attr\">clients:</span> <span class=\"hljs-string\">asset,as,sm,core</span><br><span class=\"hljs-comment\">#其他需要生效的application-XXX.yml文件</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">common,broker</span><br></code></pre></td></tr></table></figure>\n\n<p>那么怎么怎么使这些文件协调地工作，key相同时value不冲突并且达到我们想要的效果呢。</p>\n<p>我们需要指定生效的规则</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#其他需要生效的application-XXX.yml文件</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">common,broker</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>我们使用一个简单的SpringBoot Demo来验证一下</p>\n<p><img src=\"image-20210803145617104.png\"></p>\n<p>3个配置文件</p>\n<p><code>application.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">origin</span><br></code></pre></td></tr></table></figure>\n\n<p><code>application-sit.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">sit</span><br><span class=\"hljs-attr\">attr1:</span> <span class=\"hljs-string\">sit</span><br></code></pre></td></tr></table></figure>\n\n<p><code>application-prod.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">prod</span><br><span class=\"hljs-attr\">attr1:</span> <span class=\"hljs-string\">prod</span><br><span class=\"hljs-attr\">attr2:</span> <span class=\"hljs-string\">prod</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//controller类</span><br>...<br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">controller</span> </span>&#123;<br>\t<span class=\"hljs-comment\">//这种方式可以读取到配置文件中key为env的value</span><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;env&#125;&quot;)</span><br>    String env;<br>\t<span class=\"hljs-comment\">//&quot;:&quot;后跟的是缺省值</span><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;attr1:none1&#125;&quot;)</span><br>    String attr1;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;attr2:none2&#125;&quot;)</span><br>    String attr2;<br><br>    <span class=\"hljs-meta\">@RequestMapping(&quot;/test&quot;)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;env:&quot;</span>+env);<br>        System.out.println(<span class=\"hljs-string\">&quot;attr1:&quot;</span>+attr1);<br>        System.out.println(<span class=\"hljs-string\">&quot;attr2:&quot;</span>+attr2);<br>        <span class=\"hljs-keyword\">return</span> env;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>执行后控制台打印</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:origin<br>attr1:none1<br>attr2:none2<br></code></pre></td></tr></table></figure>\n\n<p>可以看出，<code>application-sit.yml</code>与<code>application-prod.yml</code>中定义的值并没有生效。</p>\n<p>因为我们设置spring读取其他后缀的文件，因此只有<code>application,yml</code>文件生效了。</p>\n<p>我们在<code>application,yml</code>中添加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>   <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">sit</span><br></code></pre></td></tr></table></figure>\n\n<p>控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:sit<br>attr1:sit<br>attr2:none2<br></code></pre></td></tr></table></figure>\n\n<p><code>application.yml</code>的env值被sit中覆盖了,attr1也由缺省值变为了sit。</p>\n<p>修改为</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>   <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">sit,prod</span><br></code></pre></td></tr></table></figure>\n\n<p>控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:prod<br>attr1:prod<br>attr2:prod<br></code></pre></td></tr></table></figure>\n\n<p>prod文件覆盖了其他所有的文件的值</p>\n<p>调整下active value的顺序</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>   <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">prod,sit</span><br></code></pre></td></tr></table></figure>\n\n<p>控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:sit<br>attr1:sit<br>attr2:prod<br></code></pre></td></tr></table></figure>\n\n<p>可以看出，active中写的顺序越靠后，覆盖的优先级越高。</p>\n<h4 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a><strong>结论</strong>：</h4><p>在值没有冲突的情况下，需要在spring.profiles.active中指定文件后缀来使对应配置生效。</p>\n<p>在值有冲突的情况下，active中书写顺序越靠后的优先级越高。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在我们的微服务资源文件夹下，用于解耦配置信息的有多个<code>application.yml</code>文件，如</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">application.yml<br>application-common.yml<br>application-broker.yml<br>application-dev.yml<br>application-sit.yml<br>application-uat.yml<br>application-prod.yml<br></code></pre></td></tr></table></figure>\n\n<p>那么他们之间有什么区别？各文件的生效优先级又是怎么样的呢？</p>\n<p>首先我们来了解一下各环境的定义</p>\n<blockquote>\n<p>dev：本地开发环境，主要供开发人员使用</p>\n<p>sit：测试环境，主要供测试人员使用</p>\n<p>uat：用户测试环境，一般使用部分生产数据，模拟生产环境，测试人员为真实用户</p>\n<p>prod：生产环境，商用环境，用户正在使用的环境。</p>\n</blockquote>\n<p>环境分层以后，我们软件的交付流程、研发人员的职责也更加清晰。</p>\n<p>如果有多个环境，那么可以通过让程序读取不同的配置文件来做到环境、资源隔离，如开发环境数小二连接的是开发本地的数据库、调用的开发环境ABM，不会影响测试环境及测试人员的工作。</p>\n<p>从设计模式上来看，也可以用其他自定义后缀如<code>application-common.yml</code>文件来抽象公共的配置，如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#feign 与ribbon 超时等设置</span><br><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">hystrix:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">ribbon:</span><br>  <span class=\"hljs-attr\">OkToRetryOnAllOperations:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">ConnectTimeout:</span> <span class=\"hljs-number\">2000</span><br>  <span class=\"hljs-attr\">ReadTimeout:</span> <span class=\"hljs-number\">8000</span><br>  <span class=\"hljs-attr\">MaxAutoRetriesNextServer:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">MaxAutoRetries:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">eager-load:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#开启饥饿加载</span><br>    <span class=\"hljs-attr\">clients:</span> <span class=\"hljs-string\">asset,as,sm,core</span><br><span class=\"hljs-comment\">#其他需要生效的application-XXX.yml文件</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">common,broker</span><br></code></pre></td></tr></table></figure>\n\n<p>那么怎么怎么使这些文件协调地工作，key相同时value不冲突并且达到我们想要的效果呢。</p>\n<p>我们需要指定生效的规则</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#其他需要生效的application-XXX.yml文件</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">common,broker</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>我们使用一个简单的SpringBoot Demo来验证一下</p>\n<p><img src=\"image-20210803145617104.png\"></p>\n<p>3个配置文件</p>\n<p><code>application.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">origin</span><br></code></pre></td></tr></table></figure>\n\n<p><code>application-sit.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">sit</span><br><span class=\"hljs-attr\">attr1:</span> <span class=\"hljs-string\">sit</span><br></code></pre></td></tr></table></figure>\n\n<p><code>application-prod.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">prod</span><br><span class=\"hljs-attr\">attr1:</span> <span class=\"hljs-string\">prod</span><br><span class=\"hljs-attr\">attr2:</span> <span class=\"hljs-string\">prod</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//controller类</span><br>...<br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">controller</span> </span>&#123;<br>\t<span class=\"hljs-comment\">//这种方式可以读取到配置文件中key为env的value</span><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;env&#125;&quot;)</span><br>    String env;<br>\t<span class=\"hljs-comment\">//&quot;:&quot;后跟的是缺省值</span><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;attr1:none1&#125;&quot;)</span><br>    String attr1;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;attr2:none2&#125;&quot;)</span><br>    String attr2;<br><br>    <span class=\"hljs-meta\">@RequestMapping(&quot;/test&quot;)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;env:&quot;</span>+env);<br>        System.out.println(<span class=\"hljs-string\">&quot;attr1:&quot;</span>+attr1);<br>        System.out.println(<span class=\"hljs-string\">&quot;attr2:&quot;</span>+attr2);<br>        <span class=\"hljs-keyword\">return</span> env;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>执行后控制台打印</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:origin<br>attr1:none1<br>attr2:none2<br></code></pre></td></tr></table></figure>\n\n<p>可以看出，<code>application-sit.yml</code>与<code>application-prod.yml</code>中定义的值并没有生效。</p>\n<p>因为我们设置spring读取其他后缀的文件，因此只有<code>application,yml</code>文件生效了。</p>\n<p>我们在<code>application,yml</code>中添加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>   <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">sit</span><br></code></pre></td></tr></table></figure>\n\n<p>控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:sit<br>attr1:sit<br>attr2:none2<br></code></pre></td></tr></table></figure>\n\n<p><code>application.yml</code>的env值被sit中覆盖了,attr1也由缺省值变为了sit。</p>\n<p>修改为</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>   <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">sit,prod</span><br></code></pre></td></tr></table></figure>\n\n<p>控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:prod<br>attr1:prod<br>attr2:prod<br></code></pre></td></tr></table></figure>\n\n<p>prod文件覆盖了其他所有的文件的值</p>\n<p>调整下active value的顺序</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>   <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">prod,sit</span><br></code></pre></td></tr></table></figure>\n\n<p>控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">env:sit<br>attr1:sit<br>attr2:prod<br></code></pre></td></tr></table></figure>\n\n<p>可以看出，active中写的顺序越靠后，覆盖的优先级越高。</p>\n<h4 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a><strong>结论</strong>：</h4><p>在值没有冲突的情况下，需要在spring.profiles.active中指定文件后缀来使对应配置生效。</p>\n<p>在值有冲突的情况下，active中书写顺序越靠后的优先级越高。</p>\n"},{"title":"Linux NTP时钟同步","comments":1,"index_img":"/img/watch.PNG","banner_img":"/img/background/vilige.jpg","date":"2021-09-28T00:25:14.000Z","updated":"2021-09-28T00:25:14.000Z","_content":"\n## 1. 什么是NTP,why we need it?\n\n​\t\t如今我们的软件系统通常部署在计算设备集群中，而非单一的物理设备上。统一、同步的标准时间用于记录各种事件发生时序，如日志的打印时间戳、微服务调用链监控、文件创建和访问时间、E-MAIL时间戳、数据库处理时间等。系统内不同计算设备之间控制、计算、处理、应用等数据或操作都具有时序性，若计算机时间不同步，这些应用或操作或将无法正常进行。\n\n​\t\t大数据系统是对时间敏感的计算处理系统，时间同步是大数据能够得到正确处理的基础保障，是大数据得以发挥作用的技术支撑。大数据时代，整个处理计算系统内的大数据通信都是通过网络进行。时间同步也是如此，利用大数据的互联网络传送标准时间信息，实现大数据系统内时间同步。\n\n​\t\t网络时间同步协议(NTP)是时间同步的技术基础。\n\n​\t\t首先看下官网http://www.ntp.org/对它的定义。\n\n>**NTP is a protocol designed to synchronize the clocks of computers over a network.**\n>\n>**NTP 是一种通过网络同步计算机时钟的协议。**\n\n​\t\t网站的描述十分简洁。在实际的应用中，NTP分为服务端和客户端，客户端向服务端发起请求索要时间，来校准自己的时间。而一个节点，既可以作为服务端，也可以作为客户端。\n\n​\t\t然后我们来看下[《鸟哥的Linux》](http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf)中对于NTP的介绍。\n\n>​\t\t Linux 操作系统的计时方式主要是由1970/01/01 开始计算总秒数，因此，如果你还记得date 这个指令的话， 会发现它有个+%s 的参数，可以取得总秒数，这个就是软件时钟。但，如同前面说的，电脑硬件主要是以BIOS芯片内部的时间为主要的时间依据(硬件时钟)，而偏偏这个时间可能因为BIOS 内部晶片本身的问题，而导致BIOS 时间与标准时间(UTC) 有一点点的差异存在！所以为了避免主机长时间运行下所导致的时间误差，进行时间同步 (synchronize) 的工作就显的很重要了！\n>\n>- 软件时钟：由Linux 系统根据1970/01/01 开始计算的总秒数。\n>- 硬件时钟：主机硬件芯片里面的时钟，例如BIOS 记录的时间。\n>\n>那么怎么让时间同步化呢？想一想，如果我们选择几部主要主机(Primary server) 调校时间，让这些 Primary Servers 的时间同步之后，再开放网络服务来让Client 端连线，并且提供给Client 端调整自己的时间，不就可以达到全部的电脑时间同步化的目的了吗！那么什么协议可以达到这样的功能呢？那就是NTP，到底NTP 这个daemon 是如何让Server 与Client 同步他们的时间呢？\n>\n>1. 首先，主机当然需要启动这个daemon ，之后，\n>2. Client 会向NTP Server 发送出调校时间的message ，\n>3. 然后NTP Server 会送出目前的标准时间给Client ，\n>4. Client 接收了来自Server 的时间后，会据以调整自己的时间，就达成了网络时间校准了！\n>\n>在上面的步骤中你有没有想到一件事啊，那就是如果Client到Server的消息传送时间过长了怎么办？ 举例来说，我在台湾以ADSL 的PC 主机，连线到美国的NTP Server 主机进行时间同步化要求，而美国NTP Server 收到我的要求之后，就发送当时的正确时间给我，不过， 由美国将资料传送回我的PC 时，时间可能已经延迟了10 秒钟去了！这样一来，我的PC 校正的时间是10 秒钟前的标准时间喔！此外，如果美国那么NTP 主机有太多的人喜欢上去进行网路校时了，所以 loading (负荷) 太重啦！导致讯息的回传又延迟的更为严重！那怎么办？\n>\n>为了这些延迟的问题，有一些program 已经开发了自动计算时间传送过程的误差，以更准确的校准自己的时间！当然啦，在 daemon 的部分，也同时以server/client 及master/slave 的架构来提供使用者进行网路校时的动作！所谓的 master/slave 就有点类似DNS 的系统咯！举例来说，台湾的标准时间主机去国际标准时间的主机校时， 然后各大专院校再到台湾的标准时间校时，然后我们再到各大专院校的标准时间校时！这样一来，那几部国际标准时间主机 (Time server) 的loading 就不至于太大，而我们也可以很快速的达到正确的网路校时的目的呢！\n\n​\t\tNTP服务器阶层的概念\n\n>​\t如前所述，由于NTP 时间服务器采用类似阶层架构(stratum) 来处理时间的同步化， 所以他使用的是类似一般server/client 的主从架构。网络社会上面有提供一些主要与次要的时间服务器， 这些均属于第一阶及第二阶的时间服务器(stratum-1, stratum-2) ，如下所示：\n>\n>- 主要时间服务器： http://support.ntp.org/bin/view/Servers/StratumOneTimeServers\n>- 次要时间服务器： http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers\n>\n>由于这些时间服务器大多在国外，所以我们是否要使用这些服务器来同步化自己的时间呢？其实如果台湾地区已经有标准时间服务器的话，用那部即可，不需要连线到国外啦！浪费带宽与时间啊！而如前面提到的，台湾地区已经有标准的时间服务器了，所以当然我们可以直接选择台湾地区的NTP 主机即可。\n>\n>如果你评估一下，确定有架设NTP 的需求时，我们可以直接选择台湾地区的上层NTP 来同步化时间即可。举例来说tock.stdtime.gov.tw 这个国家单位的主机应该是比较适合的。一般来说，我们在进行NTP 主机的设定时，都会先选择多部上层的Time Server 来做为我们这一部NTP Server 的校正之用，选择多部的原因是因为 然后我们的NTP Server 才提供给自己的Client 端更新时间 如此一来，国家单位的tock.stdtime.gov.tw 负载才不会太大，而我们的Client 也可以很快速的达到校时的动作！\n>\n>**Tips: 举例来说，如果我们的NTP 是向台湾的tock.stdtime.gov.tw 这部stratum-2 的主机要求时间同步化，那我们的主机即为stratum-3 ，如果还有其他的NTP 主机向我们要求时间同步， 那么该部主机则会是stratum-4 啦！就这样啊～ 那最多可以有几个阶层？最多可达15 个阶层喔！**   \n\n​\t\tntp核心配置与命令文件\n\n>- **/etc/ntp.conf**： NTP 服务器的主要配置文件，也是唯一的一个。\n>\n> 命令主要有如下几个：\n>\n>- **/bin/date**： 用于 Linux 时间 (软件时钟) 的修改与显示的指令。\n>\n>- **/sbin/hwclock**： 用于 BIOS 时钟 (硬件时钟) 的修改与显示的指令。 这是一个 root 才能执行的指令，因为 Linux 系統上面 BIOS 时间与 Linux 系統时间是分开的，所以使用 date 这个指令调整了时间之后，还需要使用 hwclock 才能將修改过后的时间写入 BIOS 当中！\n>\n>- **/usr/sbin/ntpd**： 主要提供 NTP 服务的命令！配置文件为 /etc/ntp.conf\n>\n>- **/usr/sbin/ntpdate**： 用于client端的时间校正，如果你沒有要启用 NTP服务 而仅想要使用 NTP Client 功能的话，那么只用这个指令就可以了！\n\n## 2 . 设置时区\n\n   计算机中的OS时区应与计算设备所处地理时区一致，否则将出现时差。\n\n   CentOS和Ubuntu的时区文件是/etc/localtime，但是在CentOS7以后localtime以及变成了一个链接文件,如果采用直接cp的方法修改系统时区，那么就会把它所链接的文件修改掉，例如把美国的时区文件内容修改成了上海的时区内容，有可能会导致有些编程语言或程序在读取系统时区的时候发生错误，因此正确的修改方法是：\n\n### **CentOS6、Ubuntu16**\n\n```\n# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n### **CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7**\n\n最好的方法是使用timedatectl命令\n\n```\n[root@test-127 ~]# timedatectl list-timezones |grep Shanghai    #查找中国时区的完整名称\nAsia/Shanghai\n[root@test-127 ~]# timedatectl set-timezone Asia/Shanghai    #其他时区以此类推\n```\n\n或者直接手动创建软链接\n\n```\n[root@test-127 ~]# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n\n\n## 3. NTP服务器的安装与设定\n\n\n\n​\t**在这里，我们采用二级同步机制，master 作为主节点，负责与外部系统同步时间，并把自己的时间同步给集群内其他client节点，所有client节点均向master 同步时间**。\n\n![](test1.png)\n\n**以下操作假设我们有4台Linux虚拟机需要做时间同步，192.168.100.100为外部的时钟源。**\n\n>192.168.60.101 master1 \n>\n>192.168.60.102 client1 \n>\n>192.168.60.103 client2\n>\n>192.168.60.104 client3\n>\n>192.168.1000.100 外部时钟源\n\n### 2.1  安装NTP\n\n#### 2.1.1 卸载旧ntp服务\n\n确认是否已安装ntp、ntpupdate\n\n```shell\n[root@master01 ~]# rpm –qa | grep ntp\n```\n\n若只有ntpdate而未见ntp，则需删除原有ntpdate。如：\n\nntpdate-4.2.6p5-22.el7_0.x86_64\n\nfontpackages-filesystem-1.44-8.el7.noarch\n\npython-ntplib-0.3.2-1.el7.noarch\n\n```shell\n[root@master01 ~]# yum –y remove ntpdate-4.2.6p5-22.el7.x86_64\n```\n\n#### 2.1.2\t安装ntp\n\n```shell\n[root@master01 ~]# yum –y install ntp\n```\n\n### 2.2\t配置ntp.conf文件\n\n#### 2.2.1 ntp.conf文件解析\n\n```shell\n# For more information about this file, see the man pages\n# ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).\n# 时间偏移量 格式：driftfile [可以被ntpd 写入的目录与档案] 详细概念在附录进行介绍，下同\ndriftfile /var/lib/ntp/drift\n\n# Permit time synchronization with our time source, but do not\n# permit the source to query or modify the service on this system.\nrestrict default nomodify notrap nopeer noquery\n\n# Permit all access over the loopback interface.  This could\n# be tightened as well, but to do so would effect some of\n# the administrative functions.\nrestrict 192.168.60.101 nomodify notrap nopeer noquery\nrestrict 127.0.0.1\nrestrict ::1\n\n# Hosts on local network are less restricted.\n# 权限管理 格式：restrict [IP] mask [netmask_IP] [parameter] \n# 这里192.168.60.0为集群所在网段的网关（Gateway），意思代表的192.168.60.0~255网段的机器都允许与本机的ntp时间同步。255.255.255.0为子网掩码（Genmask）。\nreastrict 192.168.60.0 mask 255.255.255.0 nomodify notrap\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n\n# 设定上层NTP服务器，请先将其余的server如 [0|1|2].centos.pool.ntp.org 注释掉\n# 格式：server [IP or hostname] [prefer] prefer表示优先使用，iburst表示请求频率加强：\nserver 220.130.158.71 prefer  <==以这部主机为最优先的server\nserver 59.124.196.83\nserver 59.124.196.84\n# 最大阶层数，局域网项目一般设置为10\nfudge 192.168.60.128 stratum 10\n\n#broadcast 192.168.1.255 autokey        # broadcast server\n#broadcastclient                        # broadcast client\n#broadcast 224.0.1.1 autokey            # multicast server\n#multicastclient 224.0.1.1              # multicast client\n#manycastserver 239.255.254.254         # manycast server\n#manycastclient 239.255.254.254 autokey # manycast client\n\n# Enable public key cryptography.\n#crypto\n\nincludefile /etc/ntp/crypto/pw\n\n# Key file containing the keys and key identifiers used when operating\n# with symmetric key cryptography.\nkeys /etc/ntp/keys\n\n# Specify the key identifiers which are trusted.\n#trustedkey 4 8 42\n\n# Specify the key identifier to use with the ntpdc utility.\n#requestkey 8\n\n# Specify the key identifier to use with the ntpq utility.\n#controlkey 8\n\n# Enable writing of statistics records.\n#statistics clockstats cryptostats loopstats peerstats\n\n# Disable the monitoring facility to prevent amplification attacks using ntpdc\n# monlist command when default restrict does not include the noquery flag. See\n# CVE-2013-5211 for more details.\n# Note: Monitoring will not be disabled with the limited restriction flag.\ndisable monitor\n```\n\n#### 2.2.2\t修改所有节点的/etc/ntp.conf\n\n```shell\nrestrict 192.168.60.101 nomodify notrap nopeer noquery          //当前节点IP地址\n...\nrestrict 192.168.60.0 mask 255.255.255.0 nomodify notrap  //集群所在网段的网关（Gateway），子网掩码（Genmask）\n```\n\n#### 2.2.3\t选择一个主节点，修改其/etc/ntp.conf\n\n```shell\n# 外部时钟源\nserver 192.168.100.100 iburst prefer\n#兜底时间服务器，当外部时钟源不可用时，就是以本机时间作为集群机器的统一时间。\nserver 127.0.0.1 iburst\nfudge 127.0.0.1 stratum 10\n```\n\n#### 2.2.4\t选择从节点，修改/etc/ntp.conf\n\n```shell\n#在server部分添加如下语句，注释其余server，将server指向主节点。\nserver 192.168.60.101\nfudge 192.168.60.101 stratum 10\n# 192.168.60.102 同上\n```\n\n### 2.3 同步硬件时钟\n\nntp服务，默认只会同步系统时间，如果系统软硬件时间不一致，那么系统重启过后时间又会恢复成硬件时间。\n\n如果想要让ntp同时同步硬件时间，可以设置/etc/sysconfig/ntpd文件，\n\n在/etc/sysconfig/ntpd文件中，添加`SYNC_HWCLOCK=yes`，就可以让硬件时间与系统时间一起同步。\n\n允许BIOS与系统时间同步，也可以通过hwclock -w 命令。\n\n### 2.4  启动ntp服务、查看状态\n\n#### 2.3.1\t启动ntp服务\n\n```shell\n[root@master01 ~]# service ntpd start\n```\n\n#### 2.3.2\t添加开机自启动\n\n```shell\n[root@master01 ~]# chkconfig ntpd on\n```\n\n#### 2.3.3\t查看ntp服务器与上层ntp的状态\n\n```shell\n[root@master01 ~]# ntpstat\n```\n\n![](915691-20171013002936340-1631273268.png)\n\n查看ntp状态时，可能会出现如下所示情况\n\n① unsynchronised time server re-starting polling server every 8 s\n\n![](915691-20171013131031496-1095710777.png)\n\n② unsynchronised polling server every 8 s\n\n![](915691-20171013131052840-421840461.png)\n\n这种情况属于正常，ntp服务器配置完毕后，需要等待5-10分钟才能与/etc/ntp.conf中配置的标准时间进行同步。\n\n等一段时间之后，再次使用ntpstat命令查看状态，就会变成如下正常结果：\n\n![](915691-20171013131330184-1857767541.png)\n\n \n\n查**看ntp服务器有无和上层ntp连通**\n\n```shell\n[root@master01 ~]# ntpq -p\n```\n\n![](915691-20171013010729637-1391262052.png)\n\nremote：本机和上层ntp的ip或主机名\n\n- ​\t“*”表示已同步\t\n- ​\t“+”表示优先同步\n\nrefid：参考上一层ntp主机地址\n\nst：stratum阶层\n\nwhen：多少秒前曾经同步过时间\n\npoll：下次更新在多少秒后\n\nreach：已经向上层ntp服务器要求更新的次数\n\ndelay：网络延迟\n\noffset：时间补偿\n\njitter：系统时间与bios时间差  \n\n## 4. 附录\n\n###  **===/etc/ntp.conf  其他配置内容详解===**\n\n```\n# 1. 先处理权限方面的问题，包括放行上层服务器以及开放局域网用户来源：\nrestrict default kod nomodify notrap nopeer noquery     <==拒绝 IPv4 的用户\nrestrict -6 default kod nomodify notrap nopeer noquery  <==拒绝 IPv6 的用户\nrestrict 220.130.158.71   <==放行 tock.stdtime.gov.tw 进入本 NTP 的服务器\nrestrict 59.124.196.83    <==放行 tick.stdtime.gov.tw 进入本 NTP 的服务器\nrestrict 59.124.196.84    <==放行 time.stdtime.gov.tw 进入本 NTP 的服务器\nrestrict 127.0.0.1        <==底下两个是默认值，放行本机来源\nrestrict -6 ::1\nrestrict 192.168.100.0 mask 255.255.255.0 nomodify <==放行局域网用户来源，或者列出单独IP\n\n# 2.预设时间差异分析档案与暂不用到的 keys 等，不需要更动它：\ndriftfile /var/lib/ntp/drift\nkeys      /etc/ntp/keys\n```\n\n### ===restrict选项格式===\n\n**restrict [ 客户端IP ]  mask  [ IP掩码 ]  [参数**]\n\n“客户端IP” 和 “IP掩码” 指定了对网络中哪些范围的计算机进行控制，如果使用default关键字，则表示对所有的计算机进行控制，参数指定了具体的限制内容，常见的参数如下：\n\n◆ ignore：拒绝连接到NTP服务器\n\n◆ nomodiy： 客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。\n\n◆ noquery： 不提供客户端的时间查询\n\n◆ notrap： 不提供trap远程登录功能，trap服务是一种远程时间日志服务。\n\n◆ notrust： 客户端除非通过认证，否则该客户端来源将被视为不信任子网 。\n\n◆ nopeer： 提供时间服务，但不作为对等体。\n\n◆ kod： 向不安全的访问者发送Kiss-Of-Death报文。\n\n \n\n### ===server选项格式===\n\n**server host  [ key n ] [ version n ] [ prefer ] [ mode n ] [ minpoll n ] [ maxpoll n ] [ iburst ]**\n\n其中host是上层NTP服务器的IP地址或域名，随后所跟的参数解释如下所示：\n\n◆ key： 表示所有发往服务器的报文包含有秘钥加密的认证信息，n是32位的整数，表示秘钥号。\n\n◆ version： 表示发往上层服务器的报文使用的版本号，n默认是3，可以是1或者2。\n\n◆ prefer： 如果有多个server选项，具有该参数的服务器有限使用。\n\n◆ mode： 指定数据报文mode字段的值。\n\n◆ minpoll： 指定与查询该服务器的最小时间间隔为2的n次方秒，n默认为6，范围为4-14。\n\n◆ maxpoll： 指定与查询该服务器的最大时间间隔为2的n次方秒，n默认为10，范围为4-14。\n\n◆ iburst： 当初始同步请求时，采用突发方式接连发送8个报文，时间间隔为2秒。\n\n \n\n### ===查看网关方法===\n\n【命令1】route -n \n\n【命令2】ip route show \n\n【命令3】netstat -r\n\n \n\n### ===层次（stratum）===\n\nstratum根据上层server的层次而设定（+1）。\n\n对于提供network time service provider的主机来说，stratum的设定要尽可能准确。\n\n而作为局域网的time service provider，通常将stratum设置为10\n\n![](915691-20171013005125324-1966406641.png)\n\n \n\n0层的服务器采用的是原子钟、GPS钟等物理设备，stratum 1与stratum 0 是直接相连的，\n\n往后的stratum与上一层stratum通过网络相连，同一层的server也可以交互。\n\nntpd对下层client来说是service server，对于上层server来说它是client。\n\nntpd根据配置文件的参数决定是要为其他服务器提供时钟服务或者是从其他服务器同步时钟。所有的配置都在/etc/ntp.conf文件中。\n\n![](20160917151428497.PNG)\n\n \n\n### ===注意防火墙屏蔽ntp端口===\n\nntp服务器默认端口是123，如果防火墙是开启状态，在一些操作可能会出现错误，所以要记住关闭防火墙。\n\n### ===ntpd、ntpdate的区别===\n\n使用之前得弄清楚一个问题，ntpd与ntpdate在更新时间时有什么区别。\n\nntpd不仅仅是时间同步服务器，它还可以做客户端与标准时间服务器进行同步时间，而且是平滑同步，\n\n并非ntpdate立即同步，在生产环境中慎用ntpdate，也正如此两者不可同时运行。\n\n时钟的跃变，对于某些程序会导致很严重的问题。\n\n \n\n许多应用程序依赖连续的时钟——毕竟，这是一项常见的假定，即，取得的时间是线性的，\n\n一些操作，例如数据库事务，通常会地依赖这样的事实：时间不会往回跳跃。\n\n不幸的是，ntpdate调整时间的方式就是我们所说的”跃变“：在获得一个时间之后，ntpdate使用settimeofday(2)设置系统时间，\n\n这有几个非常明显的问题：\n\n【一】这样做不安全。\n\nntpdate的设置依赖于ntp服务器的安全性，攻击者可以利用一些软件设计上的缺陷，拿下ntp服务器并令与其同步的服务器执行某些消耗性的任务。\n\n由于ntpdate采用的方式是跳变，跟随它的服务器无法知道是否发生了异常（时间不一样的时候，唯一的办法是以服务器为准）。\n\n【二】这样做不精确。\n\n一旦ntp服务器宕机，跟随它的服务器也就会无法同步时间。\n\n与此不同，ntpd不仅能够校准计算机的时间，而且能够校准计算机的时钟。\n\n【三】这样做不够优雅。\n\n由于是跳变，而不是使时间变快或变慢，依赖时序的程序会出错\n\n（例如，如果ntpdate发现你的时间快了，则可能会经历两个相同的时刻，对某些应用而言，这是致命的）。\n\n因而，唯一一个可以令时间发生跳变的点，是计算机刚刚启动，但还没有启动很多服务的那个时候。\n\n其余的时候，理想的做法是使用ntpd来校准时钟，而不是调整计算机时钟上的时间。\n\nNTPD在和时间服务器的同步过程中，会把BIOS计时器的振荡频率偏差——或者说Local Clock的自然漂移(drift)——记录下来。\n\n这样即使网络有问题，本机仍然能维持一个相当精确的走时。\n\n### ==其他问题==\n\n配置了ntp服务之后，发现时间仍然无法同步\n\n通过命令timedatectl查看，之后，发现ntp服务没有生效（NTP enabled: no），如下图所示\n\n![](915691-20200929232515753-1829091402.png)\n\n执行命令timedatectl set-ntp yes之后，问题得以解决。\n\n>参考资料\n>\n>https://www.cnblogs.com/quchunhui/p/7658853.html\n>\n>鸟哥的Linux私房菜 http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf\n>\n>https://www.cnblogs.com/yjt1993/p/11177554.html\n\n","source":"_posts/2021-09-28-ntp.md","raw":"---\ntitle: Linux NTP时钟同步\ncomments: true\nindex_img: /img/watch.PNG\nbanner_img: /img/background/vilige.jpg\ndate: 2021-09-28 08:25:14\nupdated: 2021-09-28 08:25:14\ntags: [NTP,Linux]\ncategories: Linux\n---\n\n## 1. 什么是NTP,why we need it?\n\n​\t\t如今我们的软件系统通常部署在计算设备集群中，而非单一的物理设备上。统一、同步的标准时间用于记录各种事件发生时序，如日志的打印时间戳、微服务调用链监控、文件创建和访问时间、E-MAIL时间戳、数据库处理时间等。系统内不同计算设备之间控制、计算、处理、应用等数据或操作都具有时序性，若计算机时间不同步，这些应用或操作或将无法正常进行。\n\n​\t\t大数据系统是对时间敏感的计算处理系统，时间同步是大数据能够得到正确处理的基础保障，是大数据得以发挥作用的技术支撑。大数据时代，整个处理计算系统内的大数据通信都是通过网络进行。时间同步也是如此，利用大数据的互联网络传送标准时间信息，实现大数据系统内时间同步。\n\n​\t\t网络时间同步协议(NTP)是时间同步的技术基础。\n\n​\t\t首先看下官网http://www.ntp.org/对它的定义。\n\n>**NTP is a protocol designed to synchronize the clocks of computers over a network.**\n>\n>**NTP 是一种通过网络同步计算机时钟的协议。**\n\n​\t\t网站的描述十分简洁。在实际的应用中，NTP分为服务端和客户端，客户端向服务端发起请求索要时间，来校准自己的时间。而一个节点，既可以作为服务端，也可以作为客户端。\n\n​\t\t然后我们来看下[《鸟哥的Linux》](http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf)中对于NTP的介绍。\n\n>​\t\t Linux 操作系统的计时方式主要是由1970/01/01 开始计算总秒数，因此，如果你还记得date 这个指令的话， 会发现它有个+%s 的参数，可以取得总秒数，这个就是软件时钟。但，如同前面说的，电脑硬件主要是以BIOS芯片内部的时间为主要的时间依据(硬件时钟)，而偏偏这个时间可能因为BIOS 内部晶片本身的问题，而导致BIOS 时间与标准时间(UTC) 有一点点的差异存在！所以为了避免主机长时间运行下所导致的时间误差，进行时间同步 (synchronize) 的工作就显的很重要了！\n>\n>- 软件时钟：由Linux 系统根据1970/01/01 开始计算的总秒数。\n>- 硬件时钟：主机硬件芯片里面的时钟，例如BIOS 记录的时间。\n>\n>那么怎么让时间同步化呢？想一想，如果我们选择几部主要主机(Primary server) 调校时间，让这些 Primary Servers 的时间同步之后，再开放网络服务来让Client 端连线，并且提供给Client 端调整自己的时间，不就可以达到全部的电脑时间同步化的目的了吗！那么什么协议可以达到这样的功能呢？那就是NTP，到底NTP 这个daemon 是如何让Server 与Client 同步他们的时间呢？\n>\n>1. 首先，主机当然需要启动这个daemon ，之后，\n>2. Client 会向NTP Server 发送出调校时间的message ，\n>3. 然后NTP Server 会送出目前的标准时间给Client ，\n>4. Client 接收了来自Server 的时间后，会据以调整自己的时间，就达成了网络时间校准了！\n>\n>在上面的步骤中你有没有想到一件事啊，那就是如果Client到Server的消息传送时间过长了怎么办？ 举例来说，我在台湾以ADSL 的PC 主机，连线到美国的NTP Server 主机进行时间同步化要求，而美国NTP Server 收到我的要求之后，就发送当时的正确时间给我，不过， 由美国将资料传送回我的PC 时，时间可能已经延迟了10 秒钟去了！这样一来，我的PC 校正的时间是10 秒钟前的标准时间喔！此外，如果美国那么NTP 主机有太多的人喜欢上去进行网路校时了，所以 loading (负荷) 太重啦！导致讯息的回传又延迟的更为严重！那怎么办？\n>\n>为了这些延迟的问题，有一些program 已经开发了自动计算时间传送过程的误差，以更准确的校准自己的时间！当然啦，在 daemon 的部分，也同时以server/client 及master/slave 的架构来提供使用者进行网路校时的动作！所谓的 master/slave 就有点类似DNS 的系统咯！举例来说，台湾的标准时间主机去国际标准时间的主机校时， 然后各大专院校再到台湾的标准时间校时，然后我们再到各大专院校的标准时间校时！这样一来，那几部国际标准时间主机 (Time server) 的loading 就不至于太大，而我们也可以很快速的达到正确的网路校时的目的呢！\n\n​\t\tNTP服务器阶层的概念\n\n>​\t如前所述，由于NTP 时间服务器采用类似阶层架构(stratum) 来处理时间的同步化， 所以他使用的是类似一般server/client 的主从架构。网络社会上面有提供一些主要与次要的时间服务器， 这些均属于第一阶及第二阶的时间服务器(stratum-1, stratum-2) ，如下所示：\n>\n>- 主要时间服务器： http://support.ntp.org/bin/view/Servers/StratumOneTimeServers\n>- 次要时间服务器： http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers\n>\n>由于这些时间服务器大多在国外，所以我们是否要使用这些服务器来同步化自己的时间呢？其实如果台湾地区已经有标准时间服务器的话，用那部即可，不需要连线到国外啦！浪费带宽与时间啊！而如前面提到的，台湾地区已经有标准的时间服务器了，所以当然我们可以直接选择台湾地区的NTP 主机即可。\n>\n>如果你评估一下，确定有架设NTP 的需求时，我们可以直接选择台湾地区的上层NTP 来同步化时间即可。举例来说tock.stdtime.gov.tw 这个国家单位的主机应该是比较适合的。一般来说，我们在进行NTP 主机的设定时，都会先选择多部上层的Time Server 来做为我们这一部NTP Server 的校正之用，选择多部的原因是因为 然后我们的NTP Server 才提供给自己的Client 端更新时间 如此一来，国家单位的tock.stdtime.gov.tw 负载才不会太大，而我们的Client 也可以很快速的达到校时的动作！\n>\n>**Tips: 举例来说，如果我们的NTP 是向台湾的tock.stdtime.gov.tw 这部stratum-2 的主机要求时间同步化，那我们的主机即为stratum-3 ，如果还有其他的NTP 主机向我们要求时间同步， 那么该部主机则会是stratum-4 啦！就这样啊～ 那最多可以有几个阶层？最多可达15 个阶层喔！**   \n\n​\t\tntp核心配置与命令文件\n\n>- **/etc/ntp.conf**： NTP 服务器的主要配置文件，也是唯一的一个。\n>\n> 命令主要有如下几个：\n>\n>- **/bin/date**： 用于 Linux 时间 (软件时钟) 的修改与显示的指令。\n>\n>- **/sbin/hwclock**： 用于 BIOS 时钟 (硬件时钟) 的修改与显示的指令。 这是一个 root 才能执行的指令，因为 Linux 系統上面 BIOS 时间与 Linux 系統时间是分开的，所以使用 date 这个指令调整了时间之后，还需要使用 hwclock 才能將修改过后的时间写入 BIOS 当中！\n>\n>- **/usr/sbin/ntpd**： 主要提供 NTP 服务的命令！配置文件为 /etc/ntp.conf\n>\n>- **/usr/sbin/ntpdate**： 用于client端的时间校正，如果你沒有要启用 NTP服务 而仅想要使用 NTP Client 功能的话，那么只用这个指令就可以了！\n\n## 2 . 设置时区\n\n   计算机中的OS时区应与计算设备所处地理时区一致，否则将出现时差。\n\n   CentOS和Ubuntu的时区文件是/etc/localtime，但是在CentOS7以后localtime以及变成了一个链接文件,如果采用直接cp的方法修改系统时区，那么就会把它所链接的文件修改掉，例如把美国的时区文件内容修改成了上海的时区内容，有可能会导致有些编程语言或程序在读取系统时区的时候发生错误，因此正确的修改方法是：\n\n### **CentOS6、Ubuntu16**\n\n```\n# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n### **CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7**\n\n最好的方法是使用timedatectl命令\n\n```\n[root@test-127 ~]# timedatectl list-timezones |grep Shanghai    #查找中国时区的完整名称\nAsia/Shanghai\n[root@test-127 ~]# timedatectl set-timezone Asia/Shanghai    #其他时区以此类推\n```\n\n或者直接手动创建软链接\n\n```\n[root@test-127 ~]# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n\n\n## 3. NTP服务器的安装与设定\n\n\n\n​\t**在这里，我们采用二级同步机制，master 作为主节点，负责与外部系统同步时间，并把自己的时间同步给集群内其他client节点，所有client节点均向master 同步时间**。\n\n![](test1.png)\n\n**以下操作假设我们有4台Linux虚拟机需要做时间同步，192.168.100.100为外部的时钟源。**\n\n>192.168.60.101 master1 \n>\n>192.168.60.102 client1 \n>\n>192.168.60.103 client2\n>\n>192.168.60.104 client3\n>\n>192.168.1000.100 外部时钟源\n\n### 2.1  安装NTP\n\n#### 2.1.1 卸载旧ntp服务\n\n确认是否已安装ntp、ntpupdate\n\n```shell\n[root@master01 ~]# rpm –qa | grep ntp\n```\n\n若只有ntpdate而未见ntp，则需删除原有ntpdate。如：\n\nntpdate-4.2.6p5-22.el7_0.x86_64\n\nfontpackages-filesystem-1.44-8.el7.noarch\n\npython-ntplib-0.3.2-1.el7.noarch\n\n```shell\n[root@master01 ~]# yum –y remove ntpdate-4.2.6p5-22.el7.x86_64\n```\n\n#### 2.1.2\t安装ntp\n\n```shell\n[root@master01 ~]# yum –y install ntp\n```\n\n### 2.2\t配置ntp.conf文件\n\n#### 2.2.1 ntp.conf文件解析\n\n```shell\n# For more information about this file, see the man pages\n# ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).\n# 时间偏移量 格式：driftfile [可以被ntpd 写入的目录与档案] 详细概念在附录进行介绍，下同\ndriftfile /var/lib/ntp/drift\n\n# Permit time synchronization with our time source, but do not\n# permit the source to query or modify the service on this system.\nrestrict default nomodify notrap nopeer noquery\n\n# Permit all access over the loopback interface.  This could\n# be tightened as well, but to do so would effect some of\n# the administrative functions.\nrestrict 192.168.60.101 nomodify notrap nopeer noquery\nrestrict 127.0.0.1\nrestrict ::1\n\n# Hosts on local network are less restricted.\n# 权限管理 格式：restrict [IP] mask [netmask_IP] [parameter] \n# 这里192.168.60.0为集群所在网段的网关（Gateway），意思代表的192.168.60.0~255网段的机器都允许与本机的ntp时间同步。255.255.255.0为子网掩码（Genmask）。\nreastrict 192.168.60.0 mask 255.255.255.0 nomodify notrap\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n\n# 设定上层NTP服务器，请先将其余的server如 [0|1|2].centos.pool.ntp.org 注释掉\n# 格式：server [IP or hostname] [prefer] prefer表示优先使用，iburst表示请求频率加强：\nserver 220.130.158.71 prefer  <==以这部主机为最优先的server\nserver 59.124.196.83\nserver 59.124.196.84\n# 最大阶层数，局域网项目一般设置为10\nfudge 192.168.60.128 stratum 10\n\n#broadcast 192.168.1.255 autokey        # broadcast server\n#broadcastclient                        # broadcast client\n#broadcast 224.0.1.1 autokey            # multicast server\n#multicastclient 224.0.1.1              # multicast client\n#manycastserver 239.255.254.254         # manycast server\n#manycastclient 239.255.254.254 autokey # manycast client\n\n# Enable public key cryptography.\n#crypto\n\nincludefile /etc/ntp/crypto/pw\n\n# Key file containing the keys and key identifiers used when operating\n# with symmetric key cryptography.\nkeys /etc/ntp/keys\n\n# Specify the key identifiers which are trusted.\n#trustedkey 4 8 42\n\n# Specify the key identifier to use with the ntpdc utility.\n#requestkey 8\n\n# Specify the key identifier to use with the ntpq utility.\n#controlkey 8\n\n# Enable writing of statistics records.\n#statistics clockstats cryptostats loopstats peerstats\n\n# Disable the monitoring facility to prevent amplification attacks using ntpdc\n# monlist command when default restrict does not include the noquery flag. See\n# CVE-2013-5211 for more details.\n# Note: Monitoring will not be disabled with the limited restriction flag.\ndisable monitor\n```\n\n#### 2.2.2\t修改所有节点的/etc/ntp.conf\n\n```shell\nrestrict 192.168.60.101 nomodify notrap nopeer noquery          //当前节点IP地址\n...\nrestrict 192.168.60.0 mask 255.255.255.0 nomodify notrap  //集群所在网段的网关（Gateway），子网掩码（Genmask）\n```\n\n#### 2.2.3\t选择一个主节点，修改其/etc/ntp.conf\n\n```shell\n# 外部时钟源\nserver 192.168.100.100 iburst prefer\n#兜底时间服务器，当外部时钟源不可用时，就是以本机时间作为集群机器的统一时间。\nserver 127.0.0.1 iburst\nfudge 127.0.0.1 stratum 10\n```\n\n#### 2.2.4\t选择从节点，修改/etc/ntp.conf\n\n```shell\n#在server部分添加如下语句，注释其余server，将server指向主节点。\nserver 192.168.60.101\nfudge 192.168.60.101 stratum 10\n# 192.168.60.102 同上\n```\n\n### 2.3 同步硬件时钟\n\nntp服务，默认只会同步系统时间，如果系统软硬件时间不一致，那么系统重启过后时间又会恢复成硬件时间。\n\n如果想要让ntp同时同步硬件时间，可以设置/etc/sysconfig/ntpd文件，\n\n在/etc/sysconfig/ntpd文件中，添加`SYNC_HWCLOCK=yes`，就可以让硬件时间与系统时间一起同步。\n\n允许BIOS与系统时间同步，也可以通过hwclock -w 命令。\n\n### 2.4  启动ntp服务、查看状态\n\n#### 2.3.1\t启动ntp服务\n\n```shell\n[root@master01 ~]# service ntpd start\n```\n\n#### 2.3.2\t添加开机自启动\n\n```shell\n[root@master01 ~]# chkconfig ntpd on\n```\n\n#### 2.3.3\t查看ntp服务器与上层ntp的状态\n\n```shell\n[root@master01 ~]# ntpstat\n```\n\n![](915691-20171013002936340-1631273268.png)\n\n查看ntp状态时，可能会出现如下所示情况\n\n① unsynchronised time server re-starting polling server every 8 s\n\n![](915691-20171013131031496-1095710777.png)\n\n② unsynchronised polling server every 8 s\n\n![](915691-20171013131052840-421840461.png)\n\n这种情况属于正常，ntp服务器配置完毕后，需要等待5-10分钟才能与/etc/ntp.conf中配置的标准时间进行同步。\n\n等一段时间之后，再次使用ntpstat命令查看状态，就会变成如下正常结果：\n\n![](915691-20171013131330184-1857767541.png)\n\n \n\n查**看ntp服务器有无和上层ntp连通**\n\n```shell\n[root@master01 ~]# ntpq -p\n```\n\n![](915691-20171013010729637-1391262052.png)\n\nremote：本机和上层ntp的ip或主机名\n\n- ​\t“*”表示已同步\t\n- ​\t“+”表示优先同步\n\nrefid：参考上一层ntp主机地址\n\nst：stratum阶层\n\nwhen：多少秒前曾经同步过时间\n\npoll：下次更新在多少秒后\n\nreach：已经向上层ntp服务器要求更新的次数\n\ndelay：网络延迟\n\noffset：时间补偿\n\njitter：系统时间与bios时间差  \n\n## 4. 附录\n\n###  **===/etc/ntp.conf  其他配置内容详解===**\n\n```\n# 1. 先处理权限方面的问题，包括放行上层服务器以及开放局域网用户来源：\nrestrict default kod nomodify notrap nopeer noquery     <==拒绝 IPv4 的用户\nrestrict -6 default kod nomodify notrap nopeer noquery  <==拒绝 IPv6 的用户\nrestrict 220.130.158.71   <==放行 tock.stdtime.gov.tw 进入本 NTP 的服务器\nrestrict 59.124.196.83    <==放行 tick.stdtime.gov.tw 进入本 NTP 的服务器\nrestrict 59.124.196.84    <==放行 time.stdtime.gov.tw 进入本 NTP 的服务器\nrestrict 127.0.0.1        <==底下两个是默认值，放行本机来源\nrestrict -6 ::1\nrestrict 192.168.100.0 mask 255.255.255.0 nomodify <==放行局域网用户来源，或者列出单独IP\n\n# 2.预设时间差异分析档案与暂不用到的 keys 等，不需要更动它：\ndriftfile /var/lib/ntp/drift\nkeys      /etc/ntp/keys\n```\n\n### ===restrict选项格式===\n\n**restrict [ 客户端IP ]  mask  [ IP掩码 ]  [参数**]\n\n“客户端IP” 和 “IP掩码” 指定了对网络中哪些范围的计算机进行控制，如果使用default关键字，则表示对所有的计算机进行控制，参数指定了具体的限制内容，常见的参数如下：\n\n◆ ignore：拒绝连接到NTP服务器\n\n◆ nomodiy： 客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。\n\n◆ noquery： 不提供客户端的时间查询\n\n◆ notrap： 不提供trap远程登录功能，trap服务是一种远程时间日志服务。\n\n◆ notrust： 客户端除非通过认证，否则该客户端来源将被视为不信任子网 。\n\n◆ nopeer： 提供时间服务，但不作为对等体。\n\n◆ kod： 向不安全的访问者发送Kiss-Of-Death报文。\n\n \n\n### ===server选项格式===\n\n**server host  [ key n ] [ version n ] [ prefer ] [ mode n ] [ minpoll n ] [ maxpoll n ] [ iburst ]**\n\n其中host是上层NTP服务器的IP地址或域名，随后所跟的参数解释如下所示：\n\n◆ key： 表示所有发往服务器的报文包含有秘钥加密的认证信息，n是32位的整数，表示秘钥号。\n\n◆ version： 表示发往上层服务器的报文使用的版本号，n默认是3，可以是1或者2。\n\n◆ prefer： 如果有多个server选项，具有该参数的服务器有限使用。\n\n◆ mode： 指定数据报文mode字段的值。\n\n◆ minpoll： 指定与查询该服务器的最小时间间隔为2的n次方秒，n默认为6，范围为4-14。\n\n◆ maxpoll： 指定与查询该服务器的最大时间间隔为2的n次方秒，n默认为10，范围为4-14。\n\n◆ iburst： 当初始同步请求时，采用突发方式接连发送8个报文，时间间隔为2秒。\n\n \n\n### ===查看网关方法===\n\n【命令1】route -n \n\n【命令2】ip route show \n\n【命令3】netstat -r\n\n \n\n### ===层次（stratum）===\n\nstratum根据上层server的层次而设定（+1）。\n\n对于提供network time service provider的主机来说，stratum的设定要尽可能准确。\n\n而作为局域网的time service provider，通常将stratum设置为10\n\n![](915691-20171013005125324-1966406641.png)\n\n \n\n0层的服务器采用的是原子钟、GPS钟等物理设备，stratum 1与stratum 0 是直接相连的，\n\n往后的stratum与上一层stratum通过网络相连，同一层的server也可以交互。\n\nntpd对下层client来说是service server，对于上层server来说它是client。\n\nntpd根据配置文件的参数决定是要为其他服务器提供时钟服务或者是从其他服务器同步时钟。所有的配置都在/etc/ntp.conf文件中。\n\n![](20160917151428497.PNG)\n\n \n\n### ===注意防火墙屏蔽ntp端口===\n\nntp服务器默认端口是123，如果防火墙是开启状态，在一些操作可能会出现错误，所以要记住关闭防火墙。\n\n### ===ntpd、ntpdate的区别===\n\n使用之前得弄清楚一个问题，ntpd与ntpdate在更新时间时有什么区别。\n\nntpd不仅仅是时间同步服务器，它还可以做客户端与标准时间服务器进行同步时间，而且是平滑同步，\n\n并非ntpdate立即同步，在生产环境中慎用ntpdate，也正如此两者不可同时运行。\n\n时钟的跃变，对于某些程序会导致很严重的问题。\n\n \n\n许多应用程序依赖连续的时钟——毕竟，这是一项常见的假定，即，取得的时间是线性的，\n\n一些操作，例如数据库事务，通常会地依赖这样的事实：时间不会往回跳跃。\n\n不幸的是，ntpdate调整时间的方式就是我们所说的”跃变“：在获得一个时间之后，ntpdate使用settimeofday(2)设置系统时间，\n\n这有几个非常明显的问题：\n\n【一】这样做不安全。\n\nntpdate的设置依赖于ntp服务器的安全性，攻击者可以利用一些软件设计上的缺陷，拿下ntp服务器并令与其同步的服务器执行某些消耗性的任务。\n\n由于ntpdate采用的方式是跳变，跟随它的服务器无法知道是否发生了异常（时间不一样的时候，唯一的办法是以服务器为准）。\n\n【二】这样做不精确。\n\n一旦ntp服务器宕机，跟随它的服务器也就会无法同步时间。\n\n与此不同，ntpd不仅能够校准计算机的时间，而且能够校准计算机的时钟。\n\n【三】这样做不够优雅。\n\n由于是跳变，而不是使时间变快或变慢，依赖时序的程序会出错\n\n（例如，如果ntpdate发现你的时间快了，则可能会经历两个相同的时刻，对某些应用而言，这是致命的）。\n\n因而，唯一一个可以令时间发生跳变的点，是计算机刚刚启动，但还没有启动很多服务的那个时候。\n\n其余的时候，理想的做法是使用ntpd来校准时钟，而不是调整计算机时钟上的时间。\n\nNTPD在和时间服务器的同步过程中，会把BIOS计时器的振荡频率偏差——或者说Local Clock的自然漂移(drift)——记录下来。\n\n这样即使网络有问题，本机仍然能维持一个相当精确的走时。\n\n### ==其他问题==\n\n配置了ntp服务之后，发现时间仍然无法同步\n\n通过命令timedatectl查看，之后，发现ntp服务没有生效（NTP enabled: no），如下图所示\n\n![](915691-20200929232515753-1829091402.png)\n\n执行命令timedatectl set-ntp yes之后，问题得以解决。\n\n>参考资料\n>\n>https://www.cnblogs.com/quchunhui/p/7658853.html\n>\n>鸟哥的Linux私房菜 http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf\n>\n>https://www.cnblogs.com/yjt1993/p/11177554.html\n\n","slug":"ntp","published":1,"layout":"post","photos":[],"link":"","_id":"cku3q80ka000258fg7luwh3zl","content":"<h2 id=\"1-什么是NTP-why-we-need-it\"><a href=\"#1-什么是NTP-why-we-need-it\" class=\"headerlink\" title=\"1. 什么是NTP,why we need it?\"></a>1. 什么是NTP,why we need it?</h2><p>​        如今我们的软件系统通常部署在计算设备集群中，而非单一的物理设备上。统一、同步的标准时间用于记录各种事件发生时序，如日志的打印时间戳、微服务调用链监控、文件创建和访问时间、E-MAIL时间戳、数据库处理时间等。系统内不同计算设备之间控制、计算、处理、应用等数据或操作都具有时序性，若计算机时间不同步，这些应用或操作或将无法正常进行。</p>\n<p>​        大数据系统是对时间敏感的计算处理系统，时间同步是大数据能够得到正确处理的基础保障，是大数据得以发挥作用的技术支撑。大数据时代，整个处理计算系统内的大数据通信都是通过网络进行。时间同步也是如此，利用大数据的互联网络传送标准时间信息，实现大数据系统内时间同步。</p>\n<p>​        网络时间同步协议(NTP)是时间同步的技术基础。</p>\n<p>​        首先看下官网<a href=\"http://www.ntp.org/%E5%AF%B9%E5%AE%83%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%82\">http://www.ntp.org/对它的定义。</a></p>\n<blockquote>\n<p><strong>NTP is a protocol designed to synchronize the clocks of computers over a network.</strong></p>\n<p><strong>NTP 是一种通过网络同步计算机时钟的协议。</strong></p>\n</blockquote>\n<p>​        网站的描述十分简洁。在实际的应用中，NTP分为服务端和客户端，客户端向服务端发起请求索要时间，来校准自己的时间。而一个节点，既可以作为服务端，也可以作为客户端。</p>\n<p>​        然后我们来看下<a href=\"http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf\">《鸟哥的Linux》</a>中对于NTP的介绍。</p>\n<blockquote>\n<p>​         Linux 操作系统的计时方式主要是由1970/01/01 开始计算总秒数，因此，如果你还记得date 这个指令的话， 会发现它有个+%s 的参数，可以取得总秒数，这个就是软件时钟。但，如同前面说的，电脑硬件主要是以BIOS芯片内部的时间为主要的时间依据(硬件时钟)，而偏偏这个时间可能因为BIOS 内部晶片本身的问题，而导致BIOS 时间与标准时间(UTC) 有一点点的差异存在！所以为了避免主机长时间运行下所导致的时间误差，进行时间同步 (synchronize) 的工作就显的很重要了！</p>\n<ul>\n<li>软件时钟：由Linux 系统根据1970/01/01 开始计算的总秒数。</li>\n<li>硬件时钟：主机硬件芯片里面的时钟，例如BIOS 记录的时间。</li>\n</ul>\n<p>那么怎么让时间同步化呢？想一想，如果我们选择几部主要主机(Primary server) 调校时间，让这些 Primary Servers 的时间同步之后，再开放网络服务来让Client 端连线，并且提供给Client 端调整自己的时间，不就可以达到全部的电脑时间同步化的目的了吗！那么什么协议可以达到这样的功能呢？那就是NTP，到底NTP 这个daemon 是如何让Server 与Client 同步他们的时间呢？</p>\n<ol>\n<li>首先，主机当然需要启动这个daemon ，之后，</li>\n<li>Client 会向NTP Server 发送出调校时间的message ，</li>\n<li>然后NTP Server 会送出目前的标准时间给Client ，</li>\n<li>Client 接收了来自Server 的时间后，会据以调整自己的时间，就达成了网络时间校准了！</li>\n</ol>\n<p>在上面的步骤中你有没有想到一件事啊，那就是如果Client到Server的消息传送时间过长了怎么办？ 举例来说，我在台湾以ADSL 的PC 主机，连线到美国的NTP Server 主机进行时间同步化要求，而美国NTP Server 收到我的要求之后，就发送当时的正确时间给我，不过， 由美国将资料传送回我的PC 时，时间可能已经延迟了10 秒钟去了！这样一来，我的PC 校正的时间是10 秒钟前的标准时间喔！此外，如果美国那么NTP 主机有太多的人喜欢上去进行网路校时了，所以 loading (负荷) 太重啦！导致讯息的回传又延迟的更为严重！那怎么办？</p>\n<p>为了这些延迟的问题，有一些program 已经开发了自动计算时间传送过程的误差，以更准确的校准自己的时间！当然啦，在 daemon 的部分，也同时以server/client 及master/slave 的架构来提供使用者进行网路校时的动作！所谓的 master/slave 就有点类似DNS 的系统咯！举例来说，台湾的标准时间主机去国际标准时间的主机校时， 然后各大专院校再到台湾的标准时间校时，然后我们再到各大专院校的标准时间校时！这样一来，那几部国际标准时间主机 (Time server) 的loading 就不至于太大，而我们也可以很快速的达到正确的网路校时的目的呢！</p>\n</blockquote>\n<p>​        NTP服务器阶层的概念</p>\n<blockquote>\n<p>​    如前所述，由于NTP 时间服务器采用类似阶层架构(stratum) 来处理时间的同步化， 所以他使用的是类似一般server/client 的主从架构。网络社会上面有提供一些主要与次要的时间服务器， 这些均属于第一阶及第二阶的时间服务器(stratum-1, stratum-2) ，如下所示：</p>\n<ul>\n<li>主要时间服务器： <a href=\"http://support.ntp.org/bin/view/Servers/StratumOneTimeServers\">http://support.ntp.org/bin/view/Servers/StratumOneTimeServers</a></li>\n<li>次要时间服务器： <a href=\"http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers\">http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers</a></li>\n</ul>\n<p>由于这些时间服务器大多在国外，所以我们是否要使用这些服务器来同步化自己的时间呢？其实如果台湾地区已经有标准时间服务器的话，用那部即可，不需要连线到国外啦！浪费带宽与时间啊！而如前面提到的，台湾地区已经有标准的时间服务器了，所以当然我们可以直接选择台湾地区的NTP 主机即可。</p>\n<p>如果你评估一下，确定有架设NTP 的需求时，我们可以直接选择台湾地区的上层NTP 来同步化时间即可。举例来说tock.stdtime.gov.tw 这个国家单位的主机应该是比较适合的。一般来说，我们在进行NTP 主机的设定时，都会先选择多部上层的Time Server 来做为我们这一部NTP Server 的校正之用，选择多部的原因是因为 然后我们的NTP Server 才提供给自己的Client 端更新时间 如此一来，国家单位的tock.stdtime.gov.tw 负载才不会太大，而我们的Client 也可以很快速的达到校时的动作！</p>\n<p><strong>Tips: 举例来说，如果我们的NTP 是向台湾的tock.stdtime.gov.tw 这部stratum-2 的主机要求时间同步化，那我们的主机即为stratum-3 ，如果还有其他的NTP 主机向我们要求时间同步， 那么该部主机则会是stratum-4 啦！就这样啊～ 那最多可以有几个阶层？最多可达15 个阶层喔！</strong>   </p>\n</blockquote>\n<p>​        ntp核心配置与命令文件</p>\n<blockquote>\n<ul>\n<li><strong>/etc/ntp.conf</strong>： NTP 服务器的主要配置文件，也是唯一的一个。</li>\n</ul>\n<p>命令主要有如下几个：</p>\n<ul>\n<li><p><strong>/bin/date</strong>： 用于 Linux 时间 (软件时钟) 的修改与显示的指令。</p>\n</li>\n<li><p><strong>/sbin/hwclock</strong>： 用于 BIOS 时钟 (硬件时钟) 的修改与显示的指令。 这是一个 root 才能执行的指令，因为 Linux 系統上面 BIOS 时间与 Linux 系統时间是分开的，所以使用 date 这个指令调整了时间之后，还需要使用 hwclock 才能將修改过后的时间写入 BIOS 当中！</p>\n</li>\n<li><p><strong>/usr/sbin/ntpd</strong>： 主要提供 NTP 服务的命令！配置文件为 /etc/ntp.conf</p>\n</li>\n<li><p><strong>/usr/sbin/ntpdate</strong>： 用于client端的时间校正，如果你沒有要启用 NTP服务 而仅想要使用 NTP Client 功能的话，那么只用这个指令就可以了！</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"2-设置时区\"><a href=\"#2-设置时区\" class=\"headerlink\" title=\"2 . 设置时区\"></a>2 . 设置时区</h2><p>   计算机中的OS时区应与计算设备所处地理时区一致，否则将出现时差。</p>\n<p>   CentOS和Ubuntu的时区文件是/etc/localtime，但是在CentOS7以后localtime以及变成了一个链接文件,如果采用直接cp的方法修改系统时区，那么就会把它所链接的文件修改掉，例如把美国的时区文件内容修改成了上海的时区内容，有可能会导致有些编程语言或程序在读取系统时区的时候发生错误，因此正确的修改方法是：</p>\n<h3 id=\"CentOS6、Ubuntu16\"><a href=\"#CentOS6、Ubuntu16\" class=\"headerlink\" title=\"CentOS6、Ubuntu16\"></a><strong>CentOS6、Ubuntu16</strong></h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"># cp <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7、RHEL7、Scientific-Linux-7、Oracle-Linux-7\"><a href=\"#CentOS7、RHEL7、Scientific-Linux-7、Oracle-Linux-7\" class=\"headerlink\" title=\"CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7\"></a><strong>CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7</strong></h3><p>最好的方法是使用timedatectl命令</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">[root<span class=\"hljs-symbol\">@test</span><span class=\"hljs-number\">-127</span> ~]<span class=\"hljs-meta\"># timedatectl list-timezones |grep Shanghai    #查找中国时区的完整名称</span><br>Asia/Shanghai<br>[root<span class=\"hljs-symbol\">@test</span><span class=\"hljs-number\">-127</span> ~]<span class=\"hljs-meta\"># timedatectl set-timezone Asia/Shanghai    #其他时区以此类推</span><br></code></pre></td></tr></table></figure>\n\n<p>或者直接手动创建软链接</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">[root@test-<span class=\"hljs-number\">127</span> ~]# ln -sf <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-NTP服务器的安装与设定\"><a href=\"#3-NTP服务器的安装与设定\" class=\"headerlink\" title=\"3. NTP服务器的安装与设定\"></a>3. NTP服务器的安装与设定</h2><p>​    <strong>在这里，我们采用二级同步机制，master 作为主节点，负责与外部系统同步时间，并把自己的时间同步给集群内其他client节点，所有client节点均向master 同步时间</strong>。</p>\n<p><img src=\"test1.png\"></p>\n<p><strong>以下操作假设我们有4台Linux虚拟机需要做时间同步，192.168.100.100为外部的时钟源。</strong></p>\n<blockquote>\n<p>192.168.60.101 master1 </p>\n<p>192.168.60.102 client1 </p>\n<p>192.168.60.103 client2</p>\n<p>192.168.60.104 client3</p>\n<p>192.168.1000.100 外部时钟源</p>\n</blockquote>\n<h3 id=\"2-1-安装NTP\"><a href=\"#2-1-安装NTP\" class=\"headerlink\" title=\"2.1  安装NTP\"></a>2.1  安装NTP</h3><h4 id=\"2-1-1-卸载旧ntp服务\"><a href=\"#2-1-1-卸载旧ntp服务\" class=\"headerlink\" title=\"2.1.1 卸载旧ntp服务\"></a>2.1.1 卸载旧ntp服务</h4><p>确认是否已安装ntp、ntpupdate</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# rpm –qa | grep ntp<br></code></pre></td></tr></table></figure>\n\n<p>若只有ntpdate而未见ntp，则需删除原有ntpdate。如：</p>\n<p>ntpdate-4.2.6p5-22.el7_0.x86_64</p>\n<p>fontpackages-filesystem-1.44-8.el7.noarch</p>\n<p>python-ntplib-0.3.2-1.el7.noarch</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# yum –y remove ntpdate-4.2.6p5-22.el7.x86_64<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-安装ntp\"><a href=\"#2-1-2-安装ntp\" class=\"headerlink\" title=\"2.1.2    安装ntp\"></a>2.1.2    安装ntp</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# yum –y install ntp<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-配置ntp-conf文件\"><a href=\"#2-2-配置ntp-conf文件\" class=\"headerlink\" title=\"2.2    配置ntp.conf文件\"></a>2.2    配置ntp.conf文件</h3><h4 id=\"2-2-1-ntp-conf文件解析\"><a href=\"#2-2-1-ntp-conf文件解析\" class=\"headerlink\" title=\"2.2.1 ntp.conf文件解析\"></a>2.2.1 ntp.conf文件解析</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> For more information about this file, see the man pages</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 时间偏移量 格式：driftfile [可以被ntpd 写入的目录与档案] 详细概念在附录进行介绍，下同</span><br>driftfile /var/lib/ntp/drift<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Permit time synchronization with our time <span class=\"hljs-built_in\">source</span>, but <span class=\"hljs-keyword\">do</span> not</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> permit the <span class=\"hljs-built_in\">source</span> to query or modify the service on this system.</span><br>restrict default nomodify notrap nopeer noquery<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Permit all access over the loopback interface.  This could</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> be tightened as well, but to <span class=\"hljs-keyword\">do</span> so would effect some of</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> the administrative <span class=\"hljs-built_in\">functions</span>.</span><br>restrict 192.168.60.101 nomodify notrap nopeer noquery<br>restrict 127.0.0.1<br>restrict ::1<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Hosts on <span class=\"hljs-built_in\">local</span> network are less restricted.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 权限管理 格式：restrict [IP] mask [netmask_IP] [parameter]</span> <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 这里192.168.60.0为集群所在网段的网关（Gateway），意思代表的192.168.60.0~255网段的机器都允许与本机的ntp时间同步。255.255.255.0为子网掩码（Genmask）。</span><br>reastrict 192.168.60.0 mask 255.255.255.0 nomodify notrap<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Use public servers from the pool.ntp.org project.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 设定上层NTP服务器，请先将其余的server如 [0|1|2].centos.pool.ntp.org 注释掉</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 格式：server [IP or hostname] [prefer] prefer表示优先使用，iburst表示请求频率加强：</span><br>server 220.130.158.71 prefer  &lt;==以这部主机为最优先的server<br>server 59.124.196.83<br>server 59.124.196.84<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 最大阶层数，局域网项目一般设置为10</span><br>fudge 192.168.60.128 stratum 10<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">broadcast 192.168.1.255 autokey        <span class=\"hljs-comment\"># broadcast server</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">broadcastclient                        <span class=\"hljs-comment\"># broadcast client</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">broadcast 224.0.1.1 autokey            <span class=\"hljs-comment\"># multicast server</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">multicastclient 224.0.1.1              <span class=\"hljs-comment\"># multicast client</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">manycastserver 239.255.254.254         <span class=\"hljs-comment\"># manycast server</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">manycastclient 239.255.254.254 autokey <span class=\"hljs-comment\"># manycast client</span></span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Enable public key cryptography.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">crypto</span><br><br>includefile /etc/ntp/crypto/pw<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Key file containing the keys and key identifiers used when operating</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> with symmetric key cryptography.</span><br>keys /etc/ntp/keys<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Specify the key identifiers <span class=\"hljs-built_in\">which</span> are trusted.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">trustedkey 4 8 42</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Specify the key identifier to use with the ntpdc utility.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">requestkey 8</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Specify the key identifier to use with the ntpq utility.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">controlkey 8</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Enable writing of statistics records.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">statistics clockstats cryptostats loopstats peerstats</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Disable the monitoring facility to prevent amplification attacks using ntpdc</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> monlist <span class=\"hljs-built_in\">command</span> when default restrict does not include the noquery flag. See</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> CVE-2013-5211 <span class=\"hljs-keyword\">for</span> more details.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Note: Monitoring will not be disabled with the limited restriction flag.</span><br>disable monitor<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-修改所有节点的-etc-ntp-conf\"><a href=\"#2-2-2-修改所有节点的-etc-ntp-conf\" class=\"headerlink\" title=\"2.2.2    修改所有节点的/etc/ntp.conf\"></a>2.2.2    修改所有节点的/etc/ntp.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">restrict 192.168.60.101 nomodify notrap nopeer noquery          //当前节点IP地址<br>...<br>restrict 192.168.60.0 mask 255.255.255.0 nomodify notrap  //集群所在网段的网关（Gateway），子网掩码（Genmask）<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-选择一个主节点，修改其-etc-ntp-conf\"><a href=\"#2-2-3-选择一个主节点，修改其-etc-ntp-conf\" class=\"headerlink\" title=\"2.2.3    选择一个主节点，修改其/etc/ntp.conf\"></a>2.2.3    选择一个主节点，修改其/etc/ntp.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 外部时钟源</span><br>server 192.168.100.100 iburst prefer<br><span class=\"hljs-meta\">#</span><span class=\"bash\">兜底时间服务器，当外部时钟源不可用时，就是以本机时间作为集群机器的统一时间。</span><br>server 127.0.0.1 iburst<br>fudge 127.0.0.1 stratum 10<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-选择从节点，修改-etc-ntp-conf\"><a href=\"#2-2-4-选择从节点，修改-etc-ntp-conf\" class=\"headerlink\" title=\"2.2.4    选择从节点，修改/etc/ntp.conf\"></a>2.2.4    选择从节点，修改/etc/ntp.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">在server部分添加如下语句，注释其余server，将server指向主节点。</span><br>server 192.168.60.101<br>fudge 192.168.60.101 stratum 10<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 192.168.60.102 同上</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-同步硬件时钟\"><a href=\"#2-3-同步硬件时钟\" class=\"headerlink\" title=\"2.3 同步硬件时钟\"></a>2.3 同步硬件时钟</h3><p>ntp服务，默认只会同步系统时间，如果系统软硬件时间不一致，那么系统重启过后时间又会恢复成硬件时间。</p>\n<p>如果想要让ntp同时同步硬件时间，可以设置/etc/sysconfig/ntpd文件，</p>\n<p>在/etc/sysconfig/ntpd文件中，添加<code>SYNC_HWCLOCK=yes</code>，就可以让硬件时间与系统时间一起同步。</p>\n<p>允许BIOS与系统时间同步，也可以通过hwclock -w 命令。</p>\n<h3 id=\"2-4-启动ntp服务、查看状态\"><a href=\"#2-4-启动ntp服务、查看状态\" class=\"headerlink\" title=\"2.4  启动ntp服务、查看状态\"></a>2.4  启动ntp服务、查看状态</h3><h4 id=\"2-3-1-启动ntp服务\"><a href=\"#2-3-1-启动ntp服务\" class=\"headerlink\" title=\"2.3.1    启动ntp服务\"></a>2.3.1    启动ntp服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# service ntpd start<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-添加开机自启动\"><a href=\"#2-3-2-添加开机自启动\" class=\"headerlink\" title=\"2.3.2    添加开机自启动\"></a>2.3.2    添加开机自启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# chkconfig ntpd on<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-查看ntp服务器与上层ntp的状态\"><a href=\"#2-3-3-查看ntp服务器与上层ntp的状态\" class=\"headerlink\" title=\"2.3.3    查看ntp服务器与上层ntp的状态\"></a>2.3.3    查看ntp服务器与上层ntp的状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# ntpstat<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"915691-20171013002936340-1631273268.png\"></p>\n<p>查看ntp状态时，可能会出现如下所示情况</p>\n<p>① unsynchronised time server re-starting polling server every 8 s</p>\n<p><img src=\"915691-20171013131031496-1095710777.png\"></p>\n<p>② unsynchronised polling server every 8 s</p>\n<p><img src=\"915691-20171013131052840-421840461.png\"></p>\n<p>这种情况属于正常，ntp服务器配置完毕后，需要等待5-10分钟才能与/etc/ntp.conf中配置的标准时间进行同步。</p>\n<p>等一段时间之后，再次使用ntpstat命令查看状态，就会变成如下正常结果：</p>\n<p><img src=\"915691-20171013131330184-1857767541.png\"></p>\n<p>查<strong>看ntp服务器有无和上层ntp连通</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# ntpq -p<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"915691-20171013010729637-1391262052.png\"></p>\n<p>remote：本机和上层ntp的ip或主机名</p>\n<ul>\n<li>​    “*”表示已同步    </li>\n<li>​    “+”表示优先同步</li>\n</ul>\n<p>refid：参考上一层ntp主机地址</p>\n<p>st：stratum阶层</p>\n<p>when：多少秒前曾经同步过时间</p>\n<p>poll：下次更新在多少秒后</p>\n<p>reach：已经向上层ntp服务器要求更新的次数</p>\n<p>delay：网络延迟</p>\n<p>offset：时间补偿</p>\n<p>jitter：系统时间与bios时间差  </p>\n<h2 id=\"4-附录\"><a href=\"#4-附录\" class=\"headerlink\" title=\"4. 附录\"></a>4. 附录</h2><h3 id=\"etc-ntp-conf-其他配置内容详解\"><a href=\"#etc-ntp-conf-其他配置内容详解\" class=\"headerlink\" title=\"===/etc/ntp.conf  其他配置内容详解===\"></a><strong>===/etc/ntp.conf  其他配置内容详解===</strong></h3><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-comment\"># 1. 先处理权限方面的问题，包括放行上层服务器以及开放局域网用户来源：</span><br><span class=\"hljs-attribute\">restrict</span> default kod nomodify notrap nopeer noquery     &lt;==拒绝 IPv<span class=\"hljs-number\">4</span> 的用户<br><span class=\"hljs-attribute\">restrict</span> -<span class=\"hljs-number\">6</span> default kod nomodify notrap nopeer noquery  &lt;==拒绝 IPv<span class=\"hljs-number\">6</span> 的用户<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">220.130.158.71</span>   &lt;==放行 tock.stdtime.gov.tw 进入本 NTP 的服务器<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">59.124.196.83</span>    &lt;==放行 tick.stdtime.gov.tw 进入本 NTP 的服务器<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">59.124.196.84</span>    &lt;==放行 time.stdtime.gov.tw 进入本 NTP 的服务器<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">127.0.0.1</span>        &lt;==底下两个是默认值，放行本机来源<br><span class=\"hljs-attribute\">restrict</span> -<span class=\"hljs-number\">6</span> ::<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">192.168.100.0</span> mask <span class=\"hljs-number\">255.255.255.0</span> nomodify &lt;==放行局域网用户来源，或者列出单独IP<br><br><span class=\"hljs-comment\"># 2.预设时间差异分析档案与暂不用到的 keys 等，不需要更动它：</span><br><span class=\"hljs-attribute\">driftfile</span> /var/lib/ntp/drift<br><span class=\"hljs-attribute\">keys</span>      /etc/ntp/keys<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"restrict选项格式\"><a href=\"#restrict选项格式\" class=\"headerlink\" title=\"===restrict选项格式===\"></a>===restrict选项格式===</h3><p><strong>restrict [ 客户端IP ]  mask  [ IP掩码 ]  [参数</strong>]</p>\n<p>“客户端IP” 和 “IP掩码” 指定了对网络中哪些范围的计算机进行控制，如果使用default关键字，则表示对所有的计算机进行控制，参数指定了具体的限制内容，常见的参数如下：</p>\n<p>◆ ignore：拒绝连接到NTP服务器</p>\n<p>◆ nomodiy： 客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。</p>\n<p>◆ noquery： 不提供客户端的时间查询</p>\n<p>◆ notrap： 不提供trap远程登录功能，trap服务是一种远程时间日志服务。</p>\n<p>◆ notrust： 客户端除非通过认证，否则该客户端来源将被视为不信任子网 。</p>\n<p>◆ nopeer： 提供时间服务，但不作为对等体。</p>\n<p>◆ kod： 向不安全的访问者发送Kiss-Of-Death报文。</p>\n<h3 id=\"server选项格式\"><a href=\"#server选项格式\" class=\"headerlink\" title=\"===server选项格式===\"></a>===server选项格式===</h3><p><strong>server host  [ key n ] [ version n ] [ prefer ] [ mode n ] [ minpoll n ] [ maxpoll n ] [ iburst ]</strong></p>\n<p>其中host是上层NTP服务器的IP地址或域名，随后所跟的参数解释如下所示：</p>\n<p>◆ key： 表示所有发往服务器的报文包含有秘钥加密的认证信息，n是32位的整数，表示秘钥号。</p>\n<p>◆ version： 表示发往上层服务器的报文使用的版本号，n默认是3，可以是1或者2。</p>\n<p>◆ prefer： 如果有多个server选项，具有该参数的服务器有限使用。</p>\n<p>◆ mode： 指定数据报文mode字段的值。</p>\n<p>◆ minpoll： 指定与查询该服务器的最小时间间隔为2的n次方秒，n默认为6，范围为4-14。</p>\n<p>◆ maxpoll： 指定与查询该服务器的最大时间间隔为2的n次方秒，n默认为10，范围为4-14。</p>\n<p>◆ iburst： 当初始同步请求时，采用突发方式接连发送8个报文，时间间隔为2秒。</p>\n<h3 id=\"查看网关方法\"><a href=\"#查看网关方法\" class=\"headerlink\" title=\"===查看网关方法===\"></a>===查看网关方法===</h3><p>【命令1】route -n </p>\n<p>【命令2】ip route show </p>\n<p>【命令3】netstat -r</p>\n<h3 id=\"层次（stratum）\"><a href=\"#层次（stratum）\" class=\"headerlink\" title=\"===层次（stratum）===\"></a>===层次（stratum）===</h3><p>stratum根据上层server的层次而设定（+1）。</p>\n<p>对于提供network time service provider的主机来说，stratum的设定要尽可能准确。</p>\n<p>而作为局域网的time service provider，通常将stratum设置为10</p>\n<p><img src=\"915691-20171013005125324-1966406641.png\"></p>\n<p>0层的服务器采用的是原子钟、GPS钟等物理设备，stratum 1与stratum 0 是直接相连的，</p>\n<p>往后的stratum与上一层stratum通过网络相连，同一层的server也可以交互。</p>\n<p>ntpd对下层client来说是service server，对于上层server来说它是client。</p>\n<p>ntpd根据配置文件的参数决定是要为其他服务器提供时钟服务或者是从其他服务器同步时钟。所有的配置都在/etc/ntp.conf文件中。</p>\n<p><img src=\"20160917151428497.PNG\"></p>\n<h3 id=\"注意防火墙屏蔽ntp端口\"><a href=\"#注意防火墙屏蔽ntp端口\" class=\"headerlink\" title=\"===注意防火墙屏蔽ntp端口===\"></a>===注意防火墙屏蔽ntp端口===</h3><p>ntp服务器默认端口是123，如果防火墙是开启状态，在一些操作可能会出现错误，所以要记住关闭防火墙。</p>\n<h3 id=\"ntpd、ntpdate的区别\"><a href=\"#ntpd、ntpdate的区别\" class=\"headerlink\" title=\"===ntpd、ntpdate的区别===\"></a>===ntpd、ntpdate的区别===</h3><p>使用之前得弄清楚一个问题，ntpd与ntpdate在更新时间时有什么区别。</p>\n<p>ntpd不仅仅是时间同步服务器，它还可以做客户端与标准时间服务器进行同步时间，而且是平滑同步，</p>\n<p>并非ntpdate立即同步，在生产环境中慎用ntpdate，也正如此两者不可同时运行。</p>\n<p>时钟的跃变，对于某些程序会导致很严重的问题。</p>\n<p>许多应用程序依赖连续的时钟——毕竟，这是一项常见的假定，即，取得的时间是线性的，</p>\n<p>一些操作，例如数据库事务，通常会地依赖这样的事实：时间不会往回跳跃。</p>\n<p>不幸的是，ntpdate调整时间的方式就是我们所说的”跃变“：在获得一个时间之后，ntpdate使用settimeofday(2)设置系统时间，</p>\n<p>这有几个非常明显的问题：</p>\n<p>【一】这样做不安全。</p>\n<p>ntpdate的设置依赖于ntp服务器的安全性，攻击者可以利用一些软件设计上的缺陷，拿下ntp服务器并令与其同步的服务器执行某些消耗性的任务。</p>\n<p>由于ntpdate采用的方式是跳变，跟随它的服务器无法知道是否发生了异常（时间不一样的时候，唯一的办法是以服务器为准）。</p>\n<p>【二】这样做不精确。</p>\n<p>一旦ntp服务器宕机，跟随它的服务器也就会无法同步时间。</p>\n<p>与此不同，ntpd不仅能够校准计算机的时间，而且能够校准计算机的时钟。</p>\n<p>【三】这样做不够优雅。</p>\n<p>由于是跳变，而不是使时间变快或变慢，依赖时序的程序会出错</p>\n<p>（例如，如果ntpdate发现你的时间快了，则可能会经历两个相同的时刻，对某些应用而言，这是致命的）。</p>\n<p>因而，唯一一个可以令时间发生跳变的点，是计算机刚刚启动，但还没有启动很多服务的那个时候。</p>\n<p>其余的时候，理想的做法是使用ntpd来校准时钟，而不是调整计算机时钟上的时间。</p>\n<p>NTPD在和时间服务器的同步过程中，会把BIOS计时器的振荡频率偏差——或者说Local Clock的自然漂移(drift)——记录下来。</p>\n<p>这样即使网络有问题，本机仍然能维持一个相当精确的走时。</p>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"==其他问题==\"></a>==其他问题==</h3><p>配置了ntp服务之后，发现时间仍然无法同步</p>\n<p>通过命令timedatectl查看，之后，发现ntp服务没有生效（NTP enabled: no），如下图所示</p>\n<p><img src=\"915691-20200929232515753-1829091402.png\"></p>\n<p>执行命令timedatectl set-ntp yes之后，问题得以解决。</p>\n<blockquote>\n<p>参考资料</p>\n<p><a href=\"https://www.cnblogs.com/quchunhui/p/7658853.html\">https://www.cnblogs.com/quchunhui/p/7658853.html</a></p>\n<p>鸟哥的Linux私房菜 <a href=\"http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf\">http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf</a></p>\n<p><a href=\"https://www.cnblogs.com/yjt1993/p/11177554.html\">https://www.cnblogs.com/yjt1993/p/11177554.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-什么是NTP-why-we-need-it\"><a href=\"#1-什么是NTP-why-we-need-it\" class=\"headerlink\" title=\"1. 什么是NTP,why we need it?\"></a>1. 什么是NTP,why we need it?</h2><p>​        如今我们的软件系统通常部署在计算设备集群中，而非单一的物理设备上。统一、同步的标准时间用于记录各种事件发生时序，如日志的打印时间戳、微服务调用链监控、文件创建和访问时间、E-MAIL时间戳、数据库处理时间等。系统内不同计算设备之间控制、计算、处理、应用等数据或操作都具有时序性，若计算机时间不同步，这些应用或操作或将无法正常进行。</p>\n<p>​        大数据系统是对时间敏感的计算处理系统，时间同步是大数据能够得到正确处理的基础保障，是大数据得以发挥作用的技术支撑。大数据时代，整个处理计算系统内的大数据通信都是通过网络进行。时间同步也是如此，利用大数据的互联网络传送标准时间信息，实现大数据系统内时间同步。</p>\n<p>​        网络时间同步协议(NTP)是时间同步的技术基础。</p>\n<p>​        首先看下官网<a href=\"http://www.ntp.org/%E5%AF%B9%E5%AE%83%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%82\">http://www.ntp.org/对它的定义。</a></p>\n<blockquote>\n<p><strong>NTP is a protocol designed to synchronize the clocks of computers over a network.</strong></p>\n<p><strong>NTP 是一种通过网络同步计算机时钟的协议。</strong></p>\n</blockquote>\n<p>​        网站的描述十分简洁。在实际的应用中，NTP分为服务端和客户端，客户端向服务端发起请求索要时间，来校准自己的时间。而一个节点，既可以作为服务端，也可以作为客户端。</p>\n<p>​        然后我们来看下<a href=\"http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf\">《鸟哥的Linux》</a>中对于NTP的介绍。</p>\n<blockquote>\n<p>​         Linux 操作系统的计时方式主要是由1970/01/01 开始计算总秒数，因此，如果你还记得date 这个指令的话， 会发现它有个+%s 的参数，可以取得总秒数，这个就是软件时钟。但，如同前面说的，电脑硬件主要是以BIOS芯片内部的时间为主要的时间依据(硬件时钟)，而偏偏这个时间可能因为BIOS 内部晶片本身的问题，而导致BIOS 时间与标准时间(UTC) 有一点点的差异存在！所以为了避免主机长时间运行下所导致的时间误差，进行时间同步 (synchronize) 的工作就显的很重要了！</p>\n<ul>\n<li>软件时钟：由Linux 系统根据1970/01/01 开始计算的总秒数。</li>\n<li>硬件时钟：主机硬件芯片里面的时钟，例如BIOS 记录的时间。</li>\n</ul>\n<p>那么怎么让时间同步化呢？想一想，如果我们选择几部主要主机(Primary server) 调校时间，让这些 Primary Servers 的时间同步之后，再开放网络服务来让Client 端连线，并且提供给Client 端调整自己的时间，不就可以达到全部的电脑时间同步化的目的了吗！那么什么协议可以达到这样的功能呢？那就是NTP，到底NTP 这个daemon 是如何让Server 与Client 同步他们的时间呢？</p>\n<ol>\n<li>首先，主机当然需要启动这个daemon ，之后，</li>\n<li>Client 会向NTP Server 发送出调校时间的message ，</li>\n<li>然后NTP Server 会送出目前的标准时间给Client ，</li>\n<li>Client 接收了来自Server 的时间后，会据以调整自己的时间，就达成了网络时间校准了！</li>\n</ol>\n<p>在上面的步骤中你有没有想到一件事啊，那就是如果Client到Server的消息传送时间过长了怎么办？ 举例来说，我在台湾以ADSL 的PC 主机，连线到美国的NTP Server 主机进行时间同步化要求，而美国NTP Server 收到我的要求之后，就发送当时的正确时间给我，不过， 由美国将资料传送回我的PC 时，时间可能已经延迟了10 秒钟去了！这样一来，我的PC 校正的时间是10 秒钟前的标准时间喔！此外，如果美国那么NTP 主机有太多的人喜欢上去进行网路校时了，所以 loading (负荷) 太重啦！导致讯息的回传又延迟的更为严重！那怎么办？</p>\n<p>为了这些延迟的问题，有一些program 已经开发了自动计算时间传送过程的误差，以更准确的校准自己的时间！当然啦，在 daemon 的部分，也同时以server/client 及master/slave 的架构来提供使用者进行网路校时的动作！所谓的 master/slave 就有点类似DNS 的系统咯！举例来说，台湾的标准时间主机去国际标准时间的主机校时， 然后各大专院校再到台湾的标准时间校时，然后我们再到各大专院校的标准时间校时！这样一来，那几部国际标准时间主机 (Time server) 的loading 就不至于太大，而我们也可以很快速的达到正确的网路校时的目的呢！</p>\n</blockquote>\n<p>​        NTP服务器阶层的概念</p>\n<blockquote>\n<p>​    如前所述，由于NTP 时间服务器采用类似阶层架构(stratum) 来处理时间的同步化， 所以他使用的是类似一般server/client 的主从架构。网络社会上面有提供一些主要与次要的时间服务器， 这些均属于第一阶及第二阶的时间服务器(stratum-1, stratum-2) ，如下所示：</p>\n<ul>\n<li>主要时间服务器： <a href=\"http://support.ntp.org/bin/view/Servers/StratumOneTimeServers\">http://support.ntp.org/bin/view/Servers/StratumOneTimeServers</a></li>\n<li>次要时间服务器： <a href=\"http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers\">http://support.ntp.org/bin/view/Servers/StratumTwoTimeServers</a></li>\n</ul>\n<p>由于这些时间服务器大多在国外，所以我们是否要使用这些服务器来同步化自己的时间呢？其实如果台湾地区已经有标准时间服务器的话，用那部即可，不需要连线到国外啦！浪费带宽与时间啊！而如前面提到的，台湾地区已经有标准的时间服务器了，所以当然我们可以直接选择台湾地区的NTP 主机即可。</p>\n<p>如果你评估一下，确定有架设NTP 的需求时，我们可以直接选择台湾地区的上层NTP 来同步化时间即可。举例来说tock.stdtime.gov.tw 这个国家单位的主机应该是比较适合的。一般来说，我们在进行NTP 主机的设定时，都会先选择多部上层的Time Server 来做为我们这一部NTP Server 的校正之用，选择多部的原因是因为 然后我们的NTP Server 才提供给自己的Client 端更新时间 如此一来，国家单位的tock.stdtime.gov.tw 负载才不会太大，而我们的Client 也可以很快速的达到校时的动作！</p>\n<p><strong>Tips: 举例来说，如果我们的NTP 是向台湾的tock.stdtime.gov.tw 这部stratum-2 的主机要求时间同步化，那我们的主机即为stratum-3 ，如果还有其他的NTP 主机向我们要求时间同步， 那么该部主机则会是stratum-4 啦！就这样啊～ 那最多可以有几个阶层？最多可达15 个阶层喔！</strong>   </p>\n</blockquote>\n<p>​        ntp核心配置与命令文件</p>\n<blockquote>\n<ul>\n<li><strong>/etc/ntp.conf</strong>： NTP 服务器的主要配置文件，也是唯一的一个。</li>\n</ul>\n<p>命令主要有如下几个：</p>\n<ul>\n<li><p><strong>/bin/date</strong>： 用于 Linux 时间 (软件时钟) 的修改与显示的指令。</p>\n</li>\n<li><p><strong>/sbin/hwclock</strong>： 用于 BIOS 时钟 (硬件时钟) 的修改与显示的指令。 这是一个 root 才能执行的指令，因为 Linux 系統上面 BIOS 时间与 Linux 系統时间是分开的，所以使用 date 这个指令调整了时间之后，还需要使用 hwclock 才能將修改过后的时间写入 BIOS 当中！</p>\n</li>\n<li><p><strong>/usr/sbin/ntpd</strong>： 主要提供 NTP 服务的命令！配置文件为 /etc/ntp.conf</p>\n</li>\n<li><p><strong>/usr/sbin/ntpdate</strong>： 用于client端的时间校正，如果你沒有要启用 NTP服务 而仅想要使用 NTP Client 功能的话，那么只用这个指令就可以了！</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"2-设置时区\"><a href=\"#2-设置时区\" class=\"headerlink\" title=\"2 . 设置时区\"></a>2 . 设置时区</h2><p>   计算机中的OS时区应与计算设备所处地理时区一致，否则将出现时差。</p>\n<p>   CentOS和Ubuntu的时区文件是/etc/localtime，但是在CentOS7以后localtime以及变成了一个链接文件,如果采用直接cp的方法修改系统时区，那么就会把它所链接的文件修改掉，例如把美国的时区文件内容修改成了上海的时区内容，有可能会导致有些编程语言或程序在读取系统时区的时候发生错误，因此正确的修改方法是：</p>\n<h3 id=\"CentOS6、Ubuntu16\"><a href=\"#CentOS6、Ubuntu16\" class=\"headerlink\" title=\"CentOS6、Ubuntu16\"></a><strong>CentOS6、Ubuntu16</strong></h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"># cp <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7、RHEL7、Scientific-Linux-7、Oracle-Linux-7\"><a href=\"#CentOS7、RHEL7、Scientific-Linux-7、Oracle-Linux-7\" class=\"headerlink\" title=\"CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7\"></a><strong>CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7</strong></h3><p>最好的方法是使用timedatectl命令</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">[root<span class=\"hljs-symbol\">@test</span><span class=\"hljs-number\">-127</span> ~]<span class=\"hljs-meta\"># timedatectl list-timezones |grep Shanghai    #查找中国时区的完整名称</span><br>Asia/Shanghai<br>[root<span class=\"hljs-symbol\">@test</span><span class=\"hljs-number\">-127</span> ~]<span class=\"hljs-meta\"># timedatectl set-timezone Asia/Shanghai    #其他时区以此类推</span><br></code></pre></td></tr></table></figure>\n\n<p>或者直接手动创建软链接</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">[root@test-<span class=\"hljs-number\">127</span> ~]# ln -sf <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-NTP服务器的安装与设定\"><a href=\"#3-NTP服务器的安装与设定\" class=\"headerlink\" title=\"3. NTP服务器的安装与设定\"></a>3. NTP服务器的安装与设定</h2><p>​    <strong>在这里，我们采用二级同步机制，master 作为主节点，负责与外部系统同步时间，并把自己的时间同步给集群内其他client节点，所有client节点均向master 同步时间</strong>。</p>\n<p><img src=\"test1.png\"></p>\n<p><strong>以下操作假设我们有4台Linux虚拟机需要做时间同步，192.168.100.100为外部的时钟源。</strong></p>\n<blockquote>\n<p>192.168.60.101 master1 </p>\n<p>192.168.60.102 client1 </p>\n<p>192.168.60.103 client2</p>\n<p>192.168.60.104 client3</p>\n<p>192.168.1000.100 外部时钟源</p>\n</blockquote>\n<h3 id=\"2-1-安装NTP\"><a href=\"#2-1-安装NTP\" class=\"headerlink\" title=\"2.1  安装NTP\"></a>2.1  安装NTP</h3><h4 id=\"2-1-1-卸载旧ntp服务\"><a href=\"#2-1-1-卸载旧ntp服务\" class=\"headerlink\" title=\"2.1.1 卸载旧ntp服务\"></a>2.1.1 卸载旧ntp服务</h4><p>确认是否已安装ntp、ntpupdate</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# rpm –qa | grep ntp<br></code></pre></td></tr></table></figure>\n\n<p>若只有ntpdate而未见ntp，则需删除原有ntpdate。如：</p>\n<p>ntpdate-4.2.6p5-22.el7_0.x86_64</p>\n<p>fontpackages-filesystem-1.44-8.el7.noarch</p>\n<p>python-ntplib-0.3.2-1.el7.noarch</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# yum –y remove ntpdate-4.2.6p5-22.el7.x86_64<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-安装ntp\"><a href=\"#2-1-2-安装ntp\" class=\"headerlink\" title=\"2.1.2    安装ntp\"></a>2.1.2    安装ntp</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# yum –y install ntp<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-配置ntp-conf文件\"><a href=\"#2-2-配置ntp-conf文件\" class=\"headerlink\" title=\"2.2    配置ntp.conf文件\"></a>2.2    配置ntp.conf文件</h3><h4 id=\"2-2-1-ntp-conf文件解析\"><a href=\"#2-2-1-ntp-conf文件解析\" class=\"headerlink\" title=\"2.2.1 ntp.conf文件解析\"></a>2.2.1 ntp.conf文件解析</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> For more information about this file, see the man pages</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 时间偏移量 格式：driftfile [可以被ntpd 写入的目录与档案] 详细概念在附录进行介绍，下同</span><br>driftfile /var/lib/ntp/drift<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Permit time synchronization with our time <span class=\"hljs-built_in\">source</span>, but <span class=\"hljs-keyword\">do</span> not</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> permit the <span class=\"hljs-built_in\">source</span> to query or modify the service on this system.</span><br>restrict default nomodify notrap nopeer noquery<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Permit all access over the loopback interface.  This could</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> be tightened as well, but to <span class=\"hljs-keyword\">do</span> so would effect some of</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> the administrative <span class=\"hljs-built_in\">functions</span>.</span><br>restrict 192.168.60.101 nomodify notrap nopeer noquery<br>restrict 127.0.0.1<br>restrict ::1<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Hosts on <span class=\"hljs-built_in\">local</span> network are less restricted.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 权限管理 格式：restrict [IP] mask [netmask_IP] [parameter]</span> <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 这里192.168.60.0为集群所在网段的网关（Gateway），意思代表的192.168.60.0~255网段的机器都允许与本机的ntp时间同步。255.255.255.0为子网掩码（Genmask）。</span><br>reastrict 192.168.60.0 mask 255.255.255.0 nomodify notrap<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Use public servers from the pool.ntp.org project.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 设定上层NTP服务器，请先将其余的server如 [0|1|2].centos.pool.ntp.org 注释掉</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 格式：server [IP or hostname] [prefer] prefer表示优先使用，iburst表示请求频率加强：</span><br>server 220.130.158.71 prefer  &lt;==以这部主机为最优先的server<br>server 59.124.196.83<br>server 59.124.196.84<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 最大阶层数，局域网项目一般设置为10</span><br>fudge 192.168.60.128 stratum 10<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">broadcast 192.168.1.255 autokey        <span class=\"hljs-comment\"># broadcast server</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">broadcastclient                        <span class=\"hljs-comment\"># broadcast client</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">broadcast 224.0.1.1 autokey            <span class=\"hljs-comment\"># multicast server</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">multicastclient 224.0.1.1              <span class=\"hljs-comment\"># multicast client</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">manycastserver 239.255.254.254         <span class=\"hljs-comment\"># manycast server</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">manycastclient 239.255.254.254 autokey <span class=\"hljs-comment\"># manycast client</span></span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Enable public key cryptography.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">crypto</span><br><br>includefile /etc/ntp/crypto/pw<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Key file containing the keys and key identifiers used when operating</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> with symmetric key cryptography.</span><br>keys /etc/ntp/keys<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Specify the key identifiers <span class=\"hljs-built_in\">which</span> are trusted.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">trustedkey 4 8 42</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Specify the key identifier to use with the ntpdc utility.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">requestkey 8</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Specify the key identifier to use with the ntpq utility.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">controlkey 8</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Enable writing of statistics records.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">statistics clockstats cryptostats loopstats peerstats</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Disable the monitoring facility to prevent amplification attacks using ntpdc</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> monlist <span class=\"hljs-built_in\">command</span> when default restrict does not include the noquery flag. See</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> CVE-2013-5211 <span class=\"hljs-keyword\">for</span> more details.</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> Note: Monitoring will not be disabled with the limited restriction flag.</span><br>disable monitor<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-修改所有节点的-etc-ntp-conf\"><a href=\"#2-2-2-修改所有节点的-etc-ntp-conf\" class=\"headerlink\" title=\"2.2.2    修改所有节点的/etc/ntp.conf\"></a>2.2.2    修改所有节点的/etc/ntp.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">restrict 192.168.60.101 nomodify notrap nopeer noquery          //当前节点IP地址<br>...<br>restrict 192.168.60.0 mask 255.255.255.0 nomodify notrap  //集群所在网段的网关（Gateway），子网掩码（Genmask）<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-选择一个主节点，修改其-etc-ntp-conf\"><a href=\"#2-2-3-选择一个主节点，修改其-etc-ntp-conf\" class=\"headerlink\" title=\"2.2.3    选择一个主节点，修改其/etc/ntp.conf\"></a>2.2.3    选择一个主节点，修改其/etc/ntp.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 外部时钟源</span><br>server 192.168.100.100 iburst prefer<br><span class=\"hljs-meta\">#</span><span class=\"bash\">兜底时间服务器，当外部时钟源不可用时，就是以本机时间作为集群机器的统一时间。</span><br>server 127.0.0.1 iburst<br>fudge 127.0.0.1 stratum 10<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-选择从节点，修改-etc-ntp-conf\"><a href=\"#2-2-4-选择从节点，修改-etc-ntp-conf\" class=\"headerlink\" title=\"2.2.4    选择从节点，修改/etc/ntp.conf\"></a>2.2.4    选择从节点，修改/etc/ntp.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">在server部分添加如下语句，注释其余server，将server指向主节点。</span><br>server 192.168.60.101<br>fudge 192.168.60.101 stratum 10<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 192.168.60.102 同上</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-同步硬件时钟\"><a href=\"#2-3-同步硬件时钟\" class=\"headerlink\" title=\"2.3 同步硬件时钟\"></a>2.3 同步硬件时钟</h3><p>ntp服务，默认只会同步系统时间，如果系统软硬件时间不一致，那么系统重启过后时间又会恢复成硬件时间。</p>\n<p>如果想要让ntp同时同步硬件时间，可以设置/etc/sysconfig/ntpd文件，</p>\n<p>在/etc/sysconfig/ntpd文件中，添加<code>SYNC_HWCLOCK=yes</code>，就可以让硬件时间与系统时间一起同步。</p>\n<p>允许BIOS与系统时间同步，也可以通过hwclock -w 命令。</p>\n<h3 id=\"2-4-启动ntp服务、查看状态\"><a href=\"#2-4-启动ntp服务、查看状态\" class=\"headerlink\" title=\"2.4  启动ntp服务、查看状态\"></a>2.4  启动ntp服务、查看状态</h3><h4 id=\"2-3-1-启动ntp服务\"><a href=\"#2-3-1-启动ntp服务\" class=\"headerlink\" title=\"2.3.1    启动ntp服务\"></a>2.3.1    启动ntp服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# service ntpd start<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-添加开机自启动\"><a href=\"#2-3-2-添加开机自启动\" class=\"headerlink\" title=\"2.3.2    添加开机自启动\"></a>2.3.2    添加开机自启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# chkconfig ntpd on<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-查看ntp服务器与上层ntp的状态\"><a href=\"#2-3-3-查看ntp服务器与上层ntp的状态\" class=\"headerlink\" title=\"2.3.3    查看ntp服务器与上层ntp的状态\"></a>2.3.3    查看ntp服务器与上层ntp的状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# ntpstat<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"915691-20171013002936340-1631273268.png\"></p>\n<p>查看ntp状态时，可能会出现如下所示情况</p>\n<p>① unsynchronised time server re-starting polling server every 8 s</p>\n<p><img src=\"915691-20171013131031496-1095710777.png\"></p>\n<p>② unsynchronised polling server every 8 s</p>\n<p><img src=\"915691-20171013131052840-421840461.png\"></p>\n<p>这种情况属于正常，ntp服务器配置完毕后，需要等待5-10分钟才能与/etc/ntp.conf中配置的标准时间进行同步。</p>\n<p>等一段时间之后，再次使用ntpstat命令查看状态，就会变成如下正常结果：</p>\n<p><img src=\"915691-20171013131330184-1857767541.png\"></p>\n<p>查<strong>看ntp服务器有无和上层ntp连通</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@master01 ~]# ntpq -p<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"915691-20171013010729637-1391262052.png\"></p>\n<p>remote：本机和上层ntp的ip或主机名</p>\n<ul>\n<li>​    “*”表示已同步    </li>\n<li>​    “+”表示优先同步</li>\n</ul>\n<p>refid：参考上一层ntp主机地址</p>\n<p>st：stratum阶层</p>\n<p>when：多少秒前曾经同步过时间</p>\n<p>poll：下次更新在多少秒后</p>\n<p>reach：已经向上层ntp服务器要求更新的次数</p>\n<p>delay：网络延迟</p>\n<p>offset：时间补偿</p>\n<p>jitter：系统时间与bios时间差  </p>\n<h2 id=\"4-附录\"><a href=\"#4-附录\" class=\"headerlink\" title=\"4. 附录\"></a>4. 附录</h2><h3 id=\"etc-ntp-conf-其他配置内容详解\"><a href=\"#etc-ntp-conf-其他配置内容详解\" class=\"headerlink\" title=\"===/etc/ntp.conf  其他配置内容详解===\"></a><strong>===/etc/ntp.conf  其他配置内容详解===</strong></h3><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-comment\"># 1. 先处理权限方面的问题，包括放行上层服务器以及开放局域网用户来源：</span><br><span class=\"hljs-attribute\">restrict</span> default kod nomodify notrap nopeer noquery     &lt;==拒绝 IPv<span class=\"hljs-number\">4</span> 的用户<br><span class=\"hljs-attribute\">restrict</span> -<span class=\"hljs-number\">6</span> default kod nomodify notrap nopeer noquery  &lt;==拒绝 IPv<span class=\"hljs-number\">6</span> 的用户<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">220.130.158.71</span>   &lt;==放行 tock.stdtime.gov.tw 进入本 NTP 的服务器<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">59.124.196.83</span>    &lt;==放行 tick.stdtime.gov.tw 进入本 NTP 的服务器<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">59.124.196.84</span>    &lt;==放行 time.stdtime.gov.tw 进入本 NTP 的服务器<br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">127.0.0.1</span>        &lt;==底下两个是默认值，放行本机来源<br><span class=\"hljs-attribute\">restrict</span> -<span class=\"hljs-number\">6</span> ::<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">restrict</span> <span class=\"hljs-number\">192.168.100.0</span> mask <span class=\"hljs-number\">255.255.255.0</span> nomodify &lt;==放行局域网用户来源，或者列出单独IP<br><br><span class=\"hljs-comment\"># 2.预设时间差异分析档案与暂不用到的 keys 等，不需要更动它：</span><br><span class=\"hljs-attribute\">driftfile</span> /var/lib/ntp/drift<br><span class=\"hljs-attribute\">keys</span>      /etc/ntp/keys<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"restrict选项格式\"><a href=\"#restrict选项格式\" class=\"headerlink\" title=\"===restrict选项格式===\"></a>===restrict选项格式===</h3><p><strong>restrict [ 客户端IP ]  mask  [ IP掩码 ]  [参数</strong>]</p>\n<p>“客户端IP” 和 “IP掩码” 指定了对网络中哪些范围的计算机进行控制，如果使用default关键字，则表示对所有的计算机进行控制，参数指定了具体的限制内容，常见的参数如下：</p>\n<p>◆ ignore：拒绝连接到NTP服务器</p>\n<p>◆ nomodiy： 客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。</p>\n<p>◆ noquery： 不提供客户端的时间查询</p>\n<p>◆ notrap： 不提供trap远程登录功能，trap服务是一种远程时间日志服务。</p>\n<p>◆ notrust： 客户端除非通过认证，否则该客户端来源将被视为不信任子网 。</p>\n<p>◆ nopeer： 提供时间服务，但不作为对等体。</p>\n<p>◆ kod： 向不安全的访问者发送Kiss-Of-Death报文。</p>\n<h3 id=\"server选项格式\"><a href=\"#server选项格式\" class=\"headerlink\" title=\"===server选项格式===\"></a>===server选项格式===</h3><p><strong>server host  [ key n ] [ version n ] [ prefer ] [ mode n ] [ minpoll n ] [ maxpoll n ] [ iburst ]</strong></p>\n<p>其中host是上层NTP服务器的IP地址或域名，随后所跟的参数解释如下所示：</p>\n<p>◆ key： 表示所有发往服务器的报文包含有秘钥加密的认证信息，n是32位的整数，表示秘钥号。</p>\n<p>◆ version： 表示发往上层服务器的报文使用的版本号，n默认是3，可以是1或者2。</p>\n<p>◆ prefer： 如果有多个server选项，具有该参数的服务器有限使用。</p>\n<p>◆ mode： 指定数据报文mode字段的值。</p>\n<p>◆ minpoll： 指定与查询该服务器的最小时间间隔为2的n次方秒，n默认为6，范围为4-14。</p>\n<p>◆ maxpoll： 指定与查询该服务器的最大时间间隔为2的n次方秒，n默认为10，范围为4-14。</p>\n<p>◆ iburst： 当初始同步请求时，采用突发方式接连发送8个报文，时间间隔为2秒。</p>\n<h3 id=\"查看网关方法\"><a href=\"#查看网关方法\" class=\"headerlink\" title=\"===查看网关方法===\"></a>===查看网关方法===</h3><p>【命令1】route -n </p>\n<p>【命令2】ip route show </p>\n<p>【命令3】netstat -r</p>\n<h3 id=\"层次（stratum）\"><a href=\"#层次（stratum）\" class=\"headerlink\" title=\"===层次（stratum）===\"></a>===层次（stratum）===</h3><p>stratum根据上层server的层次而设定（+1）。</p>\n<p>对于提供network time service provider的主机来说，stratum的设定要尽可能准确。</p>\n<p>而作为局域网的time service provider，通常将stratum设置为10</p>\n<p><img src=\"915691-20171013005125324-1966406641.png\"></p>\n<p>0层的服务器采用的是原子钟、GPS钟等物理设备，stratum 1与stratum 0 是直接相连的，</p>\n<p>往后的stratum与上一层stratum通过网络相连，同一层的server也可以交互。</p>\n<p>ntpd对下层client来说是service server，对于上层server来说它是client。</p>\n<p>ntpd根据配置文件的参数决定是要为其他服务器提供时钟服务或者是从其他服务器同步时钟。所有的配置都在/etc/ntp.conf文件中。</p>\n<p><img src=\"20160917151428497.PNG\"></p>\n<h3 id=\"注意防火墙屏蔽ntp端口\"><a href=\"#注意防火墙屏蔽ntp端口\" class=\"headerlink\" title=\"===注意防火墙屏蔽ntp端口===\"></a>===注意防火墙屏蔽ntp端口===</h3><p>ntp服务器默认端口是123，如果防火墙是开启状态，在一些操作可能会出现错误，所以要记住关闭防火墙。</p>\n<h3 id=\"ntpd、ntpdate的区别\"><a href=\"#ntpd、ntpdate的区别\" class=\"headerlink\" title=\"===ntpd、ntpdate的区别===\"></a>===ntpd、ntpdate的区别===</h3><p>使用之前得弄清楚一个问题，ntpd与ntpdate在更新时间时有什么区别。</p>\n<p>ntpd不仅仅是时间同步服务器，它还可以做客户端与标准时间服务器进行同步时间，而且是平滑同步，</p>\n<p>并非ntpdate立即同步，在生产环境中慎用ntpdate，也正如此两者不可同时运行。</p>\n<p>时钟的跃变，对于某些程序会导致很严重的问题。</p>\n<p>许多应用程序依赖连续的时钟——毕竟，这是一项常见的假定，即，取得的时间是线性的，</p>\n<p>一些操作，例如数据库事务，通常会地依赖这样的事实：时间不会往回跳跃。</p>\n<p>不幸的是，ntpdate调整时间的方式就是我们所说的”跃变“：在获得一个时间之后，ntpdate使用settimeofday(2)设置系统时间，</p>\n<p>这有几个非常明显的问题：</p>\n<p>【一】这样做不安全。</p>\n<p>ntpdate的设置依赖于ntp服务器的安全性，攻击者可以利用一些软件设计上的缺陷，拿下ntp服务器并令与其同步的服务器执行某些消耗性的任务。</p>\n<p>由于ntpdate采用的方式是跳变，跟随它的服务器无法知道是否发生了异常（时间不一样的时候，唯一的办法是以服务器为准）。</p>\n<p>【二】这样做不精确。</p>\n<p>一旦ntp服务器宕机，跟随它的服务器也就会无法同步时间。</p>\n<p>与此不同，ntpd不仅能够校准计算机的时间，而且能够校准计算机的时钟。</p>\n<p>【三】这样做不够优雅。</p>\n<p>由于是跳变，而不是使时间变快或变慢，依赖时序的程序会出错</p>\n<p>（例如，如果ntpdate发现你的时间快了，则可能会经历两个相同的时刻，对某些应用而言，这是致命的）。</p>\n<p>因而，唯一一个可以令时间发生跳变的点，是计算机刚刚启动，但还没有启动很多服务的那个时候。</p>\n<p>其余的时候，理想的做法是使用ntpd来校准时钟，而不是调整计算机时钟上的时间。</p>\n<p>NTPD在和时间服务器的同步过程中，会把BIOS计时器的振荡频率偏差——或者说Local Clock的自然漂移(drift)——记录下来。</p>\n<p>这样即使网络有问题，本机仍然能维持一个相当精确的走时。</p>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"==其他问题==\"></a>==其他问题==</h3><p>配置了ntp服务之后，发现时间仍然无法同步</p>\n<p>通过命令timedatectl查看，之后，发现ntp服务没有生效（NTP enabled: no），如下图所示</p>\n<p><img src=\"915691-20200929232515753-1829091402.png\"></p>\n<p>执行命令timedatectl set-ntp yes之后，问题得以解决。</p>\n<blockquote>\n<p>参考资料</p>\n<p><a href=\"https://www.cnblogs.com/quchunhui/p/7658853.html\">https://www.cnblogs.com/quchunhui/p/7658853.html</a></p>\n<p>鸟哥的Linux私房菜 <a href=\"http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf\">http://linux.vbird.org/linux_server/0440ntp.php#server_ntp.conf</a></p>\n<p><a href=\"https://www.cnblogs.com/yjt1993/p/11177554.html\">https://www.cnblogs.com/yjt1993/p/11177554.html</a></p>\n</blockquote>\n"},{"title":"Spring源码环境搭建","comments":1,"index_img":"/img/spring.jpg","banner_img":"/img/background/vilige.jpg","date":"2021-06-28T01:13:05.000Z","updated":"2021-06-28T01:13:05.000Z","_content":"\n# 一、环境搭建\n\n> **Spring版本：5.0.21.BUILD-SNAPSHOT**\n>\n> **IDEA版本：2019.3 U**\n>\n> **Gradle版本：4.4.1**\n>\n> **AspectJ版本：1.9.0**\n\n1. Fork自己Spring源码仓，便于注释与调试\n\n2. 安装Gradle\n\n   1. 从Gradle官网下载gradle安装包 网址https://gradle.org/releases/\n\n      ![](70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png)\n\n   2. 解压\n\n      ![](5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png)\n\n   3. 配置环境变量\n\n      ![](b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png)\n\n      ![](43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png)\n\n   4. 打开目录行工具，输入`gradle -v`，能看到gradle的版本信息表示安装已经成功\n\n   ![](31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png)\n\n   \n\n   \n\n3. 导入Spring源码\n\n   1. 从github拉取代码到本地\n\n   2. 导入项目\n\n      ![](58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png)\n\n      \n\n   3. 解决导包问题\n\n      **spring为了避免与cglib和objenesis冲突，将cglib和objenesis相关的包重新repack到`org.springframework.cglib`和`org.springframework.objenesis`包中，这部分的代码没有包含到源码当中。构建之前，需要先build这两个包。可以通过添加Gradle任务来解决：**\n\n      在右侧的Gradle面板Spring -> Tasks -> other -> cglibRepackJar\n\n      ![](9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png)\n\n      ![](ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png)\n\n      激活任务\n\n      ![](737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png)\n\n      默认仓库网速下载较慢，添加阿里镜像仓库。\n\n      ![](e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png)\n\n      ```java\n      \trepositories {\n      \t\t//新增以下2个阿里云镜像\n      \t\tmaven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }\n      \t\tmaven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }\n      \t\tmavenCentral()\n      \t\tmaven { url \"https://repo.spring.io/libs-spring-framework-build\" }\n      \t\t//新增spring插件库\n      \t\tmaven { url \"https://repo.spring.io/plugins-release\" }\n      \t}\n      ```\n\n      \n\n      重新构建项目（构建时间较长）\n\n      ![](038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png)\n\n4. 创建测试模块\n\n   - 为了方便编写测试spring的代码，在spring-framework单独新建一个模块my-test\n\n     右键spring-framework项目->New->Module...\n\n     ![](c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png)\n\n   - 输入ArtifactId: my-test\n\n     ![](8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png)\n\n   - 添加依赖：`api(project(\":spring-context\"))`\n\n     ![](9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png)\n\n   - 为了能让my-test自动导入相关的依赖，在Gradle面板中右键spring节点 \n\n   ![](938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png)\n\n   - 在my-test模块中编写程序测试\n\n     - 创建`MyApplication`\n\n       ```java\n       package com.geekjk;\n       \n       import org.springframework.context.ApplicationContext;\n       import org.springframework.context.support.ClassPathXmlApplicationContext;\n       \n       public class MyApplication {\n       \n       \tpublic static void main(String[] args) {\n       \t\tApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n       \t\tHello hello = (Hello)ac.getBean(\"hello\");\n       \t\thello.sayHello();\n       \t}\n       \n       }\n       ```\n\n       \n\n     - 在resources目录下新建`applicationContext.xml`\n\n       ```java\n       <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n       <beans xmlns=\"http://www.springframework.org/schema/beans\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n       \n       \t<bean id=\"hello\" class=\"com.geekjk.Hello\"></bean>\n       \n       </beans>\n       ```\n\n       \n\n     - 新建`Hello`类\n\n     ```java\n     package com.geekjk;\n     \n     public class Hello {\n     \n     \tpublic void sayHello() {\n     \t\tSystem.out.println(\"Hello, Spring!\");\n     \t}\n     \n     }\n     ```\n\n     \n\n     - 运行`MyApplication`，可以看到控制台输出：`Hello, Spring`!\n\n   - 至此整个环境算是搭建好了,可以开始简单愉快的源码阅读之旅了。\n\n      \n\n> 书籍《Spring源码深度解析（第2版）》 作者郝佳\n\n\n\n\n\n\n\n\n\n","source":"_posts/2021-09-28-spring-source.md","raw":"---\ntitle: Spring源码环境搭建\ncomments: true\nindex_img: /img/spring.jpg\nbanner_img: /img/background/vilige.jpg\ndate: 2021-06-28 09:13:05\nupdated: 2021-06-28 09:13:05\ntags: [Spring,JAVA]\ncategories: JAVA\n---\n\n# 一、环境搭建\n\n> **Spring版本：5.0.21.BUILD-SNAPSHOT**\n>\n> **IDEA版本：2019.3 U**\n>\n> **Gradle版本：4.4.1**\n>\n> **AspectJ版本：1.9.0**\n\n1. Fork自己Spring源码仓，便于注释与调试\n\n2. 安装Gradle\n\n   1. 从Gradle官网下载gradle安装包 网址https://gradle.org/releases/\n\n      ![](70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png)\n\n   2. 解压\n\n      ![](5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png)\n\n   3. 配置环境变量\n\n      ![](b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png)\n\n      ![](43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png)\n\n   4. 打开目录行工具，输入`gradle -v`，能看到gradle的版本信息表示安装已经成功\n\n   ![](31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png)\n\n   \n\n   \n\n3. 导入Spring源码\n\n   1. 从github拉取代码到本地\n\n   2. 导入项目\n\n      ![](58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png)\n\n      \n\n   3. 解决导包问题\n\n      **spring为了避免与cglib和objenesis冲突，将cglib和objenesis相关的包重新repack到`org.springframework.cglib`和`org.springframework.objenesis`包中，这部分的代码没有包含到源码当中。构建之前，需要先build这两个包。可以通过添加Gradle任务来解决：**\n\n      在右侧的Gradle面板Spring -> Tasks -> other -> cglibRepackJar\n\n      ![](9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png)\n\n      ![](ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png)\n\n      激活任务\n\n      ![](737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png)\n\n      默认仓库网速下载较慢，添加阿里镜像仓库。\n\n      ![](e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png)\n\n      ```java\n      \trepositories {\n      \t\t//新增以下2个阿里云镜像\n      \t\tmaven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }\n      \t\tmaven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }\n      \t\tmavenCentral()\n      \t\tmaven { url \"https://repo.spring.io/libs-spring-framework-build\" }\n      \t\t//新增spring插件库\n      \t\tmaven { url \"https://repo.spring.io/plugins-release\" }\n      \t}\n      ```\n\n      \n\n      重新构建项目（构建时间较长）\n\n      ![](038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png)\n\n4. 创建测试模块\n\n   - 为了方便编写测试spring的代码，在spring-framework单独新建一个模块my-test\n\n     右键spring-framework项目->New->Module...\n\n     ![](c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png)\n\n   - 输入ArtifactId: my-test\n\n     ![](8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png)\n\n   - 添加依赖：`api(project(\":spring-context\"))`\n\n     ![](9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png)\n\n   - 为了能让my-test自动导入相关的依赖，在Gradle面板中右键spring节点 \n\n   ![](938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png)\n\n   - 在my-test模块中编写程序测试\n\n     - 创建`MyApplication`\n\n       ```java\n       package com.geekjk;\n       \n       import org.springframework.context.ApplicationContext;\n       import org.springframework.context.support.ClassPathXmlApplicationContext;\n       \n       public class MyApplication {\n       \n       \tpublic static void main(String[] args) {\n       \t\tApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n       \t\tHello hello = (Hello)ac.getBean(\"hello\");\n       \t\thello.sayHello();\n       \t}\n       \n       }\n       ```\n\n       \n\n     - 在resources目录下新建`applicationContext.xml`\n\n       ```java\n       <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n       <beans xmlns=\"http://www.springframework.org/schema/beans\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n       \n       \t<bean id=\"hello\" class=\"com.geekjk.Hello\"></bean>\n       \n       </beans>\n       ```\n\n       \n\n     - 新建`Hello`类\n\n     ```java\n     package com.geekjk;\n     \n     public class Hello {\n     \n     \tpublic void sayHello() {\n     \t\tSystem.out.println(\"Hello, Spring!\");\n     \t}\n     \n     }\n     ```\n\n     \n\n     - 运行`MyApplication`，可以看到控制台输出：`Hello, Spring`!\n\n   - 至此整个环境算是搭建好了,可以开始简单愉快的源码阅读之旅了。\n\n      \n\n> 书籍《Spring源码深度解析（第2版）》 作者郝佳\n\n\n\n\n\n\n\n\n\n","slug":"spring-source","published":1,"_id":"cku3q80kg000558fgfppy0lc7","layout":"post","photos":[],"link":"","content":"<h1 id=\"一、环境搭建\"><a href=\"#一、环境搭建\" class=\"headerlink\" title=\"一、环境搭建\"></a>一、环境搭建</h1><blockquote>\n<p><strong>Spring版本：5.0.21.BUILD-SNAPSHOT</strong></p>\n<p><strong>IDEA版本：2019.3 U</strong></p>\n<p><strong>Gradle版本：4.4.1</strong></p>\n<p><strong>AspectJ版本：1.9.0</strong></p>\n</blockquote>\n<ol>\n<li><p>Fork自己Spring源码仓，便于注释与调试</p>\n</li>\n<li><p>安装Gradle</p>\n<ol>\n<li><p>从Gradle官网下载gradle安装包 网址<a href=\"https://gradle.org/releases/\">https://gradle.org/releases/</a></p>\n<p><img src=\"70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png\"></p>\n</li>\n<li><p>解压</p>\n<p><img src=\"5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png\"></p>\n</li>\n<li><p>配置环境变量</p>\n<p><img src=\"b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png\"></p>\n<p><img src=\"43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png\"></p>\n</li>\n<li><p>打开目录行工具，输入<code>gradle -v</code>，能看到gradle的版本信息表示安装已经成功</p>\n</li>\n</ol>\n<p><img src=\"31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png\"></p>\n</li>\n<li><p>导入Spring源码</p>\n<ol>\n<li><p>从github拉取代码到本地</p>\n</li>\n<li><p>导入项目</p>\n<p><img src=\"58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png\"></p>\n</li>\n<li><p>解决导包问题</p>\n<p><strong>spring为了避免与cglib和objenesis冲突，将cglib和objenesis相关的包重新repack到<code>org.springframework.cglib</code>和<code>org.springframework.objenesis</code>包中，这部分的代码没有包含到源码当中。构建之前，需要先build这两个包。可以通过添加Gradle任务来解决：</strong></p>\n<p>在右侧的Gradle面板Spring -&gt; Tasks -&gt; other -&gt; cglibRepackJar</p>\n<p><img src=\"9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png\"></p>\n<p><img src=\"ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png\"></p>\n<p>激活任务</p>\n<p><img src=\"737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png\"></p>\n<p>默认仓库网速下载较慢，添加阿里镜像仓库。</p>\n<p><img src=\"e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">repositories &#123;<br>\t<span class=\"hljs-comment\">//新增以下2个阿里云镜像</span><br>\tmaven &#123; url <span class=\"hljs-string\">&#x27;https://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;<br>\tmaven &#123; url <span class=\"hljs-string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span> &#125;<br>\tmavenCentral()<br>\tmaven &#123; url <span class=\"hljs-string\">&quot;https://repo.spring.io/libs-spring-framework-build&quot;</span> &#125;<br>\t<span class=\"hljs-comment\">//新增spring插件库</span><br>\tmaven &#123; url <span class=\"hljs-string\">&quot;https://repo.spring.io/plugins-release&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>重新构建项目（构建时间较长）</p>\n<p><img src=\"038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png\"></p>\n</li>\n</ol>\n</li>\n<li><p>创建测试模块</p>\n<ul>\n<li><p>为了方便编写测试spring的代码，在spring-framework单独新建一个模块my-test</p>\n<p>右键spring-framework项目-&gt;New-&gt;Module…</p>\n<p><img src=\"c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png\"></p>\n</li>\n<li><p>输入ArtifactId: my-test</p>\n<p><img src=\"8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png\"></p>\n</li>\n<li><p>添加依赖：<code>api(project(&quot;:spring-context&quot;))</code></p>\n<p><img src=\"9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png\"></p>\n</li>\n<li><p>为了能让my-test自动导入相关的依赖，在Gradle面板中右键spring节点 </p>\n</li>\n</ul>\n<p><img src=\"938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png\"></p>\n<ul>\n<li><p>在my-test模块中编写程序测试</p>\n<ul>\n<li><p>创建<code>MyApplication</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.geekjk;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApplication</span> </span>&#123;<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\tApplicationContext ac = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;classpath:applicationContext.xml&quot;</span>);<br>\t\tHello hello = (Hello)ac.getBean(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>\t\thello.sayHello();<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>在resources目录下新建<code>applicationContext.xml</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>\t&lt;bean id=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;com.geekjk.Hello&quot;</span>&gt;&lt;/bean&gt;<br><br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>新建<code>Hello</code>类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.geekjk;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span> </span>&#123;<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;Hello, Spring!&quot;</span>);<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>运行<code>MyApplication</code>，可以看到控制台输出：<code>Hello, Spring</code>!</li>\n</ul>\n</li>\n<li><p>至此整个环境算是搭建好了,可以开始简单愉快的源码阅读之旅了。</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>书籍《Spring源码深度解析（第2版）》 作者郝佳</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、环境搭建\"><a href=\"#一、环境搭建\" class=\"headerlink\" title=\"一、环境搭建\"></a>一、环境搭建</h1><blockquote>\n<p><strong>Spring版本：5.0.21.BUILD-SNAPSHOT</strong></p>\n<p><strong>IDEA版本：2019.3 U</strong></p>\n<p><strong>Gradle版本：4.4.1</strong></p>\n<p><strong>AspectJ版本：1.9.0</strong></p>\n</blockquote>\n<ol>\n<li><p>Fork自己Spring源码仓，便于注释与调试</p>\n</li>\n<li><p>安装Gradle</p>\n<ol>\n<li><p>从Gradle官网下载gradle安装包 网址<a href=\"https://gradle.org/releases/\">https://gradle.org/releases/</a></p>\n<p><img src=\"70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png\"></p>\n</li>\n<li><p>解压</p>\n<p><img src=\"5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png\"></p>\n</li>\n<li><p>配置环境变量</p>\n<p><img src=\"b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png\"></p>\n<p><img src=\"43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png\"></p>\n</li>\n<li><p>打开目录行工具，输入<code>gradle -v</code>，能看到gradle的版本信息表示安装已经成功</p>\n</li>\n</ol>\n<p><img src=\"31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png\"></p>\n</li>\n<li><p>导入Spring源码</p>\n<ol>\n<li><p>从github拉取代码到本地</p>\n</li>\n<li><p>导入项目</p>\n<p><img src=\"58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png\"></p>\n</li>\n<li><p>解决导包问题</p>\n<p><strong>spring为了避免与cglib和objenesis冲突，将cglib和objenesis相关的包重新repack到<code>org.springframework.cglib</code>和<code>org.springframework.objenesis</code>包中，这部分的代码没有包含到源码当中。构建之前，需要先build这两个包。可以通过添加Gradle任务来解决：</strong></p>\n<p>在右侧的Gradle面板Spring -&gt; Tasks -&gt; other -&gt; cglibRepackJar</p>\n<p><img src=\"9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png\"></p>\n<p><img src=\"ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png\"></p>\n<p>激活任务</p>\n<p><img src=\"737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png\"></p>\n<p>默认仓库网速下载较慢，添加阿里镜像仓库。</p>\n<p><img src=\"e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">repositories &#123;<br>\t<span class=\"hljs-comment\">//新增以下2个阿里云镜像</span><br>\tmaven &#123; url <span class=\"hljs-string\">&#x27;https://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;<br>\tmaven &#123; url <span class=\"hljs-string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span> &#125;<br>\tmavenCentral()<br>\tmaven &#123; url <span class=\"hljs-string\">&quot;https://repo.spring.io/libs-spring-framework-build&quot;</span> &#125;<br>\t<span class=\"hljs-comment\">//新增spring插件库</span><br>\tmaven &#123; url <span class=\"hljs-string\">&quot;https://repo.spring.io/plugins-release&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>重新构建项目（构建时间较长）</p>\n<p><img src=\"038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png\"></p>\n</li>\n</ol>\n</li>\n<li><p>创建测试模块</p>\n<ul>\n<li><p>为了方便编写测试spring的代码，在spring-framework单独新建一个模块my-test</p>\n<p>右键spring-framework项目-&gt;New-&gt;Module…</p>\n<p><img src=\"c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png\"></p>\n</li>\n<li><p>输入ArtifactId: my-test</p>\n<p><img src=\"8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png\"></p>\n</li>\n<li><p>添加依赖：<code>api(project(&quot;:spring-context&quot;))</code></p>\n<p><img src=\"9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png\"></p>\n</li>\n<li><p>为了能让my-test自动导入相关的依赖，在Gradle面板中右键spring节点 </p>\n</li>\n</ul>\n<p><img src=\"938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png\"></p>\n<ul>\n<li><p>在my-test模块中编写程序测试</p>\n<ul>\n<li><p>创建<code>MyApplication</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.geekjk;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApplication</span> </span>&#123;<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\tApplicationContext ac = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;classpath:applicationContext.xml&quot;</span>);<br>\t\tHello hello = (Hello)ac.getBean(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>\t\thello.sayHello();<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>在resources目录下新建<code>applicationContext.xml</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>\t&lt;bean id=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;com.geekjk.Hello&quot;</span>&gt;&lt;/bean&gt;<br><br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>新建<code>Hello</code>类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.geekjk;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span> </span>&#123;<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;Hello, Spring!&quot;</span>);<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>运行<code>MyApplication</code>，可以看到控制台输出：<code>Hello, Spring</code>!</li>\n</ul>\n</li>\n<li><p>至此整个环境算是搭建好了,可以开始简单愉快的源码阅读之旅了。</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>书籍《Spring源码深度解析（第2版）》 作者郝佳</p>\n</blockquote>\n"},{"title":"JVM调优（一）","date":"2021-09-24T01:23:42.000Z","comments":1,"index_img":"/img/JVM.png","banner_img":"/img/background/vilige.jpg","_content":"\n\n\n​\t  近日，随着项目的演进，微服务越来越多，在前后分离、后端双节点的部署架构下，每个微服务都运行在一个tomcat当中，单节点的负载能力竟已达到瓶颈。在计算能力如此强大的今天，没有节制地使用虚拟机资源果然还是不行，呵呵。\n\n![](image-20210923135927456.png)\n\n\n\n## 问题\n\n#### 上下文\n\n> 虚拟机规格为4U16G x86   linux操作系统\n>\n> 内网项目，微服务大概10个左右，包括注册中心、网关等，并发量不大。\n>\n> web容器为tomcat\n>\n> jdk1.8\n\n**首先说说什么是RES和VIRT？**\n\n>RES：resident memory usage 常驻内存\n>\n>（1）进程当前使用的内存大小，但不包括swap out\n>\n>（2）包含其他进程的共享\n>\n>（3）如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反\n>\n>（4）关于库占用内存的情况，它只统计加载的库文件所占内存大小\n>\n>RES = CODE + DATA\n>\n>VIRT：virtual memory usage\n>\n>（1）进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等\n>\n>（2）假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量\n>\n>VIRT = SWAP + RES\n\n安装部署项目之后使用free -h和top命令查看CPU和内存的使用情况\n\n![](image-20210923140858686.png)\n\n1、可以看出，虚拟机16G的内存只剩下可怜197M内存，真是在翻车边缘疯狂试探，这与测试反映的系统偶尔瘫痪的表象也是吻合的。\n\n2、单个微服务的RES常驻内存在1.2G~1.6G之间，而在ARM服务器上甚至达到了3G左右，10个微服务基本把16G的内存用差不多了。以当前项目的负载需求来看，并没有大并发的场景，也不存在大数据量的接口，这个负载是偏高的，比如一个10个左右服务的注册中心Eureka，不包含任何业务代码也占用了如上的内存，是不合理的。\n\n## 分析\n\n我们以注册中心Eureka来入手，它没有业务代码，减少变量利于我们快速地定位问题。\n\n这里我们先排除内存溢出或内存泄露的问题，当然也不是绝对排除。为什么这么说呢，如果某个微服务有代码存在内存溢出或泄露隐患，不会导致所有微服务内存占用都高，而且类似注册中心这种微服务几乎是零业务代码的。其次，这类问题会在程序运行一段时间过后突然down掉，从项目运行的情况来看，暂时没有发现这种情况。因此，内存溢出或泄露的问题可以放在后面再进一步定位。\n\n通过本人的给服务器把脉问诊，初步分析原因是服务器君过于娇纵后宫，导致后宫争宠，时间被各妃子日程占满，从而导致身体吃不消了。\n\n简单来说就是没有为各Tomcat设置JVM内存参数，各个微服务无节制地使用服务器内存导致的。\n\n我们通过几个简单的参数`Xms`、`Xmx`、`Xss`来验证一下。\n\n>-Xms 是指程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂变慢，程序在内存不够时会进行扩展，而扩展也是会影响效率的，可能会导致程序突然卡顿一下，因此许多的项目中这个值一步到位设置和最大值Xmx一样。\n>\n>-Xmx 是指程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常。\n>\n>-Xss 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程大约需要占用多少内存，可能会有多少线程同时运行等。默认JDK1.4中是256K，JDK1.5+中是1M。\n\n由于项目当初是使用的是一个未知的定制版的Tomcat，已经改的面目全非，没有文档支持，花费了很大功夫才找到加JAVA启动参数的地方。不具备参考意义，我们以开源版的Tomcat为例。\n\n这次 ，我们使用java自带的jvm监控工具jvisualvm来监控jvm的启动参数、内存占用等信息，使用前我们需要给JVM加上启动参数来打开调试接口。\n\n我们在Tomcat的bin目录下的catalina.sh启动文件中添加如下内容（windows下请修改catalina.bat）。\n\n![](image-20210923161704099.png)\n\n```shell\nexport JAVA_OPTS=\"-Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n```\n\n>-Djava.rmi.server.hostname：服务器IP，修改为自己的虚拟机的IP即可\n>\n>-Dcom.sun.management.jmxremote.port ：开放端口，这里自定义即可，笔者用的是8899，只要端口没有冲突即可。\n>\n>-Dcom.sun.management.jmxremote.ssl=false、-Dcom.sun.management.jmxremote.authenticate=false：是否启用SSL安全协议、安全认证，主要是为了安全，这里一般设置为false即可，生产环境中我们一般也不会打开调试端口。\n\n打开jvisualvm工具\n\n1、添加远程服务器，Remote右键 Add Remote Host...，填入上面配置的服务器IP\n\n![](image-20210923163132389.png)\n\n\n\n![](image-20210923163347853.png)\n\n\n\n2、添加JXM连接\n\n![](image-20210923163549140.png)\n\n按照下图配置\n\n![](image-20210923163638670.png)\n\n双击建立好的连接可以实时查看当前程序的运行状况和堆栈信息等\n\n![](image-20210923164143750.png)\n\n可以看到，我们jvm虚拟机的参数列表并没有内存限制相关参数。\n\n我们为它加上参数再连接试试，将刚才的刚才的JAVA_OPTS参数修改为：\n\n```shell\nexport JAVA_OPTS=\"-Xms512m -Xmx512m -Xss256m -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n```\n\n![](image-20210923165424944.png)\n\n可以看到我们jvm已经有内存参数了，这时我们再看下这个eureka注册中心进程的内存占用。\n\n![](image-20210923165520445.png)\n\n已经稳定在518M左右了，为什么是这个数呢，而不是我们设置的512M呢？因为我们的JVM进程除了heap内存，还有一些堆外内存。\n\n## 总结\n\n我们定位到了tomcat内存高的原因，也找到了解决的方法，但是这个问题我们目前只解决了一半。\n\n我们仍然需要回答Xms或其他内存参数到底该设置多少才合理，这个数字不能拍脑袋，需要结合具体的业务需求，还需要与我们的测试小哥哥一起压测才能得出结论。","source":"_posts/JVM调优(一).md","raw":"---\ntitle: JVM调优（一）\ndate: 2021-09-24 09:23:42\ntags: [ JVM,Tomcat,调优 ] \ncategories: JVM\ncomments: true\nindex_img: /img/JVM.png\nbanner_img: /img/background/vilige.jpg\n---\n\n\n\n​\t  近日，随着项目的演进，微服务越来越多，在前后分离、后端双节点的部署架构下，每个微服务都运行在一个tomcat当中，单节点的负载能力竟已达到瓶颈。在计算能力如此强大的今天，没有节制地使用虚拟机资源果然还是不行，呵呵。\n\n![](image-20210923135927456.png)\n\n\n\n## 问题\n\n#### 上下文\n\n> 虚拟机规格为4U16G x86   linux操作系统\n>\n> 内网项目，微服务大概10个左右，包括注册中心、网关等，并发量不大。\n>\n> web容器为tomcat\n>\n> jdk1.8\n\n**首先说说什么是RES和VIRT？**\n\n>RES：resident memory usage 常驻内存\n>\n>（1）进程当前使用的内存大小，但不包括swap out\n>\n>（2）包含其他进程的共享\n>\n>（3）如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反\n>\n>（4）关于库占用内存的情况，它只统计加载的库文件所占内存大小\n>\n>RES = CODE + DATA\n>\n>VIRT：virtual memory usage\n>\n>（1）进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等\n>\n>（2）假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量\n>\n>VIRT = SWAP + RES\n\n安装部署项目之后使用free -h和top命令查看CPU和内存的使用情况\n\n![](image-20210923140858686.png)\n\n1、可以看出，虚拟机16G的内存只剩下可怜197M内存，真是在翻车边缘疯狂试探，这与测试反映的系统偶尔瘫痪的表象也是吻合的。\n\n2、单个微服务的RES常驻内存在1.2G~1.6G之间，而在ARM服务器上甚至达到了3G左右，10个微服务基本把16G的内存用差不多了。以当前项目的负载需求来看，并没有大并发的场景，也不存在大数据量的接口，这个负载是偏高的，比如一个10个左右服务的注册中心Eureka，不包含任何业务代码也占用了如上的内存，是不合理的。\n\n## 分析\n\n我们以注册中心Eureka来入手，它没有业务代码，减少变量利于我们快速地定位问题。\n\n这里我们先排除内存溢出或内存泄露的问题，当然也不是绝对排除。为什么这么说呢，如果某个微服务有代码存在内存溢出或泄露隐患，不会导致所有微服务内存占用都高，而且类似注册中心这种微服务几乎是零业务代码的。其次，这类问题会在程序运行一段时间过后突然down掉，从项目运行的情况来看，暂时没有发现这种情况。因此，内存溢出或泄露的问题可以放在后面再进一步定位。\n\n通过本人的给服务器把脉问诊，初步分析原因是服务器君过于娇纵后宫，导致后宫争宠，时间被各妃子日程占满，从而导致身体吃不消了。\n\n简单来说就是没有为各Tomcat设置JVM内存参数，各个微服务无节制地使用服务器内存导致的。\n\n我们通过几个简单的参数`Xms`、`Xmx`、`Xss`来验证一下。\n\n>-Xms 是指程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂变慢，程序在内存不够时会进行扩展，而扩展也是会影响效率的，可能会导致程序突然卡顿一下，因此许多的项目中这个值一步到位设置和最大值Xmx一样。\n>\n>-Xmx 是指程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常。\n>\n>-Xss 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程大约需要占用多少内存，可能会有多少线程同时运行等。默认JDK1.4中是256K，JDK1.5+中是1M。\n\n由于项目当初是使用的是一个未知的定制版的Tomcat，已经改的面目全非，没有文档支持，花费了很大功夫才找到加JAVA启动参数的地方。不具备参考意义，我们以开源版的Tomcat为例。\n\n这次 ，我们使用java自带的jvm监控工具jvisualvm来监控jvm的启动参数、内存占用等信息，使用前我们需要给JVM加上启动参数来打开调试接口。\n\n我们在Tomcat的bin目录下的catalina.sh启动文件中添加如下内容（windows下请修改catalina.bat）。\n\n![](image-20210923161704099.png)\n\n```shell\nexport JAVA_OPTS=\"-Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n```\n\n>-Djava.rmi.server.hostname：服务器IP，修改为自己的虚拟机的IP即可\n>\n>-Dcom.sun.management.jmxremote.port ：开放端口，这里自定义即可，笔者用的是8899，只要端口没有冲突即可。\n>\n>-Dcom.sun.management.jmxremote.ssl=false、-Dcom.sun.management.jmxremote.authenticate=false：是否启用SSL安全协议、安全认证，主要是为了安全，这里一般设置为false即可，生产环境中我们一般也不会打开调试端口。\n\n打开jvisualvm工具\n\n1、添加远程服务器，Remote右键 Add Remote Host...，填入上面配置的服务器IP\n\n![](image-20210923163132389.png)\n\n\n\n![](image-20210923163347853.png)\n\n\n\n2、添加JXM连接\n\n![](image-20210923163549140.png)\n\n按照下图配置\n\n![](image-20210923163638670.png)\n\n双击建立好的连接可以实时查看当前程序的运行状况和堆栈信息等\n\n![](image-20210923164143750.png)\n\n可以看到，我们jvm虚拟机的参数列表并没有内存限制相关参数。\n\n我们为它加上参数再连接试试，将刚才的刚才的JAVA_OPTS参数修改为：\n\n```shell\nexport JAVA_OPTS=\"-Xms512m -Xmx512m -Xss256m -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n```\n\n![](image-20210923165424944.png)\n\n可以看到我们jvm已经有内存参数了，这时我们再看下这个eureka注册中心进程的内存占用。\n\n![](image-20210923165520445.png)\n\n已经稳定在518M左右了，为什么是这个数呢，而不是我们设置的512M呢？因为我们的JVM进程除了heap内存，还有一些堆外内存。\n\n## 总结\n\n我们定位到了tomcat内存高的原因，也找到了解决的方法，但是这个问题我们目前只解决了一半。\n\n我们仍然需要回答Xms或其他内存参数到底该设置多少才合理，这个数字不能拍脑袋，需要结合具体的业务需求，还需要与我们的测试小哥哥一起压测才能得出结论。","slug":"JVM调优-一","published":1,"updated":"2021-09-24T10:11:16.201Z","layout":"post","photos":[],"link":"","_id":"cku3q80ki000658fgfzu9aqha","content":"<p>​      近日，随着项目的演进，微服务越来越多，在前后分离、后端双节点的部署架构下，每个微服务都运行在一个tomcat当中，单节点的负载能力竟已达到瓶颈。在计算能力如此强大的今天，没有节制地使用虚拟机资源果然还是不行，呵呵。</p>\n<p><img src=\"image-20210923135927456.png\"></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h4 id=\"上下文\"><a href=\"#上下文\" class=\"headerlink\" title=\"上下文\"></a>上下文</h4><blockquote>\n<p>虚拟机规格为4U16G x86   linux操作系统</p>\n<p>内网项目，微服务大概10个左右，包括注册中心、网关等，并发量不大。</p>\n<p>web容器为tomcat</p>\n<p>jdk1.8</p>\n</blockquote>\n<p><strong>首先说说什么是RES和VIRT？</strong></p>\n<blockquote>\n<p>RES：resident memory usage 常驻内存</p>\n<p>（1）进程当前使用的内存大小，但不包括swap out</p>\n<p>（2）包含其他进程的共享</p>\n<p>（3）如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反</p>\n<p>（4）关于库占用内存的情况，它只统计加载的库文件所占内存大小</p>\n<p>RES = CODE + DATA</p>\n<p>VIRT：virtual memory usage</p>\n<p>（1）进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等</p>\n<p>（2）假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量</p>\n<p>VIRT = SWAP + RES</p>\n</blockquote>\n<p>安装部署项目之后使用free -h和top命令查看CPU和内存的使用情况</p>\n<p><img src=\"image-20210923140858686.png\"></p>\n<p>1、可以看出，虚拟机16G的内存只剩下可怜197M内存，真是在翻车边缘疯狂试探，这与测试反映的系统偶尔瘫痪的表象也是吻合的。</p>\n<p>2、单个微服务的RES常驻内存在1.2G~1.6G之间，而在ARM服务器上甚至达到了3G左右，10个微服务基本把16G的内存用差不多了。以当前项目的负载需求来看，并没有大并发的场景，也不存在大数据量的接口，这个负载是偏高的，比如一个10个左右服务的注册中心Eureka，不包含任何业务代码也占用了如上的内存，是不合理的。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们以注册中心Eureka来入手，它没有业务代码，减少变量利于我们快速地定位问题。</p>\n<p>这里我们先排除内存溢出或内存泄露的问题，当然也不是绝对排除。为什么这么说呢，如果某个微服务有代码存在内存溢出或泄露隐患，不会导致所有微服务内存占用都高，而且类似注册中心这种微服务几乎是零业务代码的。其次，这类问题会在程序运行一段时间过后突然down掉，从项目运行的情况来看，暂时没有发现这种情况。因此，内存溢出或泄露的问题可以放在后面再进一步定位。</p>\n<p>通过本人的给服务器把脉问诊，初步分析原因是服务器君过于娇纵后宫，导致后宫争宠，时间被各妃子日程占满，从而导致身体吃不消了。</p>\n<p>简单来说就是没有为各Tomcat设置JVM内存参数，各个微服务无节制地使用服务器内存导致的。</p>\n<p>我们通过几个简单的参数<code>Xms</code>、<code>Xmx</code>、<code>Xss</code>来验证一下。</p>\n<blockquote>\n<p>-Xms 是指程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂变慢，程序在内存不够时会进行扩展，而扩展也是会影响效率的，可能会导致程序突然卡顿一下，因此许多的项目中这个值一步到位设置和最大值Xmx一样。</p>\n<p>-Xmx 是指程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常。</p>\n<p>-Xss 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程大约需要占用多少内存，可能会有多少线程同时运行等。默认JDK1.4中是256K，JDK1.5+中是1M。</p>\n</blockquote>\n<p>由于项目当初是使用的是一个未知的定制版的Tomcat，已经改的面目全非，没有文档支持，花费了很大功夫才找到加JAVA启动参数的地方。不具备参考意义，我们以开源版的Tomcat为例。</p>\n<p>这次 ，我们使用java自带的jvm监控工具jvisualvm来监控jvm的启动参数、内存占用等信息，使用前我们需要给JVM加上启动参数来打开调试接口。</p>\n<p>我们在Tomcat的bin目录下的catalina.sh启动文件中添加如下内容（windows下请修改catalina.bat）。</p>\n<p><img src=\"image-20210923161704099.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">export JAVA_OPTS=&quot;-Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-Djava.rmi.server.hostname：服务器IP，修改为自己的虚拟机的IP即可</p>\n<p>-Dcom.sun.management.jmxremote.port ：开放端口，这里自定义即可，笔者用的是8899，只要端口没有冲突即可。</p>\n<p>-Dcom.sun.management.jmxremote.ssl=false、-Dcom.sun.management.jmxremote.authenticate=false：是否启用SSL安全协议、安全认证，主要是为了安全，这里一般设置为false即可，生产环境中我们一般也不会打开调试端口。</p>\n</blockquote>\n<p>打开jvisualvm工具</p>\n<p>1、添加远程服务器，Remote右键 Add Remote Host…，填入上面配置的服务器IP</p>\n<p><img src=\"image-20210923163132389.png\"></p>\n<p><img src=\"image-20210923163347853.png\"></p>\n<p>2、添加JXM连接</p>\n<p><img src=\"image-20210923163549140.png\"></p>\n<p>按照下图配置</p>\n<p><img src=\"image-20210923163638670.png\"></p>\n<p>双击建立好的连接可以实时查看当前程序的运行状况和堆栈信息等</p>\n<p><img src=\"image-20210923164143750.png\"></p>\n<p>可以看到，我们jvm虚拟机的参数列表并没有内存限制相关参数。</p>\n<p>我们为它加上参数再连接试试，将刚才的刚才的JAVA_OPTS参数修改为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">export JAVA_OPTS=&quot;-Xms512m -Xmx512m -Xss256m -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"image-20210923165424944.png\"></p>\n<p>可以看到我们jvm已经有内存参数了，这时我们再看下这个eureka注册中心进程的内存占用。</p>\n<p><img src=\"image-20210923165520445.png\"></p>\n<p>已经稳定在518M左右了，为什么是这个数呢，而不是我们设置的512M呢？因为我们的JVM进程除了heap内存，还有一些堆外内存。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们定位到了tomcat内存高的原因，也找到了解决的方法，但是这个问题我们目前只解决了一半。</p>\n<p>我们仍然需要回答Xms或其他内存参数到底该设置多少才合理，这个数字不能拍脑袋，需要结合具体的业务需求，还需要与我们的测试小哥哥一起压测才能得出结论。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​      近日，随着项目的演进，微服务越来越多，在前后分离、后端双节点的部署架构下，每个微服务都运行在一个tomcat当中，单节点的负载能力竟已达到瓶颈。在计算能力如此强大的今天，没有节制地使用虚拟机资源果然还是不行，呵呵。</p>\n<p><img src=\"image-20210923135927456.png\"></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h4 id=\"上下文\"><a href=\"#上下文\" class=\"headerlink\" title=\"上下文\"></a>上下文</h4><blockquote>\n<p>虚拟机规格为4U16G x86   linux操作系统</p>\n<p>内网项目，微服务大概10个左右，包括注册中心、网关等，并发量不大。</p>\n<p>web容器为tomcat</p>\n<p>jdk1.8</p>\n</blockquote>\n<p><strong>首先说说什么是RES和VIRT？</strong></p>\n<blockquote>\n<p>RES：resident memory usage 常驻内存</p>\n<p>（1）进程当前使用的内存大小，但不包括swap out</p>\n<p>（2）包含其他进程的共享</p>\n<p>（3）如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反</p>\n<p>（4）关于库占用内存的情况，它只统计加载的库文件所占内存大小</p>\n<p>RES = CODE + DATA</p>\n<p>VIRT：virtual memory usage</p>\n<p>（1）进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等</p>\n<p>（2）假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量</p>\n<p>VIRT = SWAP + RES</p>\n</blockquote>\n<p>安装部署项目之后使用free -h和top命令查看CPU和内存的使用情况</p>\n<p><img src=\"image-20210923140858686.png\"></p>\n<p>1、可以看出，虚拟机16G的内存只剩下可怜197M内存，真是在翻车边缘疯狂试探，这与测试反映的系统偶尔瘫痪的表象也是吻合的。</p>\n<p>2、单个微服务的RES常驻内存在1.2G~1.6G之间，而在ARM服务器上甚至达到了3G左右，10个微服务基本把16G的内存用差不多了。以当前项目的负载需求来看，并没有大并发的场景，也不存在大数据量的接口，这个负载是偏高的，比如一个10个左右服务的注册中心Eureka，不包含任何业务代码也占用了如上的内存，是不合理的。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们以注册中心Eureka来入手，它没有业务代码，减少变量利于我们快速地定位问题。</p>\n<p>这里我们先排除内存溢出或内存泄露的问题，当然也不是绝对排除。为什么这么说呢，如果某个微服务有代码存在内存溢出或泄露隐患，不会导致所有微服务内存占用都高，而且类似注册中心这种微服务几乎是零业务代码的。其次，这类问题会在程序运行一段时间过后突然down掉，从项目运行的情况来看，暂时没有发现这种情况。因此，内存溢出或泄露的问题可以放在后面再进一步定位。</p>\n<p>通过本人的给服务器把脉问诊，初步分析原因是服务器君过于娇纵后宫，导致后宫争宠，时间被各妃子日程占满，从而导致身体吃不消了。</p>\n<p>简单来说就是没有为各Tomcat设置JVM内存参数，各个微服务无节制地使用服务器内存导致的。</p>\n<p>我们通过几个简单的参数<code>Xms</code>、<code>Xmx</code>、<code>Xss</code>来验证一下。</p>\n<blockquote>\n<p>-Xms 是指程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂变慢，程序在内存不够时会进行扩展，而扩展也是会影响效率的，可能会导致程序突然卡顿一下，因此许多的项目中这个值一步到位设置和最大值Xmx一样。</p>\n<p>-Xmx 是指程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常。</p>\n<p>-Xss 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程大约需要占用多少内存，可能会有多少线程同时运行等。默认JDK1.4中是256K，JDK1.5+中是1M。</p>\n</blockquote>\n<p>由于项目当初是使用的是一个未知的定制版的Tomcat，已经改的面目全非，没有文档支持，花费了很大功夫才找到加JAVA启动参数的地方。不具备参考意义，我们以开源版的Tomcat为例。</p>\n<p>这次 ，我们使用java自带的jvm监控工具jvisualvm来监控jvm的启动参数、内存占用等信息，使用前我们需要给JVM加上启动参数来打开调试接口。</p>\n<p>我们在Tomcat的bin目录下的catalina.sh启动文件中添加如下内容（windows下请修改catalina.bat）。</p>\n<p><img src=\"image-20210923161704099.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">export JAVA_OPTS=&quot;-Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-Djava.rmi.server.hostname：服务器IP，修改为自己的虚拟机的IP即可</p>\n<p>-Dcom.sun.management.jmxremote.port ：开放端口，这里自定义即可，笔者用的是8899，只要端口没有冲突即可。</p>\n<p>-Dcom.sun.management.jmxremote.ssl=false、-Dcom.sun.management.jmxremote.authenticate=false：是否启用SSL安全协议、安全认证，主要是为了安全，这里一般设置为false即可，生产环境中我们一般也不会打开调试端口。</p>\n</blockquote>\n<p>打开jvisualvm工具</p>\n<p>1、添加远程服务器，Remote右键 Add Remote Host…，填入上面配置的服务器IP</p>\n<p><img src=\"image-20210923163132389.png\"></p>\n<p><img src=\"image-20210923163347853.png\"></p>\n<p>2、添加JXM连接</p>\n<p><img src=\"image-20210923163549140.png\"></p>\n<p>按照下图配置</p>\n<p><img src=\"image-20210923163638670.png\"></p>\n<p>双击建立好的连接可以实时查看当前程序的运行状况和堆栈信息等</p>\n<p><img src=\"image-20210923164143750.png\"></p>\n<p>可以看到，我们jvm虚拟机的参数列表并没有内存限制相关参数。</p>\n<p>我们为它加上参数再连接试试，将刚才的刚才的JAVA_OPTS参数修改为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">export JAVA_OPTS=&quot;-Xms512m -Xmx512m -Xss256m -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -Dcom.sun.management.jmxremote.port=8899 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"image-20210923165424944.png\"></p>\n<p>可以看到我们jvm已经有内存参数了，这时我们再看下这个eureka注册中心进程的内存占用。</p>\n<p><img src=\"image-20210923165520445.png\"></p>\n<p>已经稳定在518M左右了，为什么是这个数呢，而不是我们设置的512M呢？因为我们的JVM进程除了heap内存，还有一些堆外内存。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们定位到了tomcat内存高的原因，也找到了解决的方法，但是这个问题我们目前只解决了一半。</p>\n<p>我们仍然需要回答Xms或其他内存参数到底该设置多少才合理，这个数字不能拍脑袋，需要结合具体的业务需求，还需要与我们的测试小哥哥一起压测才能得出结论。</p>\n"},{"title":"但愿人长久，千里共婵娟","date":"2021-09-21T08:00:55.000Z","comments":1,"index_img":"/img/background/wp5475530-anime-scenery-4k-wallpapers.jpg","banner_img":"/img/background/vilige.jpg","_content":"\n折腾了大半天，在macos上经历各种nodej、npm、nvm的坑，总算是把个人hexo搭建起来了：P\n\nWhatever，万事开头难，好的开始是成功的一半。\n\n下面工作\n\n1. 配置Fluid主题（帅永远是第一位的）\n2. 整理、搬迁博文\n\n","source":"_posts/随笔01.md","raw":"---\ntitle: 但愿人长久，千里共婵娟\ndate: 2021-09-21 16:00:55\ntags: 随笔\ncategories: 随笔\ncomments: true\nindex_img: /img/background/wp5475530-anime-scenery-4k-wallpapers.jpg\nbanner_img: /img/background/vilige.jpg\n---\n\n折腾了大半天，在macos上经历各种nodej、npm、nvm的坑，总算是把个人hexo搭建起来了：P\n\nWhatever，万事开头难，好的开始是成功的一半。\n\n下面工作\n\n1. 配置Fluid主题（帅永远是第一位的）\n2. 整理、搬迁博文\n\n","slug":"随笔01","published":1,"updated":"2021-09-24T09:18:33.791Z","layout":"post","photos":[],"link":"","_id":"cku3q80kk000758fgdzys0js2","content":"<p>折腾了大半天，在macos上经历各种nodej、npm、nvm的坑，总算是把个人hexo搭建起来了：P</p>\n<p>Whatever，万事开头难，好的开始是成功的一半。</p>\n<p>下面工作</p>\n<ol>\n<li>配置Fluid主题（帅永远是第一位的）</li>\n<li>整理、搬迁博文</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>折腾了大半天，在macos上经历各种nodej、npm、nvm的坑，总算是把个人hexo搭建起来了：P</p>\n<p>Whatever，万事开头难，好的开始是成功的一半。</p>\n<p>下面工作</p>\n<ol>\n<li>配置Fluid主题（帅永远是第一位的）</li>\n<li>整理、搬迁博文</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/2021-09-28-application-yml/image-20210803145617104.png","slug":"image-20210803145617104.png","post":"cku3q80k6000158fg7nfpgn7u","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/20160917151428497.PNG","slug":"20160917151428497.PNG","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013002936340-1631273268.png","slug":"915691-20171013002936340-1631273268.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013005125324-1966406641.png","slug":"915691-20171013005125324-1966406641.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013010729637-1391262052.png","slug":"915691-20171013010729637-1391262052.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013131031496-1095710777.png","slug":"915691-20171013131031496-1095710777.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013131052840-421840461.png","slug":"915691-20171013131052840-421840461.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/915691-20171013131330184-1857767541.png","slug":"915691-20171013131330184-1857767541.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/915691-20200929232515753-1829091402.png","slug":"915691-20200929232515753-1829091402.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-ntp/test1.png","slug":"test1.png","post":"cku3q80ka000258fg7luwh3zl","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png","slug":"038f518ca9dcc65b0ccde5e482d2b94c_279x244.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png","slug":"31f83aec80afde3d4fdcd798a2b1a339_680x336.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png","slug":"43601353efc52c7c49a21907ff8a0520_1129x638.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png","slug":"5252f9334fe6264ff74c55ccc562f870_773x242.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png","slug":"58988f27bf019710457674bd0fc7cb1a_971x613.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png","slug":"70b20ee11a3844aba11f70b4d455e749_539x205.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png","slug":"737ce32fcbfc2f00b721b544d2a35d61_610x376.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png","slug":"8b3086b074d6871075a5f89e13955773_1234x775.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png","slug":"938c154a031b3cb4f650f692c4202026_620x323.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png","slug":"9a292057e8765bd7a795e93c27fe29a4_617x594.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png","slug":"9cc5eef682bef376a5de710efd00febb_1028x441.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png","slug":"b8008815eebf65a58a568ff885bb1e58_900x435.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png","slug":"c6fe250d2e93ecc6237c01bb4eed20a0_794x535.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png","slug":"e5c551c4c0bd41b45af31a7a7d09fc6d_1134x692.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/2021-09-28-spring-source/ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png","slug":"ef73d9266bc1b0ab162bdb559ca7c91d_348x600.png@900-0-90-f.png","post":"cku3q80kg000558fgfppy0lc7","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923135927456.png","slug":"image-20210923135927456.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923140858686.png","slug":"image-20210923140858686.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923161704099.png","slug":"image-20210923161704099.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923163027954.png","slug":"image-20210923163027954.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923163132389.png","slug":"image-20210923163132389.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923163347853.png","slug":"image-20210923163347853.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923163549140.png","slug":"image-20210923163549140.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923163638670.png","slug":"image-20210923163638670.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923163843553.png","slug":"image-20210923163843553.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923164143750.png","slug":"image-20210923164143750.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923165424944.png","slug":"image-20210923165424944.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0},{"_id":"source/_posts/JVM调优(一)/image-20210923165520445.png","slug":"image-20210923165520445.png","post":"cku3q80ki000658fgfzu9aqha","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cku3q80k6000158fg7nfpgn7u","category_id":"cku3q80kd000358fghw9y16lq","_id":"cku3q80kn000a58fg0ln92hev"},{"post_id":"cku3q80ka000258fg7luwh3zl","category_id":"cku3q80kl000858fgdjl1eiwn","_id":"cku3q80kr000e58fg6fkqd25a"},{"post_id":"cku3q80kg000558fgfppy0lc7","category_id":"cku3q80kd000358fghw9y16lq","_id":"cku3q80kt000h58fg2vyx85rg"},{"post_id":"cku3q80ki000658fgfzu9aqha","category_id":"cku3q80kq000d58fg214v1wf3","_id":"cku3q80kv000m58fg9tre1bv2"},{"post_id":"cku3q80kk000758fgdzys0js2","category_id":"cku3q80kt000j58fggub5auzv","_id":"cku3q80kx000p58fg2a4e6a3u"}],"PostTag":[{"post_id":"cku3q80k6000158fg7nfpgn7u","tag_id":"cku3q80kf000458fgchuv8fi1","_id":"cku3q80ks000g58fg1q5o3j0o"},{"post_id":"cku3q80k6000158fg7nfpgn7u","tag_id":"cku3q80km000958fg22k5130y","_id":"cku3q80kt000i58fgf74ohzho"},{"post_id":"cku3q80k6000158fg7nfpgn7u","tag_id":"cku3q80kn000c58fg37lndwz6","_id":"cku3q80kv000l58fg0qk52ylh"},{"post_id":"cku3q80ka000258fg7luwh3zl","tag_id":"cku3q80kr000f58fg6ask5oyc","_id":"cku3q80kx000o58fg8l275tgz"},{"post_id":"cku3q80ka000258fg7luwh3zl","tag_id":"cku3q80ku000k58fg874vdbjm","_id":"cku3q80kx000q58fg716m7rg1"},{"post_id":"cku3q80kg000558fgfppy0lc7","tag_id":"cku3q80kf000458fgchuv8fi1","_id":"cku3q80ky000t58fgfcqr7p68"},{"post_id":"cku3q80kg000558fgfppy0lc7","tag_id":"cku3q80kn000c58fg37lndwz6","_id":"cku3q80kz000u58fg0q32aaz8"},{"post_id":"cku3q80ki000658fgfzu9aqha","tag_id":"cku3q80ky000s58fghqf08v6p","_id":"cku3q80l0000y58fg0peqh9r6"},{"post_id":"cku3q80ki000658fgfzu9aqha","tag_id":"cku3q80kz000v58fg3nzwao5d","_id":"cku3q80l0000z58fgdq547ltm"},{"post_id":"cku3q80ki000658fgfzu9aqha","tag_id":"cku3q80kz000w58fgc7xsctat","_id":"cku3q80l1001058fg8izyaf18"},{"post_id":"cku3q80kk000758fgdzys0js2","tag_id":"cku3q80l0000x58fg6dx4h390","_id":"cku3q80l1001158fgb9fv9f99"}],"Tag":[{"name":"Spring","_id":"cku3q80kf000458fgchuv8fi1"},{"name":"配置","_id":"cku3q80km000958fg22k5130y"},{"name":"JAVA","_id":"cku3q80kn000c58fg37lndwz6"},{"name":"NTP","_id":"cku3q80kr000f58fg6ask5oyc"},{"name":"Linux","_id":"cku3q80ku000k58fg874vdbjm"},{"name":"JVM","_id":"cku3q80ky000s58fghqf08v6p"},{"name":"Tomcat","_id":"cku3q80kz000v58fg3nzwao5d"},{"name":"调优","_id":"cku3q80kz000w58fgc7xsctat"},{"name":"随笔","_id":"cku3q80l0000x58fg6dx4h390"}]}}